(()=>{"use strict";var n={538:(n,t,e)=>{e.d(t,{Z:()=>m});var o=e(537),r=e.n(o),a=e(645),s=e.n(a),i=e(667),c=e.n(i),l=new URL(e(510),e.b),d=new URL(e(937),e.b),A=s()(r()),u=c()(l),p=c()(d);A.push([n.id,'/******************************************************************************/\n/* Inspired by: https://www.joshwcomeau.com/css/custom-css-reset/\n/******************************************************************************/\n\n@font-face {\n    font-family: "Source Sans Pro";\n    src: url('+u+') format("ttf");\n}\n    \n@font-face {\n    font-family: "Roboto";\n    src: url('+p+') format("ttf");\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    font-family: "Source Sans Pro", "Roboto", sans-serif;\n\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\n\nimg, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n}\n\ninput, button, textarea, select {\n    font: inherit;\n}\n\np, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n}\n\n#root, #__next {\n    isolation: isolate;\n}',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA,+EAA+E;AAC/E;+EAC+E;;AAE/E;IACI,8BAA8B;IAC9B,0DAA4D;AAChE;;AAEA;IACI,qBAAqB;IACrB,0DAAqD;AACzD;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,oDAAoD;;IAEpD,gBAAgB;IAChB,mCAAmC;AACvC;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:['/******************************************************************************/\n/* Inspired by: https://www.joshwcomeau.com/css/custom-css-reset/\n/******************************************************************************/\n\n@font-face {\n    font-family: "Source Sans Pro";\n    src: url("../fonts/SourceSansPro-Regular.ttf") format("ttf");\n}\n    \n@font-face {\n    font-family: "Roboto";\n    src: url("../fonts/Roboto-Regular.ttf") format("ttf");\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    font-family: "Source Sans Pro", "Roboto", sans-serif;\n\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\n\nimg, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n}\n\ninput, button, textarea, select {\n    font: inherit;\n}\n\np, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n}\n\n#root, #__next {\n    isolation: isolate;\n}'],sourceRoot:""}]);const m=A},402:(n,t,e)=>{e.d(t,{Z:()=>i});var o=e(537),r=e.n(o),a=e(645),s=e.n(a)()(r());s.push([n.id,'/******************************************************************************/\n/*\n/*   Sections:\n/*\n/*   1.\n/*\n/******************************************************************************/\n\n/******************************************************************************/\n/* Selectors for general elements start here.\n/******************************************************************************/\n\n:root {\n    --color-text-1: #4d4d4d;\n    --color-text-1-inverted: #ffffff;\n\n    --color-brand-1: #847fca;\n    --color-brand-1-a: #9490c9;\n    --color-brand-1-b: #E2E4F6;\n    --color-brand-2: #D4E09B;\n    --color-brand-3: #F4D179;\n    --color-brand-3-a: #e7c46b;\n    --color-brand-3-b: #dbb966;\n    --color-brand-4: #e67a6b;\n\n    --color-modal-1: #4d4d4d50;\n    \n    --color-neutral-1: #f1f1f1;\n    --color-neutral-2: #eaeaea;\n    --color-neutral-3: #e3e3e3;\n    --color-neutral-4: #dbdbdb;\n    --color-neutral-5: #c6c6c6;\n}\n\nbody {\n    color: var(--color-text-1);\n    \n    display: grid;\n    grid-template-columns: 300px 1fr;\n    grid-template-rows: 85px 1fr auto;\n}\n\na {\n    text-decoration: none;\n\n    color: var(--color-text-1);\n}\n\nli {\n    list-style: none;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n/* Selectors for collapsible sections start here. */\n\n.collapsible {\n    display: flex;\n    justify-content: space-between;\n}\n\n.collapsible .collapsible.icon {\n    margin-left: auto;\n\n    transition: all 0.5s ease;\n}\n\n.collapsible.expanded .collapsible.icon {\n    transform: rotate(180deg);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Project" modal start here.\n/******************************************************************************/\n\n.add-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.add-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.add-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.add-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.add-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Task" modal start here.\n/******************************************************************************/\n\n.add-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.add-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.add-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.add-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.add-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.add-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.add-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.add-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.add-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.add-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.add-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.add-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Edit Task" modal start here.\n/******************************************************************************/\n\n.edit-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.edit-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.edit-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.edit-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.edit-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.edit-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.edit-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.edit-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.edit-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.edit-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.edit-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.edit-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.edit-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.edit-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.edit-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.edit-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Delete Task" modal start here.\n/******************************************************************************/\n\n.delete-task.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.delete-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.delete-task.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.delete-task.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.delete-task.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.delete-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.delete-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.delete-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Edit Project" modal start here.\n/******************************************************************************/\n\n.edit-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.edit-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.edit-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.edit-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.edit-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.edit-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.edit-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Delete Project" modal start here.\n/******************************************************************************/\n\n.delete-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.delete-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.delete-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.delete-project.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.delete-project.modal .message p {\n    text-align: center;\n}\n\n.delete-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.delete-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.delete-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.delete-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Default Content" modal start here.\n/******************************************************************************/\n\n.default-content.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.default-content.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.default-content.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.default-content.modal .message {\n    text-align: center;\n\n    padding: 8px 16px;\n}\n\n.default-content.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.default-content.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.default-content.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.default-content.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Reset Program" modal start here.\n/******************************************************************************/\n\n.reset-program.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.reset-program.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.reset-program.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.reset-program.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.reset-program.modal .message p {\n    text-align: center;\n}\n\n.reset-program.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.reset-program.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.reset-program.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.reset-program.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the header start here.\n/******************************************************************************/\n\nheader {\n    padding: 16px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\nheader .logo {\n    width: 50px;\n}\n\n/******************************************************************************/\n/* Selectors for the sidebar start here.\n/******************************************************************************/\n\n.sidebar {\n    padding: 16px 16px 32px 16px;\n\n    background-color: var(--color-neutral-1);\n\n    overflow-y: auto;\n    \n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 16px;\n}\n\n/* Selectors for the sidebar sections start here. */\n\n.sidebar-sections img {\n    width: 1.5rem;\n}\n\n.sidebar-sections > li > button {\n    width: 100%;\n    \n    padding: 8px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.3s ease;\n}\n\n.sidebar-sections > li > button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.sidebar-sections > li > button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.sidebar-sections li:has(.projects) {\n    margin-bottom: 8px;\n}\n\n/* Selectors for the individual projects of the sidebar start here. */\n\n.subsections {\n    max-height: 0;\n\n    margin-top: -8px;\n\n    opacity: 0;\n\n    overflow: hidden;\n\n    transition: all 0.3s ease;\n}\n\n.subsections li > * {\n    width: 100%;\n\n    padding: 8px 8px 8px 40px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    transition: all 0.2s ease;\n}\n\n.subsections button:not([data-page-name="empty"]):hover {\n    background-color: var(--color-neutral-3);\n}\n\n.subsections button:not([data-page-name="empty"]):active {\n    background-color: var(--color-neutral-4);\n}\n\n.subsections button[data-page-name="empty"]:hover {\n    cursor: default;\n}\n\n.subsection {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.subsection .empty {\n    margin-right: auto;\n}\n\n.subsection img {\n    width: 0.6rem;\n}\n\n.subsections .alerts {\n    font-size: 0.8rem;\n\n    display: flex;\n    gap: 8px;\n}\n\n.subsections .alerts p {\n    padding: 1px 9px 0 9px;\n    \n    color: var(--color-text-1-inverted);\n\n    border-radius: 50%;\n}\n\n.subsections .alerts .overdue {\n    background-color: var(--color-brand-4);\n}\n\n.subsections .alerts .remaining {\n    background-color: var(--color-brand-1-a);\n}\n\n/* Selectors for the "Add project" button start here. */\n\n.add-project-btn {\n    width: 50%;\n\n    padding: 8px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-3);\n    border: none;\n    border-radius: 32px;\n\n    align-self: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project-btn:hover {\n    background-color: var(--color-brand-3-a);\n\n}\n.add-project-btn:active {\n    background-color: var(--color-brand-3-b);\n}\n\n.add-project-btn img {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Selectors for all pages start here.\n/******************************************************************************/\n\n.page {\n    padding: 16px;\n\n    overflow-y: auto;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n}\n\n.page h2 {\n    padding: 0 0 16px 0;\n    margin: 16px 32px;\n\n    border-bottom: 1px solid var(--color-text-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n}\n\n/* Selectors for the project filters start here. */\n\n.filters {\n    padding: 32px 16px 0 32px;\n    \n    grid-row: 2 / 3;\n\n    display: flex;\n    gap: 8px;\n}\n\n.filters button {\n    font-size: 0.8rem;\n\n    padding: 2px 10px;\n\n    background: none;\n    border: 1px solid var(--color-neutral-5);\n    border-radius: 32px;\n\n    transition: all 0.2s ease;\n}\n\n.filters button:hover {\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-neutral-5);\n}\n\n.filters .selected {\n    color: var(--color-text-1-inverted);\n    \n    background-color: var(--color-neutral-5);\n    border: 1px solid transparent;\n    border-radius: 32px;\n}\n\n/* Selectors for the grouped projects start here. */\n\n.page .projects {\n    padding: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .projects button {\n    background: none;\n    border: none;\n}\n\n.page .projects img[src$="svg"] {\n    width: 1.3rem;\n}\n\n/* Selectors for the individual projects starts here. */\n\n.page .project {\n    padding: 16px;\n    \n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto 1fr;\n}\n\n.page .project h3 {\n    padding-bottom: 16px;\n    \n    grid-column: 1 / 2;\n}\n\n/* Selectors for the project options start here. */\n\n.page .options {\n    padding-bottom: 16px;\n    \n    grid-column: 2 / 3;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .options > button {\n    border-radius: 8px;\n}\n\n.page .options .dropdown-wrapper {\n    position: relative;\n}\n\n.page .options .dropdown-menu {\n    width: 100%;\n    height: auto;\n\n    padding: 4px 0;\n\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0 2px 5px var(--color-neutral-5);\n\n    position: absolute;\n    top: 30px;\n    z-index: 1;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown-menu button {\n    width: 100%;\n\n    padding: 4px 8px;\n\n    display: flex;\n    justify-content: flex-start;\n}\n\n.page .options .dropdown-menu button:hover {\n    background-color: var(--color-neutral-1);\n\n}\n.page .options .dropdown-menu button:active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown-menu .selected {\n    background: var(--color-brand-1-b);\n}\n\n.page .options .dropdown {\n    padding: 2px 8px;\n    \n    background-color: var(--color-neutral-1);\n    border-radius: 4px;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown:active {\n    background-color: var(--color-neutral-3);\n}\n\n.page .options .dropdown .input {\n    display: flex;\n    align-items: center;\n}\n\n.page .options button.active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options button:not(.dropdown, .sort-by-filter) {\n    padding: 4px;\n    \n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):hover {\n    background-color: var(--color-neutral-1);\n    border-radius: 8px;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):active {\n    background-color: var(--color-neutral-2);\n}\n\n/* Selectors for the project tasks start here. */\n\n.page .tasks {\n    grid-column: 1 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .task {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.page .task .left {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .task .right {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n}\n\n.page .task .right .overdue {\n    font-size: 0.8rem;\n\n    padding: 2px 8px;\n\n    color: white;\n\n    background-color: var(--color-brand-4);\n    border-radius: 8px;\n}\n\n.page .task.checked .left > :not(button),\n.page .task.checked .right > :not(.expand-task) {\n    opacity: 0.5;\n}\n\n.page .task .right .expand-task {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .task .right .expand-task:hover {\n    background-color: var(--color-neutral-3);\n\n}\n.page .task .right .expand-task:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for a task\'s expanded details start here. */\n\n.task-details {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 16px;\n\n    animation: slide-up 0.3s ease;\n}\n\n.task-details.expanded {\n    animation: slide-down 0.3s ease;\n}\n\n.task-details .description-wrapper {\n    width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 8px;\n}\n\n.task-details .description-wrapper .task-description {\n    min-height: 100px;\n\n    text-align: left;\n\n    padding: 16px;\n\n    background-color: white;\n    border-radius: 4px;\n}\n\n.task-details .task-options-wrapper {\n    min-width: 9%;\n    height: 100%;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 8px;\n    flex-shrink: 0;\n}\n\n.task-details .task-options-wrapper button {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n}\n\n.task-details .task-options-wrapper button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.task-details .task-options-wrapper button.active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for empty projects/tasks start here. */\n\n.projects .empty {\n    height: 61px;\n\n    margin: 32px 16px 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.projects .empty.nested {\n    margin: 0;\n}\n\n/******************************************************************************/\n/* Selectors for the "Home" page start here.\n/******************************************************************************/\n\n.home {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n.home h3 {\n    padding: 16px;\n}\n\n/* Selectors for the overview section start here. */\n\n.overview {\n    padding: 16px;\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n}\n\n/* Selectors for the date section start here. */\n\n.date-wrapper {\n    padding: 16px;\n    \n    display: flex;\n    align-items: flex-end;\n    gap: 16px;\n}\n\n.date-wrapper .num-date {\n    width: 75px;\n    height: 75px;\n\n    font-size: 2rem;\n\n    background-color: var(--color-brand-1-b);\n    border-radius: 2px;\n    border-top-left-radius: 50%;\n    border-bottom-right-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.date-wrapper .full-date {\n    font-size: 1.2rem;\n}\n\n/* Selectors for the tasks section start here. */\n\n.overview-tasks {\n    padding: 16px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n}\n\n.overview-tasks > * {\n    width: 110px;\n    height: 110px;\n\n    text-align: center;\n\n    border-radius: 50%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.overview-tasks h4 {\n    font-size: 1.2rem;\n}\n\n.overview-tasks p {\n    font-size: 0.8rem;\n}\n\n.overview-tasks .completed {\n    border: 8px solid var(--color-brand-2);\n}\n\n.overview-tasks .remaining {\n    border: 8px solid var(--color-brand-3);\n}\n\n.overview-tasks .overdue {\n    border: 8px solid var(--color-brand-4);\n}\n\n/* Selectors for the overview image start here. */\n\n.overview-img-wrapper {\n    height: 100%;\n\n    margin: 16px 0 0 16px;\n\n    overflow: hidden;\n}\n\n.overview-img-wrapper img {\n    width: 100%;\n    height: 100%;\n    \n    object-fit: cover;\n    object-position: 0% 95%;\n\n    border-radius: 8px;\n}\n\n/* Selectors for the notes section start here. */\n\n.notes {\n    padding: 16px;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.notes textarea {\n    height: 100%;\n\n    resize: none;\n\n    margin: 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 8px;\n}\n\n.notes textarea:focus {\n    outline: 2px solid var(--color-text-1);\n}\n\n/******************************************************************************/\n/* Selectors for the "Upcoming" page start here.\n/******************************************************************************/\n\n/* Selectors for the grouped projects start here. */\n\n.upcoming.page .projects {\n    grid-row: 3 / 4;\n}\n\n/******************************************************************************/\n/* Selectors for the "Settings" page start here.\n/******************************************************************************/\n\n.settings.page img {\n    width: 1.3rem;\n}\n\n.settings.page .active {\n    background-color: var(--color-neutral-3) !important;\n}\n\n.settings.page .content-wrapper {\n    padding-top: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: auto;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n.settings.page .general-wrapper {\n    width: 100%;\n\n    padding: 16px 32px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 8px;\n}\n\n.settings.page .general-wrapper h3 {\n    padding-bottom: 8px;\n}\n\n.settings.page .settings-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n.settings.page .settings-wrapper button {\n    width: 100%;\n    height: 61px;\n\n    padding: 16px 18px;\n    \n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.2s ease;\n}\n\n.settings.page .settings-wrapper button:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.settings.page .settings-wrapper button:active {\n    background-color: var(--color-neutral-3);\n}\n\n/******************************************************************************/\n/* Selectors for the footer start here.\n/******************************************************************************/\n\nfooter {\n    padding: 16px;\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    \n    display: flex;\n    justify-content: center;\n}\n\nfooter a {\n    color: var(--color-text-1-inverted);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\nfooter img[src*="github"] {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Animation keyframes start here.\n/******************************************************************************/\n\n@keyframes slide-down {\n    from {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n}\n@keyframes slide-up {\n    from {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n}',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"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",sourcesContent:['/******************************************************************************/\n/*\n/*   Sections:\n/*\n/*   1.\n/*\n/******************************************************************************/\n\n/******************************************************************************/\n/* Selectors for general elements start here.\n/******************************************************************************/\n\n:root {\n    --color-text-1: #4d4d4d;\n    --color-text-1-inverted: #ffffff;\n\n    --color-brand-1: #847fca;\n    --color-brand-1-a: #9490c9;\n    --color-brand-1-b: #E2E4F6;\n    --color-brand-2: #D4E09B;\n    --color-brand-3: #F4D179;\n    --color-brand-3-a: #e7c46b;\n    --color-brand-3-b: #dbb966;\n    --color-brand-4: #e67a6b;\n\n    --color-modal-1: #4d4d4d50;\n    \n    --color-neutral-1: #f1f1f1;\n    --color-neutral-2: #eaeaea;\n    --color-neutral-3: #e3e3e3;\n    --color-neutral-4: #dbdbdb;\n    --color-neutral-5: #c6c6c6;\n}\n\nbody {\n    color: var(--color-text-1);\n    \n    display: grid;\n    grid-template-columns: 300px 1fr;\n    grid-template-rows: 85px 1fr auto;\n}\n\na {\n    text-decoration: none;\n\n    color: var(--color-text-1);\n}\n\nli {\n    list-style: none;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n/* Selectors for collapsible sections start here. */\n\n.collapsible {\n    display: flex;\n    justify-content: space-between;\n}\n\n.collapsible .collapsible.icon {\n    margin-left: auto;\n\n    transition: all 0.5s ease;\n}\n\n.collapsible.expanded .collapsible.icon {\n    transform: rotate(180deg);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Project" modal start here.\n/******************************************************************************/\n\n.add-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.add-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.add-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.add-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.add-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Task" modal start here.\n/******************************************************************************/\n\n.add-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.add-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.add-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.add-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.add-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.add-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.add-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.add-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.add-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.add-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.add-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.add-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Edit Task" modal start here.\n/******************************************************************************/\n\n.edit-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.edit-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.edit-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.edit-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.edit-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.edit-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.edit-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.edit-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.edit-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.edit-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.edit-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.edit-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.edit-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.edit-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.edit-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.edit-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Delete Task" modal start here.\n/******************************************************************************/\n\n.delete-task.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.delete-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.delete-task.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.delete-task.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.delete-task.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.delete-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.delete-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.delete-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Edit Project" modal start here.\n/******************************************************************************/\n\n.edit-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.edit-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.edit-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.edit-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.edit-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.edit-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.edit-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Delete Project" modal start here.\n/******************************************************************************/\n\n.delete-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.delete-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.delete-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.delete-project.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.delete-project.modal .message p {\n    text-align: center;\n}\n\n.delete-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.delete-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.delete-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.delete-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Default Content" modal start here.\n/******************************************************************************/\n\n.default-content.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.default-content.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.default-content.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.default-content.modal .message {\n    text-align: center;\n\n    padding: 8px 16px;\n}\n\n.default-content.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.default-content.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.default-content.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.default-content.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Reset Program" modal start here.\n/******************************************************************************/\n\n.reset-program.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.reset-program.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.reset-program.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.reset-program.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.reset-program.modal .message p {\n    text-align: center;\n}\n\n.reset-program.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.reset-program.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.reset-program.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.reset-program.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the header start here.\n/******************************************************************************/\n\nheader {\n    padding: 16px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\nheader .logo {\n    width: 50px;\n}\n\n/******************************************************************************/\n/* Selectors for the sidebar start here.\n/******************************************************************************/\n\n.sidebar {\n    padding: 16px 16px 32px 16px;\n\n    background-color: var(--color-neutral-1);\n\n    overflow-y: auto;\n    \n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 16px;\n}\n\n/* Selectors for the sidebar sections start here. */\n\n.sidebar-sections img {\n    width: 1.5rem;\n}\n\n.sidebar-sections > li > button {\n    width: 100%;\n    \n    padding: 8px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.3s ease;\n}\n\n.sidebar-sections > li > button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.sidebar-sections > li > button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.sidebar-sections li:has(.projects) {\n    margin-bottom: 8px;\n}\n\n/* Selectors for the individual projects of the sidebar start here. */\n\n.subsections {\n    max-height: 0;\n\n    margin-top: -8px;\n\n    opacity: 0;\n\n    overflow: hidden;\n\n    transition: all 0.3s ease;\n}\n\n.subsections li > * {\n    width: 100%;\n\n    padding: 8px 8px 8px 40px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    transition: all 0.2s ease;\n}\n\n.subsections button:not([data-page-name="empty"]):hover {\n    background-color: var(--color-neutral-3);\n}\n\n.subsections button:not([data-page-name="empty"]):active {\n    background-color: var(--color-neutral-4);\n}\n\n.subsections button[data-page-name="empty"]:hover {\n    cursor: default;\n}\n\n.subsection {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.subsection .empty {\n    margin-right: auto;\n}\n\n.subsection img {\n    width: 0.6rem;\n}\n\n.subsections .alerts {\n    font-size: 0.8rem;\n\n    display: flex;\n    gap: 8px;\n}\n\n.subsections .alerts p {\n    padding: 1px 9px 0 9px;\n    \n    color: var(--color-text-1-inverted);\n\n    border-radius: 50%;\n}\n\n.subsections .alerts .overdue {\n    background-color: var(--color-brand-4);\n}\n\n.subsections .alerts .remaining {\n    background-color: var(--color-brand-1-a);\n}\n\n/* Selectors for the "Add project" button start here. */\n\n.add-project-btn {\n    width: 50%;\n\n    padding: 8px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-3);\n    border: none;\n    border-radius: 32px;\n\n    align-self: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project-btn:hover {\n    background-color: var(--color-brand-3-a);\n\n}\n.add-project-btn:active {\n    background-color: var(--color-brand-3-b);\n}\n\n.add-project-btn img {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Selectors for all pages start here.\n/******************************************************************************/\n\n.page {\n    padding: 16px;\n\n    overflow-y: auto;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n}\n\n.page h2 {\n    padding: 0 0 16px 0;\n    margin: 16px 32px;\n\n    border-bottom: 1px solid var(--color-text-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n}\n\n/* Selectors for the project filters start here. */\n\n.filters {\n    padding: 32px 16px 0 32px;\n    \n    grid-row: 2 / 3;\n\n    display: flex;\n    gap: 8px;\n}\n\n.filters button {\n    font-size: 0.8rem;\n\n    padding: 2px 10px;\n\n    background: none;\n    border: 1px solid var(--color-neutral-5);\n    border-radius: 32px;\n\n    transition: all 0.2s ease;\n}\n\n.filters button:hover {\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-neutral-5);\n}\n\n.filters .selected {\n    color: var(--color-text-1-inverted);\n    \n    background-color: var(--color-neutral-5);\n    border: 1px solid transparent;\n    border-radius: 32px;\n}\n\n/* Selectors for the grouped projects start here. */\n\n.page .projects {\n    padding: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .projects button {\n    background: none;\n    border: none;\n}\n\n.page .projects img[src$="svg"] {\n    width: 1.3rem;\n}\n\n/* Selectors for the individual projects starts here. */\n\n.page .project {\n    padding: 16px;\n    \n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto 1fr;\n}\n\n.page .project h3 {\n    padding-bottom: 16px;\n    \n    grid-column: 1 / 2;\n}\n\n/* Selectors for the project options start here. */\n\n.page .options {\n    padding-bottom: 16px;\n    \n    grid-column: 2 / 3;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .options > button {\n    border-radius: 8px;\n}\n\n.page .options .dropdown-wrapper {\n    position: relative;\n}\n\n.page .options .dropdown-menu {\n    width: 100%;\n    height: auto;\n\n    padding: 4px 0;\n\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0 2px 5px var(--color-neutral-5);\n\n    position: absolute;\n    top: 30px;\n    z-index: 1;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown-menu button {\n    width: 100%;\n\n    padding: 4px 8px;\n\n    display: flex;\n    justify-content: flex-start;\n}\n\n.page .options .dropdown-menu button:hover {\n    background-color: var(--color-neutral-1);\n\n}\n.page .options .dropdown-menu button:active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown-menu .selected {\n    background: var(--color-brand-1-b);\n}\n\n.page .options .dropdown {\n    padding: 2px 8px;\n    \n    background-color: var(--color-neutral-1);\n    border-radius: 4px;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown:active {\n    background-color: var(--color-neutral-3);\n}\n\n.page .options .dropdown .input {\n    display: flex;\n    align-items: center;\n}\n\n.page .options button.active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options button:not(.dropdown, .sort-by-filter) {\n    padding: 4px;\n    \n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):hover {\n    background-color: var(--color-neutral-1);\n    border-radius: 8px;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):active {\n    background-color: var(--color-neutral-2);\n}\n\n/* Selectors for the project tasks start here. */\n\n.page .tasks {\n    grid-column: 1 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .task {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.page .task .left {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .task .right {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n}\n\n.page .task .right .overdue {\n    font-size: 0.8rem;\n\n    padding: 2px 8px;\n\n    color: white;\n\n    background-color: var(--color-brand-4);\n    border-radius: 8px;\n}\n\n.page .task.checked .left > :not(button),\n.page .task.checked .right > :not(.expand-task) {\n    opacity: 0.5;\n}\n\n.page .task .right .expand-task {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .task .right .expand-task:hover {\n    background-color: var(--color-neutral-3);\n\n}\n.page .task .right .expand-task:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for a task\'s expanded details start here. */\n\n.task-details {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 16px;\n\n    animation: slide-up 0.3s ease;\n}\n\n.task-details.expanded {\n    animation: slide-down 0.3s ease;\n}\n\n.task-details .description-wrapper {\n    width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 8px;\n}\n\n.task-details .description-wrapper .task-description {\n    min-height: 100px;\n\n    text-align: left;\n\n    padding: 16px;\n\n    background-color: white;\n    border-radius: 4px;\n}\n\n.task-details .task-options-wrapper {\n    min-width: 9%;\n    height: 100%;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 8px;\n    flex-shrink: 0;\n}\n\n.task-details .task-options-wrapper button {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n}\n\n.task-details .task-options-wrapper button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.task-details .task-options-wrapper button.active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for empty projects/tasks start here. */\n\n.projects .empty {\n    height: 61px;\n\n    margin: 32px 16px 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.projects .empty.nested {\n    margin: 0;\n}\n\n/******************************************************************************/\n/* Selectors for the "Home" page start here.\n/******************************************************************************/\n\n.home {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n.home h3 {\n    padding: 16px;\n}\n\n/* Selectors for the overview section start here. */\n\n.overview {\n    padding: 16px;\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n}\n\n/* Selectors for the date section start here. */\n\n.date-wrapper {\n    padding: 16px;\n    \n    display: flex;\n    align-items: flex-end;\n    gap: 16px;\n}\n\n.date-wrapper .num-date {\n    width: 75px;\n    height: 75px;\n\n    font-size: 2rem;\n\n    background-color: var(--color-brand-1-b);\n    border-radius: 2px;\n    border-top-left-radius: 50%;\n    border-bottom-right-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.date-wrapper .full-date {\n    font-size: 1.2rem;\n}\n\n/* Selectors for the tasks section start here. */\n\n.overview-tasks {\n    padding: 16px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n}\n\n.overview-tasks > * {\n    width: 110px;\n    height: 110px;\n\n    text-align: center;\n\n    border-radius: 50%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.overview-tasks h4 {\n    font-size: 1.2rem;\n}\n\n.overview-tasks p {\n    font-size: 0.8rem;\n}\n\n.overview-tasks .completed {\n    border: 8px solid var(--color-brand-2);\n}\n\n.overview-tasks .remaining {\n    border: 8px solid var(--color-brand-3);\n}\n\n.overview-tasks .overdue {\n    border: 8px solid var(--color-brand-4);\n}\n\n/* Selectors for the overview image start here. */\n\n.overview-img-wrapper {\n    height: 100%;\n\n    margin: 16px 0 0 16px;\n\n    overflow: hidden;\n}\n\n.overview-img-wrapper img {\n    width: 100%;\n    height: 100%;\n    \n    object-fit: cover;\n    object-position: 0% 95%;\n\n    border-radius: 8px;\n}\n\n/* Selectors for the notes section start here. */\n\n.notes {\n    padding: 16px;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.notes textarea {\n    height: 100%;\n\n    resize: none;\n\n    margin: 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 8px;\n}\n\n.notes textarea:focus {\n    outline: 2px solid var(--color-text-1);\n}\n\n/******************************************************************************/\n/* Selectors for the "Upcoming" page start here.\n/******************************************************************************/\n\n/* Selectors for the grouped projects start here. */\n\n.upcoming.page .projects {\n    grid-row: 3 / 4;\n}\n\n/******************************************************************************/\n/* Selectors for the "Settings" page start here.\n/******************************************************************************/\n\n.settings.page img {\n    width: 1.3rem;\n}\n\n.settings.page .active {\n    background-color: var(--color-neutral-3) !important;\n}\n\n.settings.page .content-wrapper {\n    padding-top: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: auto;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n.settings.page .general-wrapper {\n    width: 100%;\n\n    padding: 16px 32px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 8px;\n}\n\n.settings.page .general-wrapper h3 {\n    padding-bottom: 8px;\n}\n\n.settings.page .settings-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n.settings.page .settings-wrapper button {\n    width: 100%;\n    height: 61px;\n\n    padding: 16px 18px;\n    \n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.2s ease;\n}\n\n.settings.page .settings-wrapper button:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.settings.page .settings-wrapper button:active {\n    background-color: var(--color-neutral-3);\n}\n\n/******************************************************************************/\n/* Selectors for the footer start here.\n/******************************************************************************/\n\nfooter {\n    padding: 16px;\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    \n    display: flex;\n    justify-content: center;\n}\n\nfooter a {\n    color: var(--color-text-1-inverted);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\nfooter img[src*="github"] {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Animation keyframes start here.\n/******************************************************************************/\n\n@keyframes slide-down {\n    from {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n}\n@keyframes slide-up {\n    from {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n}'],sourceRoot:""}]);const i=s},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);o&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},667:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),s=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(s).concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var a={},s=[],i=0;i<n.length;i++){var c=n[i],l=o.base?c[0]+o.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var u=e(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=r(p,o);o.byIndex=i,t.splice(i,0,{identifier:A,updater:m,references:1})}s.push(A)}return s}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=e(a[s]);t[i].references--}for(var c=o(n,r),l=0;l<a.length;l++){var d=e(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},937:(n,t,e)=>{n.exports=e.p+"fc2b5060f7accec5cf74.ttf"},510:(n,t,e)=>{n.exports=e.p+"df87f53caf449a3b7572.ttf"}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return n[o](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!n;)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const n=(n,t)=>{for(const e of t)n.appendChild(e)},t=n=>{const t=n.split(" ");for(let n=0;n<t.length;n++)t[n]=t[n].charAt(0).toUpperCase()+t[n].slice(1);return t.join(" ")},o=(n,t)=>{for(const[e,o]of Object.entries(t)){const t=e;n.setAttribute(t,o)}},r=n=>{const t=Array.from(n);for(let n=0;n<t.length-1&&t[n+1];n++)" "===t[n]&&(t[n+1]=t[n+1].toUpperCase());return t.filter((n=>" "!==n)).join("")},a=n=>n.replaceAll(" ","-"),s=n=>n.replaceAll("-"," "),i=n=>{const t=document.createElement("article");return o(t,n),t},c=n=>{const t=document.createElement("button");return o(t,n),t},l=n=>{const t=document.createElement("div");return o(t,n),t},d=(n,t)=>{const e=document.createElement(`h${n}`);return e.textContent=t,e},A=n=>{const t=document.createElement("img");return o(t,n),t},u=n=>{const t=document.createElement("p");return t.textContent=n,t};function p(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function m(n){p(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function g(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function f(n){p(1,arguments);var t=m(n),e=t.getUTCDay(),o=(e<1?7:0)+e-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function C(n){p(1,arguments);var t=m(n),e=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(e+1,0,4),o.setUTCHours(0,0,0,0);var r=f(o),a=new Date(0);a.setUTCFullYear(e,0,4),a.setUTCHours(0,0,0,0);var s=f(a);return t.getTime()>=r.getTime()?e+1:t.getTime()>=s.getTime()?e:e-1}var b={};function h(){return b}function x(n,t){var e,o,r,a,s,i,c,l;p(1,arguments);var d=h(),A=g(null!==(e=null!==(o=null!==(r=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(s=t.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==r?r:d.weekStartsOn)&&void 0!==o?o:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==e?e:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=m(n),f=u.getUTCDay(),C=(f<A?7:0)+f-A;return u.setUTCDate(u.getUTCDate()-C),u.setUTCHours(0,0,0,0),u}function y(n,t){var e,o,r,a,s,i,c,l;p(1,arguments);var d=m(n),A=d.getUTCFullYear(),u=h(),f=g(null!==(e=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(s=t.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==o?o:null===(c=u.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var C=new Date(0);C.setUTCFullYear(A+1,0,f),C.setUTCHours(0,0,0,0);var b=x(C,t),y=new Date(0);y.setUTCFullYear(A,0,f),y.setUTCHours(0,0,0,0);var B=x(y,t);return d.getTime()>=b.getTime()?A+1:d.getTime()>=B.getTime()?A:A-1}function B(n,t){for(var e=n<0?"-":"",o=Math.abs(n).toString();o.length<t;)o="0"+o;return e+o}const v=function(n,t){var e=n.getUTCFullYear(),o=e>0?e:1-e;return B("yy"===t?o%100:o,t.length)},I=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):B(e+1,2)},k=function(n,t){return B(n.getUTCDate(),t.length)},w=function(n,t){return B(n.getUTCHours()%12||12,t.length)},E=function(n,t){return B(n.getUTCHours(),t.length)},S=function(n,t){return B(n.getUTCMinutes(),t.length)},j=function(n,t){return B(n.getUTCSeconds(),t.length)},D=function(n,t){var e=t.length,o=n.getUTCMilliseconds();return B(Math.floor(o*Math.pow(10,e-3)),t.length)};var q={G:function(n,t,e){var o=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(o,{width:"abbreviated"});case"GGGGG":return e.era(o,{width:"narrow"});default:return e.era(o,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var o=n.getUTCFullYear(),r=o>0?o:1-o;return e.ordinalNumber(r,{unit:"year"})}return v(n,t)},Y:function(n,t,e,o){var r=y(n,o),a=r>0?r:1-r;return"YY"===t?B(a%100,2):"Yo"===t?e.ordinalNumber(a,{unit:"year"}):B(a,t.length)},R:function(n,t){return B(C(n),t.length)},u:function(n,t){return B(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return B(o,2);case"Qo":return e.ordinalNumber(o,{unit:"quarter"});case"QQQ":return e.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(o,{width:"narrow",context:"formatting"});default:return e.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,t,e){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return B(o,2);case"qo":return e.ordinalNumber(o,{unit:"quarter"});case"qqq":return e.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(o,{width:"narrow",context:"standalone"});default:return e.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,t,e){var o=n.getUTCMonth();switch(t){case"M":case"MM":return I(n,t);case"Mo":return e.ordinalNumber(o+1,{unit:"month"});case"MMM":return e.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(o,{width:"narrow",context:"formatting"});default:return e.month(o,{width:"wide",context:"formatting"})}},L:function(n,t,e){var o=n.getUTCMonth();switch(t){case"L":return String(o+1);case"LL":return B(o+1,2);case"Lo":return e.ordinalNumber(o+1,{unit:"month"});case"LLL":return e.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(o,{width:"narrow",context:"standalone"});default:return e.month(o,{width:"wide",context:"standalone"})}},w:function(n,t,e,o){var r=function(n,t){p(1,arguments);var e=m(n),o=x(e,t).getTime()-function(n,t){var e,o,r,a,s,i,c,l;p(1,arguments);var d=h(),A=g(null!==(e=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(s=t.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.firstWeekContainsDate)&&void 0!==r?r:d.firstWeekContainsDate)&&void 0!==o?o:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1),u=y(n,t),m=new Date(0);return m.setUTCFullYear(u,0,A),m.setUTCHours(0,0,0,0),x(m,t)}(e,t).getTime();return Math.round(o/6048e5)+1}(n,o);return"wo"===t?e.ordinalNumber(r,{unit:"week"}):B(r,t.length)},I:function(n,t,e){var o=function(n){p(1,arguments);var t=m(n),e=f(t).getTime()-function(n){p(1,arguments);var t=C(n),e=new Date(0);return e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0),f(e)}(t).getTime();return Math.round(e/6048e5)+1}(n);return"Io"===t?e.ordinalNumber(o,{unit:"week"}):B(o,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):k(n,t)},D:function(n,t,e){var o=function(n){p(1,arguments);var t=m(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=e-t.getTime();return Math.floor(o/864e5)+1}(n);return"Do"===t?e.ordinalNumber(o,{unit:"dayOfYear"}):B(o,t.length)},E:function(n,t,e){var o=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},e:function(n,t,e,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return B(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},c:function(n,t,e,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return B(a,t.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(r,{width:"narrow",context:"standalone"});case"cccccc":return e.day(r,{width:"short",context:"standalone"});default:return e.day(r,{width:"wide",context:"standalone"})}},i:function(n,t,e){var o=n.getUTCDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return B(r,t.length);case"io":return e.ordinalNumber(r,{unit:"day"});case"iii":return e.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},a:function(n,t,e){var o=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(o,{width:"narrow",context:"formatting"});default:return e.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,t,e){var o,r=n.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(o,{width:"narrow",context:"formatting"});default:return e.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,t,e){var o,r=n.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(o,{width:"narrow",context:"formatting"});default:return e.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var o=n.getUTCHours()%12;return 0===o&&(o=12),e.ordinalNumber(o,{unit:"hour"})}return w(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):E(n,t)},K:function(n,t,e){var o=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(o,{unit:"hour"}):B(o,t.length)},k:function(n,t,e){var o=n.getUTCHours();return 0===o&&(o=24),"ko"===t?e.ordinalNumber(o,{unit:"hour"}):B(o,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):S(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):j(n,t)},S:function(n,t){return D(n,t)},X:function(n,t,e,o){var r=(o._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return T(r);case"XXXX":case"XX":return Y(r);default:return Y(r,":")}},x:function(n,t,e,o){var r=(o._originalDate||n).getTimezoneOffset();switch(t){case"x":return T(r);case"xxxx":case"xx":return Y(r);default:return Y(r,":")}},O:function(n,t,e,o){var r=(o._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+L(r,":");default:return"GMT"+Y(r,":")}},z:function(n,t,e,o){var r=(o._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+L(r,":");default:return"GMT"+Y(r,":")}},t:function(n,t,e,o){var r=o._originalDate||n;return B(Math.floor(r.getTime()/1e3),t.length)},T:function(n,t,e,o){return B((o._originalDate||n).getTime(),t.length)}};function L(n,t){var e=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),a=o%60;if(0===a)return e+String(r);var s=t||"";return e+String(r)+s+B(a,2)}function T(n,t){return n%60==0?(n>0?"-":"+")+B(Math.abs(n)/60,2):Y(n,t)}function Y(n,t){var e=t||"",o=n>0?"-":"+",r=Math.abs(n);return o+B(Math.floor(r/60),2)+e+B(r%60,2)}const M=q;var P=function(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},W=function(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const O={p:W,P:function(n,t){var e,o=n.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return P(n,t);switch(r){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",P(r,t)).replace("{{time}}",W(a,t))}};var N=["D","DD"],U=["YY","YYYY"];function $(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Z={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function z(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth;return n.formats[e]||n.formats[n.defaultWidth]}}const Q={date:z({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:z({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:z({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var X={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function H(n){return function(t,e){var o;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=null!=e&&e.width?String(e.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var s=n.defaultWidth,i=null!=e&&e.width?String(e.width):n.defaultWidth;o=n.values[i]||n.values[s]}return o[n.argumentCallback?n.argumentCallback(t):t]}}const F={ordinalNumber:function(n,t){var e=Number(n),o=e%100;if(o>20||o<10)switch(o%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:H({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:H({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:H({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:H({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:H({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function R(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=e.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=t.match(r);if(!a)return null;var s,i=a[0],c=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(c)?function(n,t){for(var e=0;e<n.length;e++)if(n[e].test(i))return e}(c):function(n,t){for(var e in n)if(n.hasOwnProperty(e)&&n[e].test(i))return e}(c);return s=n.valueCallback?n.valueCallback(l):l,{value:s=e.valueCallback?e.valueCallback(s):s,rest:t.slice(i.length)}}}var G,J={ordinalNumber:(G={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(G.matchPattern);if(!e)return null;var o=e[0],r=n.match(G.parsePattern);if(!r)return null;var a=G.valueCallback?G.valueCallback(r[0]):r[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:n.slice(o.length)}}),era:R({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:R({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:R({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:R({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:R({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const _={code:"en-US",formatDistance:function(n,t,e){var o,r=Z[n];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+o:o+" ago":o},formatLong:Q,formatRelative:function(n,t,e,o){return X[n]},localize:F,match:J,options:{weekStartsOn:0,firstWeekContainsDate:1}};var V=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,nn=/^'([^]*?)'?$/,tn=/''/g,en=/[a-zA-Z]/;function on(n,t,e){var o,r,a,s,i,c,l,d,A,u,f,C,b,x,y,B,v,I;p(2,arguments);var k=String(t),w=h(),E=null!==(o=null!==(r=null==e?void 0:e.locale)&&void 0!==r?r:w.locale)&&void 0!==o?o:_,S=g(null!==(a=null!==(s=null!==(i=null!==(c=null==e?void 0:e.firstWeekContainsDate)&&void 0!==c?c:null==e||null===(l=e.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==i?i:w.firstWeekContainsDate)&&void 0!==s?s:null===(A=w.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(S>=1&&S<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var j=g(null!==(f=null!==(C=null!==(b=null!==(x=null==e?void 0:e.weekStartsOn)&&void 0!==x?x:null==e||null===(y=e.locale)||void 0===y||null===(B=y.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==b?b:w.weekStartsOn)&&void 0!==C?C:null===(v=w.locale)||void 0===v||null===(I=v.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==f?f:0);if(!(j>=0&&j<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var D=m(n);if(!function(n){if(p(1,arguments),!function(n){return p(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var t=m(n);return!isNaN(Number(t))}(D))throw new RangeError("Invalid time value");var q=function(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}(D),L=function(n,t){return p(2,arguments),function(n,t){p(2,arguments);var e=m(n).getTime(),o=g(t);return new Date(e+o)}(n,-g(t))}(D,q),T={firstWeekContainsDate:S,weekStartsOn:j,locale:E,_originalDate:D};return k.match(K).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,O[t])(n,E.formatLong):n})).join("").match(V).map((function(o){if("''"===o)return"'";var r,a,s=o[0];if("'"===s)return(a=(r=o).match(nn))?a[1].replace(tn,"'"):r;var i,c=M[s];if(c)return null!=e&&e.useAdditionalWeekYearTokens||(i=o,-1===U.indexOf(i))||$(o,t,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!function(n){return-1!==N.indexOf(n)}(o)||$(o,t,String(n)),c(L,o,E.localize,T);if(s.match(en))throw new RangeError("Format string contains an unescaped latin alphabet character `"+s+"`");return o})).join("")}function rn(n,t){p(2,arguments);var e=m(n),o=g(t);return isNaN(o)?new Date(NaN):o?(e.setDate(e.getDate()+o),e):e}function an(n,t){p(2,arguments);var e=m(n),o=g(t);if(isNaN(o))return new Date(NaN);if(!o)return e;var r=e.getDate(),a=new Date(e.getTime());return a.setMonth(e.getMonth()+o+1,0),r>=a.getDate()?a:(e.setFullYear(a.getFullYear(),a.getMonth(),r),e)}function sn(n,t){if(p(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var e=t.years?g(t.years):0,o=t.months?g(t.months):0,r=t.weeks?g(t.weeks):0,a=t.days?g(t.days):0,s=t.hours?g(t.hours):0,i=t.minutes?g(t.minutes):0,c=t.seconds?g(t.seconds):0,l=m(n),d=o||e?an(l,o+12*e):l,A=a||r?rn(d,a+7*r):d,u=1e3*(c+60*(i+60*s));return new Date(A.getTime()+u)}function cn(n){return p(1,arguments),m(n).getDay()}function ln(n,t){p(2,arguments);var e=t-cn(n);return e<=0&&(e+=7),rn(n,e)}function dn(n){return p(1,arguments),ln(n,0)}function An(n){return p(1,arguments),ln(n,1)}function un(n){return p(1,arguments),ln(n,2)}function pn(n){return p(1,arguments),ln(n,3)}function mn(n){return p(1,arguments),ln(n,4)}function gn(n){return p(1,arguments),ln(n,5)}function fn(n){return p(1,arguments),ln(n,6)}function Cn(n,t){return p(2,arguments),rn(n,-g(t))}function bn(n,t){p(2,arguments);var e=cn(n)-t;return e<=0&&(e+=7),Cn(n,e)}function hn(n){return p(1,arguments),bn(n,0)}function xn(n){return p(1,arguments),bn(n,1)}function yn(n){return p(1,arguments),bn(n,2)}function Bn(n){return p(1,arguments),bn(n,3)}function vn(n){return p(1,arguments),bn(n,4)}function In(n){return p(1,arguments),bn(n,5)}function kn(n){return p(1,arguments),bn(n,6)}function wn(n,t){var e,o,r,a,s,i,c,l;p(1,arguments);var d=h(),A=g(null!==(e=null!==(o=null!==(r=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(s=t.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==r?r:d.weekStartsOn)&&void 0!==o?o:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==e?e:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=m(n),f=u.getDay(),C=(f<A?7:0)+f-A;return u.setDate(u.getDate()-C),u.setHours(0,0,0,0),u}const En=new Date,Sn=n=>["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"].findIndex((t=>t===n)),jn=()=>on(En,"d"),Dn=()=>on(En,"LLL"),qn=()=>on(En,"yyyy"),Ln=()=>on(En,"LLL d, yyyy"),Tn=n=>on(sn(En,n),"LLL d, yyyy"),Yn=(n,t)=>{const e=sn(En,{weeks:t}),o={sunday:on(dn(e),"LLL d, yyyy"),monday:on(An(e),"LLL d, yyyy"),tuesday:on(un(e),"LLL d, yyyy"),wednesday:on(pn(e),"LLL d, yyyy"),thursday:on(mn(e),"LLL d, yyyy"),friday:on(gn(e),"LLL d, yyyy"),saturday:on(fn(e),"LLL d, yyyy")};for(const[t,e]of Object.entries(o))if(t===n)return e},Mn=(n,t)=>{const e=function(n,t){if(p(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var e=t.years?g(t.years):0,o=t.months?g(t.months):0,r=t.weeks?g(t.weeks):0,a=t.days?g(t.days):0,s=t.hours?g(t.hours):0,i=t.minutes?g(t.minutes):0,c=t.seconds?g(t.seconds):0,l=Cn(function(n,t){return p(2,arguments),an(n,-g(t))}(n,o+12*e),a+7*r),d=1e3*(c+60*(i+60*s));return new Date(l.getTime()-d)}(En,{weeks:t}),o={sunday:on(hn(e),"LLL d, yyyy"),monday:on(xn(e),"LLL d, yyyy"),tuesday:on(yn(e),"LLL d, yyyy"),wednesday:on(Bn(e),"LLL d, yyyy"),thursday:on(vn(e),"LLL d, yyyy"),friday:on(In(e),"LLL d, yyyy"),saturday:on(kn(e),"LLL d, yyyy")};for(const[t,e]of Object.entries(o))if(t===n)return e},Pn=n=>["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][n-1],Wn=n=>{const t=Array.from(n),e=t.findIndex((n=>","===n));t.splice(e,1),n=t.join("").split(" ");const o=Sn(n[0]),r=n[1],a=n[2];return new Date(a,o,r)},On=n=>{const t=n?Wn(n):new Date,e=t.getMonth()+1<10?`0${t.getMonth()+1}`:t.getMonth()+1,o=t.getDate()<10?`0${t.getDate()}`:t.getDate();return`${t.getFullYear()}-${e}-${o}`},Nn=n=>{const t=n.split("-"),e="0"===t[1].charAt(0)?t[1].slice(1):t[1],o="0"===t[2].charAt(0)?t[2].slice(1):t[2],r=t[0];return`${Pn(e)} ${o}, ${r}`},Un=n=>{n=Wn(n);const t=qn(),e=Sn(Dn()),o=jn();return function(n,t){p(2,arguments);var e=m(n),o=m(t);return e.getTime()<o.getTime()}(n,new Date(t,e,o))},$n=[],Zn=n=>$n.push(n),zn=n=>{for(const t of $n)if(t.getName().toLowerCase()===n)return t},Qn=n=>{let t=0;for(const e of $n){const o=e.getTasks();if(0===o.length)return t;if(n||(t+=o.length),o[0].getProject()===n)return t+o.length}return t},Xn=n=>{let t=0;for(const e of $n){const o=e.getTasks();if(0===o.length)return t;if(n||(t+=o.filter((n=>n.getChecked())).length),o[0].getProject()===n)return t+o.filter((n=>n.getChecked())).length}return t},Hn={completed:Xn,overdue:n=>{let t=0;for(const e of $n){const o=e.getTasks();if(0===o.length)return t;if(n||(t+=o.filter((n=>n.getOverdue()&&!n.getChecked())).length),o[0].getProject()===n)return t+o.filter((n=>n.getOverdue()&&!n.getChecked())).length}return t},remaining:n=>n?Qn(n)-Xn(n):Qn()-Xn()},Fn=(n,t)=>{n&&(n=s(n));for(const e of Object.keys(Hn))if(e===t)return Hn[e](n)},Rn=n=>"low"===n?1:"medium"===n?2:"high"===n?3:void 0,Gn={today:n=>{if(n)return n.filter((n=>n.getDueDate()===Ln()))},upcoming:n=>{if(n)return n.filter((n=>!1===n.getOverdue()))},all:n=>{if(n)return n},thisWeek:n=>{if(n)return n.filter((n=>{return!1===n.getOverdue()&&(t=n.getDueDate(),function(n,t){return p(1,arguments),function(n,t,e){p(2,arguments);var o=wn(n,e),r=wn(t,e);return o.getTime()===r.getTime()}(n,Date.now(),t)}(t=Wn(t)));var t}))},thisMonth:n=>{if(n)return n.filter((n=>{return!1===n.getOverdue()&&(t=n.getDueDate(),function(n){return p(1,arguments),function(n,t){p(2,arguments);var e=m(n),o=m(t);return e.getFullYear()===o.getFullYear()&&e.getMonth()===o.getMonth()}(Date.now(),n)}(t=Wn(t)));var t}))},priorityAsc:n=>{if(n){const t=(n,t)=>{const e=Wn(n.getDueDate()),o=Wn(t.getDueDate()),r=Rn(n.getPriority()),a=Rn(t.getPriority());return r===a?e<o?-1:1:r-a};return n.sort(((n,e)=>t(n,e))),n}},priorityDesc:n=>{if(n){const t=(n,t)=>{const e=Wn(n.getDueDate()),o=Wn(t.getDueDate()),r=Rn(n.getPriority()),a=Rn(t.getPriority());return r===a?e<o?-1:1:a-r};return n.sort(((n,e)=>t(n,e))),n}},dateAsc:n=>{if(n){const t=(n,t)=>{const e=Wn(n.getDueDate()),o=Wn(t.getDueDate()),r=Rn(n.getPriority()),a=Rn(t.getPriority());return n.getDueDate()===t.getDueDate()?r>a?-1:1:e-o};return n.sort(((n,e)=>t(n,e))),n}},dateDesc:n=>{if(n){const t=(n,t)=>{const e=Wn(n.getDueDate()),o=Wn(t.getDueDate()),r=Rn(n.getPriority()),a=Rn(t.getPriority());return n.getDueDate()===t.getDueDate()?r>a?-1:1:o-e};return n.sort(((n,e)=>t(n,e))),n}}},Jn=n=>{const t=[];for(const e of $n){const o=e.getTasks();let r;for(const t of n)r=Gn[t](o);t.push(r)}return t},_n=()=>{const n=(()=>{const n=[];for(const t of $n)n.push(t);return n})();for(const t of n){const n=a(t.getName()),e={name:t.getName()};localStorage.setItem(`${n}-info`,JSON.stringify(e));const o=t.getTasks();let r=1;for(const t of o){const e={title:t.getTitle(),project:t.getProject(),description:t.getDescription(),isChecked:t.getChecked(),dueDate:t.getDueDate(),isOverdue:t.getOverdue(),priority:t.getPriority()};localStorage.setItem(`${n}-task-${r}`,JSON.stringify(e)),r++}}},Vn=(n,t)=>t.every((t=>n.includes(t))),Kn=n=>{const t=(n=a(n)).split("-");for(const n of Object.keys(localStorage)){const e=n.split("-");Vn(e,t)&&localStorage.removeItem(n)}},nt=n=>{const t=n.dataset.pageName;if("empty"===t)return;const e=document.querySelectorAll("body > main");for(const n of e){const e=n.dataset.pageName;n.style.display=e===t?"grid":"none"}},tt=n=>{const t=document.querySelector("body"),e=document.querySelector("footer");t.insertBefore(n,e)},et=(n,t)=>{const e=u(n);return o(e,{class:t?"empty nested":"empty"}),e},ot=(t,e)=>{const r=a(t.toLowerCase()),s=document.createElement("main");return o(s,{class:`${r} page`}),s.dataset.pageName=r,s.style.display="none",n(s,e),s},rt=()=>{let n,t=[];return{getName:()=>n,getTasks:()=>t,setName:t=>n=t,addTask:n=>t.push(n)}},at=e.p+"f580f1dab98539152aaf.svg",st=e.p+"96e8b3cf8315d13551ef.svg",it=e.p+"18291fddc12bbbd43e48.svg",ct=e.p+"3581a6ffa04f4a694a25.svg",lt=e.p+"c60d10f9969e17a92c30.svg",dt=e.p+"8131ec68ddf3c332ac89.svg",At=e.p+"826e390e64ac7471c3b8.svg",ut=e.p+"bbccdea7353be054b7cd.svg",pt=e.p+"82ebe5cd270c9acdebd1.svg",mt=(e.p,e.p+"3006533cacbe3f0a9c70.jpg"),gt=e.p+"cafa4f878e6652771a4e.svg",ft=e.p+"123e48f9e5634f79beb7.svg",Ct=e.p+"11888627b5b2c8866427.svg",bt=e.p+"cf25268c36eaf3663845.svg",ht=e.p+"13b5d903870e05794688.svg",xt=e.p+"2f3782c44d29c39fd731.svg",yt=e.p+"605789c7fc6cbee9ef91.svg",Bt=e.p+"622cff1ac70b0f1d1490.svg",vt=e.p+"4803b6b61d18ae6a0b20.svg",It=e.p+"5fc28dff1fb7023abdf0.svg",kt=()=>{const n=A({src:st,alt:"Checked box"});return n.dataset.isChecked="true",n},wt=()=>A({src:it,alt:"Click to display content",class:"collapsible icon"}),Et=()=>A({src:lt,alt:"High priority"}),St=()=>A({src:At,alt:"Bullet list"}),jt=()=>A({src:ut,alt:"Low priority"}),Dt=()=>A({src:pt,alt:"Medium priority"}),qt=()=>A({src:gt,alt:"Pencil icon"}),Lt=n=>{const t={alt:"Plus icon"};return t.src=n?Ct:ft,A(t)},Tt=()=>A({src:Bt,alt:"Trash can icon"}),Yt=()=>{const n=A({src:vt,alt:"Unchecked box"});return n.dataset.isChecked="false",n},Mt=t=>{const e=document.createElement("li"),r=t.getChecked()?"task checked":"task";o(e,{class:`collapsible ${r}`});const a=[(()=>{const e=t.getChecked(),o=t.getTitle(),r=l({class:"left"}),a=[(()=>{const t=c({type:"button"}),o=e?kt():Yt();return n(t,[o]),t})(),e?(()=>{const t=document.createElement("s");t.textContent=o;const e=[t],r=u();return n(r,e),r})():u(o)];return n(r,a),r})(),(()=>{const e=t.getChecked(),r=t.getPriority(),a=t.getDueDate(),s=t.getOverdue(),i=l({class:"right"}),d=[u(a),"low"===r?jt():"medium"===r?Dt():"high"===r?Et():void 0,(()=>{const t=c({type:"button",class:"expand-task"}),e=[wt()];return n(t,e),t})()];return s&&!e&&d.unshift((()=>{const n=u("Overdue");return o(n,{class:"overdue"}),n})()),n(i,d),i})()];return n(e,a),e},Pt=()=>{const n=document.createElement("menu");return o(n,{class:"tasks"}),n},Wt=(n,t)=>{if(!t||0===t.length){const n=et("This project does not have any tasks.",!0);return void document.querySelector("footer").previousElementSibling.querySelector(".tasks").appendChild(n)}n=a(n).toLowerCase();const e=a(t[0].getProject()),o=document.querySelector(`.${n}.page [data-project-name="${e}"] .tasks`);for(const n of t){const t=Mt(n);o.appendChild(t)}},Ot=(n,t)=>{const e=a(t[0].getProject()),o=document.querySelector(`.${n}.page [data-project-name="${e}"] .tasks`),r=Array.from(o.querySelectorAll(".task"));o.querySelector(".empty")&&r.push(o.querySelector(".empty"));for(const n of r)n.nextElementSibling&&n.nextElementSibling.classList.contains("task-details")&&n.nextElementSibling.remove(),n.remove();for(const n of t){const t=Mt(n);o.appendChild(t)}},Nt=()=>{const t=l({class:"options"}),e=[(()=>{const t=()=>{const n=u("Priority: High to low");return o(n,{class:"input"}),n},e=l({class:"dropdown-wrapper"}),r=[(()=>{const e=c({type:"button",class:"dropdown collapsible"}),o=[t(),wt()];return n(e,o),e})(),(()=>{const t=document.createElement("menu");o(t,{class:"dropdown-menu"});const e=(n=>{const t=[];for(const n of["Priority: High to low","Priority: Low to high","Date: Newest to oldest","Date: Oldest to newest"]){const e=c({type:"button",class:"sort-by-filter"}),o=u(n);e.appendChild(o);const r=document.createElement("li");r.appendChild(e),t.push(r)}return t[0].firstElementChild.classList.add("selected"),t})();return n(t,e),t.style.visibility="hidden",t.style.opacity="0",t})()];return n(e,r),e})(),(()=>{const t=c({type:"button",class:"add-task-btn"}),e=[Lt(!1)];return n(t,e),t})(),(()=>{const t=c({type:"button",class:"edit-project-btn"}),e=[qt()];return n(t,e),t})(),(()=>{const t=c({type:"button",class:"delete-project-btn"}),e=[Tt()];return n(t,e),t})()];return n(t,e),t},Ut=e=>{const o=e&&e.length>0?e[0].getProject():document.querySelector("footer").previousElementSibling.dataset.pageName,r=i({class:"project"}),c=[d("3",t(s(o))),Nt(),Pt()];return r.dataset.projectName=a(o),n(r,c),r},$t=()=>l({class:"projects"}),Zt=(n,t)=>{n=a(n),document.querySelector(`.${n} .projects`).appendChild(t)},zt=n=>{const t=[],e=n.closest("button").firstElementChild.textContent;"Priority: High to low"===e&&t.push("priorityDesc"),"Priority: Low to high"===e&&t.push("priorityAsc"),"Date: Newest to oldest"===e&&t.push("dateDesc"),"Date: Oldest to newest"===e&&t.push("dateAsc");const o=n.closest("main").dataset.pageName;if("today"===o&&t.push("today"),"upcoming"===o){const e=n.closest("main").querySelector(".filters .selected").firstElementChild.textContent.toLowerCase();"all"===e?t.push("upcoming"):t.push(r(e))}return t},Qt=n=>{const e=[d("2","Projects"),$t()],o=t(n),r=ot(o,e);return r.className+=" projects",r},Xt=t=>{t||(t="empty");const e=()=>{const e=l({class:"subsection"}),o=[St()];return"empty"===t?o.push(u("There are no projects.")):o.push(u(t)),n(e,o),e},o=document.createElement("li"),r=[(()=>{const o=c({type:"button"});o.dataset.pageName=a(t.toLowerCase());const r=[e()];return n(o,r),o})()];return n(o,r),o},Ht=()=>{const e=e=>{const r=document.createElement("li"),s=[(()=>{const o={type:"button"},r=[e.icon,u(t(e.name))];e.collapsible&&(o.class=`${e.name} collapsible`,r.push(wt()));const s=c(o);return s.dataset.pageName=a(e.name),n(s,r),s})()];return e.collapsible&&s.push((()=>{const t=document.createElement("menu");o(t,{class:"subsections"});const e=[Xt()];return n(t,e),t})()),n(r,s),r},r=document.createElement("nav");o(r,{class:"sidebar"});const s=[(t=>{const r=document.createElement("menu");o(r,{class:"sidebar-sections"});const a=[];for(const n of t)a.push(e(n));return n(r,a),r})([{name:"home",icon:A({src:dt,alt:"Home icon"})},{name:"today",icon:A({src:yt,alt:"Single day calendar icon"})},{name:"upcoming",icon:A({src:It,alt:"Multiple days calendar icon"})},{name:"projects",icon:A({src:bt,alt:"Folder icon"}),collapsible:!0},{name:"settings",icon:A({src:xt,alt:"Gear icon"})}]),(()=>{const t=c({type:"button",class:"add-project-btn"}),e=[Lt(!0),u("Add project")];return n(t,e),t})()];return n(r,s),r},Ft=(n,t)=>{const e=document.querySelector(`.${t} + .subsections`),o=e.querySelector("li");"empty"===o.firstElementChild.dataset.pageName&&o.remove();const r=Xt(n);e.appendChild(r)},Rt=t=>{const e=(t,e)=>{const r=u();o(r,{class:t});const a=document.createElement("strong");return a.textContent=e,n(r,[a]),r},r=document.createElement("aside");o(r,{class:"alerts"});const a=Fn(t,"overdue"),s=Fn(t,"remaining"),i=[];return a>0&&i.push(e("overdue",a)),s>0&&i.push(e("remaining",s)),n(r,i),r},Gt=n=>""===n.value,Jt=n=>{const t=a(n.value.toLowerCase().trim()),e=document.querySelectorAll(".projects + .subsections button");for(const n of e)if(n.dataset.pageName===t)return!0;return!1},_t=n=>!/^[a-zA-Z\s]*$/.test(n.value),Vt=n=>!(Gt(n)||Jt(n)||_t(n)),Kt=n=>{const t=n.closest(".input-wrapper");if(t.childElementCount<4){const e=()=>Gt(n)?u("Please enter a project name."):Jt(n)?u("This project already exists."):_t(n)?u("The name should only include letters."):void 0;3===t.childElementCount&&t.lastElementChild.remove(),n.closest("form").style.gap="8px";const o=e();o.style.fontSize="0.7rem",o.style.color="var(--color-brand-4)",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",o)}},ne=n=>{const t=n.querySelectorAll("input");for(const n of t)n.nextElementSibling&&n.nextElementSibling.remove(),n.value=null,n.style.borderColor="var(--color-text-1)",n.closest("form").style.gap="16px"},te=n=>{const e=n.querySelector("input").value.toLowerCase().trim(),o=rt();o.setName(e),Zn(o);const r=o.getName();Ft(t(r),"projects");const a=Qt(e);tt(a);const s=Ut();Zt(r,s),Wt(r),_n(),nt(a),ne(n)},ee=n=>{const t=n.querySelectorAll("input");for(const n of t){const t=n.style.borderColor;"transparent"===t&&(n.style.borderColor="var(--color-text-1)"),"var(--color-text-1)"===t&&(n.style.borderColor="transparent")}},oe={click:n=>{var t;n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")&&(t=n.target.closest("dialog"),ne(t),t.close()),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const t=n.target.closest("dialog"),e=t.querySelectorAll("input");for(const o of e)Vt(o)?te(t):(n.preventDefault(),Kt(o))})(n)},focusin:n=>{if(n.target.closest("form")){const t=n.target.closest("form");ee(t)}},focusout:n=>{if(n.target.closest("form")){const t=n.target.closest("form");ee(t)}}},re=n=>{const t=n.type;for(const e of Object.keys(oe))e===t&&oe[e](n)},ae=()=>{const t=i({class:"overview"}),e=[d("3","Overview"),(()=>{const t=l({class:"date-wrapper"}),e=[(()=>{const n=u(jn());return o(n,{class:"num-date"}),n})(),(()=>{const t=l({class:"full-date"}),e=on(En,"EEE"),o=Dn(),r=qn(),a=[u(`${e},`),u(`${o} ${r}`)];return n(t,a),t})()];return n(t,e),t})(),(()=>{const t=l({class:"overview-tasks"}),e=(()=>{const t=[],e=["completed","remaining","overdue"];for(const o of e){const e=i({class:o}),r=[d("4","0"),u("Tasks"),u(o)];n(e,r),t.push(e)}return t})();return n(t,e),t})(),(()=>{const t=l({class:"overview-img-wrapper"}),e=[A({src:mt,alt:"Aesthetic image"})];return n(t,e),t})()];return n(t,e),t},se=()=>{const t=i({class:"notes"}),e=[d("3","Notes"),(()=>{const n=document.createElement("textarea");return o(n,{name:"user-notes",id:"user-notes",cols:"30",rows:"10"}),n})()];return n(t,e),t},ie=()=>{const n=[d("2","Home"),ae(),se()],t=ot("home",n);return t.style.display="grid",t},ce=()=>{const n=Fn(null,"completed");document.querySelector(".overview-tasks .completed h4").textContent=n;const t=Fn(null,"overdue");document.querySelector(".overview-tasks .overdue h4").textContent=t;const e=Fn(null,"remaining");document.querySelector(".overview-tasks .remaining h4").textContent=e},le=()=>{let n,t,e,o,r,a,s;return{getTitle:()=>n,getDescription:()=>t,getDueDate:()=>e,getPriority:()=>o,getOverdue:()=>r,getChecked:()=>a,getProject:()=>s,setTitle:t=>n=t,setDescription:n=>t=n,setDueDate:n=>e=n,setPriority:n=>o=n,setOverdue:n=>r=n,setChecked:n=>a=n,setProject:n=>s=n}},de=n=>n.classList.toggle("active"),Ae=n=>{const t=n.querySelectorAll(".input");for(const n of t)n.value=null,n.style.borderColor="transparent",n.nextElementSibling&&n.nextElementSibling.remove();n.querySelector("#task-description").value=null},ue=n=>{if("today"===n)return"today";if("upcoming"===n){const n=r(document.querySelector(".page.upcoming .filters .selected p").textContent.toLowerCase());return"all"===n?"upcoming":n}return"projects"===n?"all":void 0},pe=(n,t)=>{const e=a(n.getProject());return!document.querySelector(`.page.${t} .project[data-project-name="${e}"]`)},me=n=>""===n.value,ge=n=>{if("task-title"===n.id){const t=n.closest("form").querySelector(".form-title").textContent.slice(12).toLowerCase(),e=zn(t).getTasks();for(const t of e)if(t.getTitle().toLowerCase()===n.value.toLowerCase())return!0}return!1},fe=(n,t)=>""===n.value||ge(n)?((n=>{const t=n.closest("div");3===t.childElementCount&&t.lastElementChild.remove();const e=(n=>me(n)&&"task-title"===n.id?u("Please enter a task name."):me(n)&&"task-due-date"===n.id?u("Please select a date."):ge(n)?u("This task already exists in this project."):void 0)(n);e.style.fontSize="0.7rem",e.style.color="var(--color-brand-4)",e.style.marginTop="3px",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",e)})(n),t.preventDefault(),0):((n=>{n.nextElementSibling&&(n.style.border="1.5px solid transparent",n.nextElementSibling.remove())})(n),1),Ce={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("add-task-btn")&&(de(n.target.closest("button")),(n=>{const e=t(s(n.dataset.projectName)),r=u(`Add task to ${e}`);o(r,{class:"form-title"});const a=document.querySelector(".add-task.modal form");a.firstElementChild.classList.contains("form-title")&&a.firstElementChild.remove(),a.insertBefore(r,a.firstElementChild)})(n.target.closest("article")),document.querySelector(".add-task.modal").showModal()),n.target.closest("button")&&n.target.closest("button").classList.contains("task-priority-btn")&&(n=>{n.lastElementChild.remove();const t=n.firstElementChild.textContent;if("Low"===t){const t=Dt();n.appendChild(t),n.firstElementChild.textContent="Medium"}if("Medium"===t){const t=Et();n.appendChild(t),n.firstElementChild.textContent="High"}if("High"===t){const t=jt();n.appendChild(t),n.firstElementChild.textContent="Low"}})(n.target.closest("button")),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")){(n=>{const t=n.target.closest("dialog"),e=t.querySelectorAll(".input");let o=0;for(const t of e)o+=fe(t,n);o===e.length&&(n=>{const t=le(),e=n.querySelector("#task-title").value;t.setTitle(e);const o=n.querySelector("#task-description").value;t.setDescription(o);const r=n.querySelector("#task-due-date").value.split("-"),s=r[0],i="0"===r[1].charAt(0)?r[1].slice(1):r[1],c="0"===r[2].charAt(0)?r[2].slice(1):r[2],l=`${Pn(i)} ${c}, ${s}`;t.setDueDate(l);const d=n.querySelector(".task-priority-btn p").textContent.toLowerCase();t.setPriority(d),t.setOverdue(!1),t.setChecked(!1);const A=n.querySelector(".form-title").textContent.toLowerCase().slice(12);t.setProject(A),zn(A).addTask(t),_n(),(n=>{const t=n.getProject(),e=["today","upcoming","projects"];for(const o of e){document.querySelector(`.page.${o} .empty`)&&document.querySelector(`.page.${o} .empty`).remove();const e=[];if(e.push(ue(o)),document.querySelector(`.page.${o} [data-project-name="${a(t)}"]`)){const n=document.querySelector(`.page.${o} [data-project-name="${a(t)}"] .dropdown p`).textContent;"Priority: High to low"===n&&e.unshift("priorityDesc"),"Priority: Low to high"===n&&e.unshift("priorityAsc"),"Date: Newest to oldest"===n&&e.unshift("dateDesc"),"Date: Oldest to newest"===n&&e.unshift("dateAsc")}const r=Jn(e);for(const e of r)if(0!==e.length){if(pe(n,o)&&e[0].getProject()===n.getProject()){const n=Ut(e);Zt(o,n)}if(e[0].getProject()===t){Ot(o,e);break}}}})(t),(n=>{const t=document.querySelector(`[data-page-name="${a(n)}"] .alerts`),e=Rt(n);t?(t.after(e),t.remove()):document.querySelector(`.sidebar [data-page-name="${a(n)}"]`).appendChild(e)})(A),ce(),Ae(n)})(t)})(n);const t=document.querySelector(".active");de(t)}if(n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){e=n.target.closest("dialog"),Ae(e),e.close();const t=document.querySelector(".active");de(t)}var e}},be=n=>{const t=n.type;for(const e of Object.keys(Ce))e===t&&Ce[e](n)},he=[[{title:"Drop off package",description:"Store opens at 10 AM",dueDate:Ln(),priority:"high",overdue:!1,checked:!0,project:"errands"},{title:"Buy birthday gift",description:"",dueDate:Ln(),priority:"high",overdue:!1,checked:!0,project:"errands"},{title:"Send out postcard",description:"",dueDate:Mn("sunday",0),priority:"medium",overdue:!0,overdue:!0,checked:!1,project:"errands"},{title:"Get groceries",description:"",dueDate:Ln(),priority:"medium",overdue:!1,checked:!0,project:"errands"},{title:"Meal prep",description:"",dueDate:Ln(),priority:"low",overdue:!1,checked:!1,project:"errands"},{title:"Water plants",description:"",dueDate:Ln(),priority:"low",overdue:!1,checked:!1,project:"errands"},{title:"Go to gym",description:"\n            Upper body day:\n            bicep curls, overhead tricep extensions, upright row,\n            rear delt fly/pull, overhead shoulder presses, chest presses\n        ",dueDate:Ln(),priority:"low",overdue:!1,checked:!0,project:"errands"}],[{title:"Book Airbnb",description:"Check cancellation policy before booking",dueDate:Ln(),priority:"high",overdue:!1,checked:!0,project:"road trip"},{title:"Schedule doggy daycare",description:"",dueDate:Tn({days:4}),priority:"high",overdue:!1,checked:!0,project:"road trip"},{title:"Get car checked",description:"",dueDate:Yn("saturday",1),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Finish packing",description:"",dueDate:Yn("thursday",3),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Turn off all electronics and lock all doors",description:"",dueDate:Yn("friday",3),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Make dinner reservations for the day we arrive",description:"",dueDate:Ln(),priority:"medium",overdue:!1,checked:!1,project:"road trip"},{title:"Buy parking pass for national parks/viewpoints",description:"",dueDate:Tn({days:4}),description:"Save copies of tickets",priority:"medium",overdue:!1,checked:!0,project:"road trip"},{title:"Buy travel items",description:"",dueDate:Tn({days:6}),priority:"low",overdue:!1,checked:!0,project:"road trip"}],[{title:"Confirm vacation time",description:"",dueDate:Yn("tuesday",0),priority:"high",overdue:!1,checked:!0,project:"work"},{title:"Introduce new team members",description:"",dueDate:Yn("monday",2),priority:"high",overdue:!1,checked:!1,project:"work"},{title:"Gather end-of-week analysis",description:"",dueDate:Yn("friday",2),priority:"high",overdue:!1,checked:!1,project:"work"},{title:"Video call Joe",description:"Go over team dynamic and discuss possible changes",dueDate:Mn("wednesday",0),priority:"medium",overdue:!0,checked:!1,project:"work"}]],xe={click:n=>{n.target.closest("button")&&n.target.closest("button").classList.contains("yes-btn")&&((()=>{for(const n of he){const t=rt();t.setName(n[0].project);for(const e of n){const n=le();n.setTitle(e.title),n.setDescription(e.description),n.setDueDate(e.dueDate),n.setPriority(e.priority),n.setOverdue(e.overdue),n.setChecked(e.checked),n.setProject(e.project),t.addTask(n)}Zn(t)}})(),(n=>{for(const n of["today","upcoming"]){const t=Jn([n]);for(const e of t){if(0===e.length)continue;const t=Ut(e);Zt(n,t),Wt(n,e)}}})(),(()=>{const n=Jn(["all"]);for(const t of n){const n=t[0].getProject(),e=Qt(n);tt(e);const o=zn(n).getTasks(),r=Ut(o);Zt(n,r),Wt(n,o)}})(),(()=>{for(const n of he){const e=n[0].project;Ft(t(e),"projects");const o=a(e),r=document.querySelector(`[data-page-name="${o}"]`),s=Rt(a(e));r.appendChild(s)}})(),ce(),_n()),n.target.closest("button")&&n.target.closest("button").classList.contains("no-btn")&&((()=>{const n=document.querySelectorAll(".page .projects");for(const t of n){const n=et("There are no upcoming tasks.",!1);t.appendChild(n)}})(),_n(),document.querySelector(".default-content.modal").close())}},ye=n=>n.classList.toggle("active"),Be={click:t=>{if(t.target.closest("button")&&t.target.closest("button").classList.contains("delete-project-btn")&&(document.querySelector(".delete-project.modal").showModal(),ye(t.target.closest("button"))),t.target.closest("button")&&t.target.closest("button").classList.contains("confirm-btn")){const t=document.querySelector(".active").closest("article").dataset.projectName,e=document.querySelector(".active").closest("main").dataset.pageName;(t=>{const e=document.querySelector(".subsections");e.querySelector(`button[data-page-name="${t}"]`).closest("li").remove(),0===e.childElementCount&&(()=>{const t=St(),e=u("There are no projects.");o(e,{class:"empty"});const r=[t,e],a={class:"subsection"},s=l(a);o(s,a),s.dataset.pageName="empty",n(s,r);const i=document.createElement("li");i.appendChild(s),document.querySelector(".subsections").appendChild(i)})()})(t),(n=>{(n=>{const t=$n.findIndex((t=>t.getName()===n));$n.splice(t,1)})(s(n))})(t),(n=>{const t=document.querySelectorAll(`.page .project[data-project-name="${n}"]`);for(const n of t)n.remove();const e=document.querySelectorAll(".projects");for(const n of e)if(0===n.childElementCount){const t=et("There are no upcoming tasks.",!1);n.appendChild(t)}})(t),((n,t)=>{document.querySelector(`.page[data-page-name="${n}"]`).remove(),"today"!==t&&"upcoming"!==t&&((document.querySelector(".projects.page")?document.querySelector(".projects.page"):document.querySelector(".home.page")).style.display="grid")})(t,e),Kn(t),_n(),ce()}if(t.target.closest("button")&&t.target.closest("button").classList.contains("cancel-btn")){document.querySelector(".delete-project.modal").close();const n=document.querySelector(".active");ye(n)}}},ve=n=>{const t=n.type;for(const e of Object.keys(Be))e===t&&Be[e](n)},Ie=n=>n.classList.toggle("active"),ke=n=>{if("today"===n)return"today";if("upcoming"===n){const n=r(document.querySelector(".page.upcoming .filters .selected p").textContent.toLowerCase());return"all"===n?"upcoming":n}return"projects"===n?"all":void 0},we={click:n=>{const t=document.querySelector(".delete-task.modal");if(n.target.closest("button")&&n.target.closest("button").classList.contains("task-delete-btn")&&((n=>{n.showModal()})(t),Ie(n.target.closest("button"))),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")){const n=document.querySelector(".active").closest("li").previousElementSibling,t=document.querySelector(".active").closest("article").dataset.projectName;(n=>{const t=n.closest("article").dataset.projectName,e=n.classList.contains("checked")?n.querySelector(".left p s").textContent:n.querySelector(".left p").textContent,o=["today","upcoming","projects"];for(const r of o){const o=document.querySelector(`.page.${r} [data-project-name="${t}"] .tasks`);if(!o)continue;const a=[];if(a.push(ke(r)),document.querySelector(`.page.${r} [data-project-name="${t}"]`)){const n=document.querySelector(`.page.${r} [data-project-name="${t}"] .dropdown p`).textContent;"Priority: High to low"===n&&a.unshift("priorityDesc"),"Priority: Low to high"===n&&a.unshift("priorityAsc"),"Date: Newest to oldest"===n&&a.unshift("dateDesc"),"Date: Oldest to newest"===n&&a.unshift("dateAsc")}const i=Jn(a);for(const a of i)if(0!==a.length&&a[0].getProject()===s(t)){for(const o of a){const a=document.querySelectorAll(`.page.${r} [data-project-name="${t}"] .task`);for(const t of a)(t.classList.contains("checked")?t.querySelector(".left p s").textContent:t.querySelector(".left p").textContent)===e&&(n=t);if(o.getTitle()===e){n.classList.contains("expanded")&&n.nextElementSibling.remove(),n.remove();break}}if(o){if("projects"===r&&0===o.childElementCount){const n=et("There are no tasks.",!0);o.appendChild(n)}"projects"!==r&&0===o.childElementCount&&o.closest("article").remove()}}}(n=>{const t=zn(n.projectName).getTasks(),e=t.findIndex((t=>t.getTitle()===n.title));t.splice(e,1)})({projectName:s(t),title:e}),Kn(t),_n()})(n),(n=>{const t=document.querySelector(`[data-page-name="${a(n)}"] .alerts`),e=Rt(n);t?(t.after(e),t.remove()):document.querySelector(`.sidebar [data-page-name="${a(n)}"]`).appendChild(e)})(t),ce()}if(n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){(n=>{n.close()})(t);const n=document.querySelector(".active");Ie(n)}}},Ee=n=>{const t=n.type;for(const e of Object.keys(we))e===t&&we[e](n)},Se=n=>n.classList.toggle("active"),je=n=>""===n.value,De=n=>n.value.toLowerCase()===document.querySelector(".active").closest("article").querySelector("h3").textContent.toLowerCase(),qe=n=>!/^[a-zA-Z\s]*$/.test(n.value),Le=n=>!(je(n)||De(n)||qe(n)),Te=n=>{const t=n.closest(".input-wrapper");if(t.childElementCount<4){const e=()=>je(n)?u("Please enter a project name."):De(n)?u("Please enter a new project name."):qe(n)?u("The name should only include letters."):void 0;3===t.childElementCount&&t.lastElementChild.remove(),n.closest("form").style.gap="8px";const o=e();o.style.fontSize="0.7rem",o.style.color="var(--color-brand-4)",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",o)}},Ye=n=>{const t=n.querySelector("input");t.style.borderColor="transparent",t.closest("form").style.gap="16px",t.nextElementSibling&&t.nextElementSibling.remove()},Me=n=>{const e=document.querySelector(".active").closest("article").querySelector("h3").textContent.toLowerCase(),o=n.querySelector("#new-project-name").value.toLowerCase();(n=>{const t=document.querySelector(".active").closest("article").querySelector("h3").textContent,e=document.querySelectorAll(".subsection p");for(const o of e)if(o.textContent===t){o.textContent=n,o.closest("button").dataset.pageName=a(n.toLowerCase());break}})(t(o));const r=zn(e);r.setName(s(o)),document.querySelector(`.page[data-page-name="${a(e)}"]`).dataset.pageName=a(o);const i=r.getTasks();for(const n of i)n.setProject(s(o));const c=document.querySelectorAll(".project");for(const n of c){const r=n.querySelector("h3");r.textContent===t(e)&&(r.textContent=t(o),n.dataset.projectName=a(o))}Kn(e),_n(),Ye(n),Se(document.querySelector(".active"))},Pe=n=>{const t=n.querySelectorAll("input");for(const n of t){const t=n.style.borderColor;"transparent"===t&&(n.style.borderColor="var(--color-text-1)"),"var(--color-text-1)"===t&&(n.style.borderColor="transparent")}},We={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("edit-project-btn")){const t=document.querySelector(".edit-project.modal");((n,t)=>{const e=n.querySelector("#new-project-name"),o=t.target.closest("article").querySelector("h3").textContent;e.value=o})(t,n),(n=>{n.showModal()})(t),Se(n.target.closest("button"))}if(n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const t=n.target.closest("dialog"),e=t.querySelectorAll("input");for(const o of e)Le(o)?Me(t):(n.preventDefault(),Te(o))})(n),n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){const n=document.querySelector(".edit-project.modal");(n=>{n.close()})(n),Ye(n);const t=document.querySelector(".active");Se(t)}},focusin:n=>{if(n.target.closest("form")){const t=n.target.closest("form");Pe(t)}},focusout:n=>{if(n.target.closest("form")){const t=n.target.closest("form");Pe(t)}}},Oe=n=>{const t=n.type;for(const e of Object.keys(We))e===t&&We[e](n)},Ne=n=>n.classList.toggle("active"),Ue=()=>{const n=document.querySelector(".active").closest("li").previousElementSibling;return s(n.closest("article").dataset.projectName)},$e=(n,t)=>""===n.value?((n=>{const t=n.closest("div");3===t.childElementCount&&t.lastElementChild.remove();const e=(()=>{const t=()=>""===n.value;return t()&&"task-title"===n.id?u("Please enter a task name."):t()&&"task-due-date"===n.id?u("Please select a date."):void 0})();e.style.fontSize="0.7rem",e.style.color="var(--color-brand-4)",e.style.marginTop="3px",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",e)})(n),t.preventDefault(),0):((n=>{n.nextElementSibling&&(n.style.border="1.5px solid transparent",n.nextElementSibling.remove())})(n),1),Ze=n=>{if("today"===n)return"today";if("upcoming"===n){const n=r(document.querySelector(".page.upcoming .filters .selected p").textContent.toLowerCase());return"all"===n?"upcoming":n}return"projects"===n?"all":void 0},ze={click:n=>{const t=document.querySelector(".edit-task.modal");if(n.target.closest("button")&&n.target.closest("button").classList.contains("task-edit-btn")){(n=>{const t=document.querySelector(".edit-task.modal");var e;t.querySelector("#task-title").value=n.title,t.querySelector("#task-description").textContent=n.description,(n=>{const t=document.querySelector(".edit-task.modal .task-priority-btn");if(t.lastElementChild.remove(),"Low"===n){const n=jt();t.appendChild(n),t.firstElementChild.textContent="Low"}if("Medium"===n){const n=Dt();t.appendChild(n),t.firstElementChild.textContent="Medium"}if("High"===n){const n=Et();t.appendChild(n),t.firstElementChild.textContent="High"}})(n.priority),e=n.dueDate,document.querySelector(".edit-task.modal #task-due-date").value=On(e)})((n=>{const t=n.closest("li").previousElementSibling;return{title:t.classList.contains("checked")?t.querySelector(".left p s").textContent:t.querySelector(".left p").textContent,description:t.nextElementSibling.querySelector(".task-description").textContent,priority:t.querySelector(".right img").getAttribute("alt").split(" ")[0],dueDate:t.querySelector(".right p").textContent}})(n.target.closest("button"))),(n=>{n.showModal()})(t),Ne(n.target.closest("button"))}if(n.target.closest("button")&&n.target.closest("button").classList.contains("task-priority-btn")&&(n=>{n.lastElementChild.remove();const t=n.firstElementChild.textContent;if("Low"===t){const t=Dt();n.appendChild(t),n.firstElementChild.textContent="Medium"}if("Medium"===t){const t=Et();n.appendChild(t),n.firstElementChild.textContent="High"}if("High"===t){const t=jt();n.appendChild(t),n.firstElementChild.textContent="Low"}})(n.target.closest("button")),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const t=n.target.closest("dialog"),e=t.querySelectorAll(".input");let o=0;for(const t of e)o+=$e(t,n);o===e.length&&(n=>{(n=>{const t=document.querySelector(".active").closest("li").previousElementSibling,e=t.classList.contains("checked")?t.querySelector(".left p s").textContent:t.querySelector(".left p").textContent,o=Ue(),r=zn(o).getTasks();for(const t of r)if(t.getTitle()===e){t.setTitle(n.title),t.setDescription(n.description),t.setPriority(n.priority);const e=Nn(n.dueDate);t.setDueDate(e);break}})({title:n.querySelector("#task-title").value,description:n.querySelector("#task-description").value,priority:n.querySelector(".task-priority-btn").firstElementChild.textContent.toLowerCase(),dueDate:n.querySelector("#task-due-date").value}),(()=>{const n=Ue(),t=["today","upcoming","projects"];for(const e of t){const t=[];if(t.push(Ze(e)),document.querySelector(`.page.${e} [data-project-name="${a(n)}"]`)){const o=document.querySelector(`.page.${e} [data-project-name="${a(n)}"] .dropdown p`).textContent;"Priority: High to low"===o&&t.unshift("priorityDesc"),"Priority: Low to high"===o&&t.unshift("priorityAsc"),"Date: Newest to oldest"===o&&t.unshift("dateDesc"),"Date: Oldest to newest"===o&&t.unshift("dateAsc")}const o=Jn(t);for(const t of o)if(0!==t.length&&t[0].getProject()===n){Ot(e,t);break}}})(),_n()})(t)})(n),n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){(n=>{n.close()})(t);const n=document.querySelector(".active");Ne(n)}}},Qe=n=>{const t=n.type;for(const e of Object.keys(ze))e===t&&ze[e](n)},Xe=n=>{document.querySelector(".filters .selected").classList.remove("selected");(n=>{n.classList.add("selected"),(n=>{const t=zt(n);t.unshift("priorityDesc");const e=Jn(t),o=document.querySelectorAll(".upcoming.page .project");for(const n of o)n.remove();for(const n of e){if(0===n.length)continue;const t=Ut(n);Zt("upcoming",t),Wt("upcoming",n)}})(n)})(n.target.closest("button"))},He={click:n=>{n.target.closest("button")&&!n.target.closest("button").classList.contains("selected")&&Xe(n)}},Fe={change:n=>{n.target.closest("textarea")&&(()=>{const n=document.querySelector(".home.page textarea").value;localStorage.setItem("notes",n)})()}},Re=n=>{n.classList.toggle("expanded");const t=n.nextElementSibling;n.classList.contains("expanded")?(t.style.visibility="visible",t.style.opacity="1"):(t.style.visibility="hidden",t.style.opacity="0")},Ge={click:n=>{if(n.target.closest("button").classList.contains("dropdown")){const t=n.target.closest("button");Re(t)}if(n.target.closest("button").classList.contains("sort-by-filter")){(t=n.target.closest("button")).closest("menu").querySelector(".selected").classList.toggle("selected"),t.classList.toggle("selected"),t.closest("div").querySelector(".dropdown").firstElementChild.textContent=t.firstElementChild.textContent;const e=n.target.closest("div").querySelector(".dropdown");Re(e),(n=>{const t=zt(n),e=Jn(t),o=a(n.closest("main").firstElementChild.textContent.toLowerCase()),r=a(n.closest("article").firstElementChild.textContent.toLowerCase()),i=document.querySelector(`.${o}.page [data-project-name="${r}"] .tasks`);i.firstElementChild.classList.contains("empty")||(n=>{for(;n.firstElementChild;)n.removeChild(n.firstElementChild)})(i);for(const n of e){if(0===n.length)return;if(n[0].getProject()===s(r)){Wt(o,n);break}}})(n.target.closest("button"))}var t}},Je={click:n=>{n.target.closest("button")&&(n.target.closest("button").classList.contains("dropdown")||n.target.closest("button").classList.contains("sort-by-filter"))&&(n=>{const t=n.type;for(const e of Object.keys(Ge))e===t&&Ge[e](n)})(n),n.target.closest("button")&&n.target.closest("button").classList.contains("add-task-btn")&&be(n),n.target.closest("button")&&n.target.closest("button").classList.contains("edit-project-btn")&&Oe(n),n.target.closest("button")&&n.target.closest("button").classList.contains("delete-project-btn")&&ve(n)}},_e=n=>n.classList.toggle("active"),Ve={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("reset")&&(document.querySelector(".reset-program.modal").showModal(),_e(n.target.closest("button"))),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(localStorage.clear(),location.reload()),n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){document.querySelector(".reset-program.modal").close();const n=document.querySelector(".active");_e(n)}}},Ke=n=>{const t=n.type;for(const e of Object.keys(Ve))e===t&&Ve[e](n)},no={click:n=>{n.target.closest("button")&&n.target.closest("button").classList.contains("reset")&&Ke(n)}},to={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("add-project-btn")&&document.querySelector(".add-project.modal").showModal(),n.target.closest("button")&&n.target.closest("button").dataset.pageName){(n=>{n.classList.contains("collapsible")?(n=>{n.classList.toggle("expanded");const t=n.nextElementSibling;"0px"===window.getComputedStyle(t).getPropertyValue("max-height")?(t.style.maxHeight="100%",t.style.opacity="1",t.style.marginTop="0"):(t.style.maxHeight="0",t.style.opacity="0",t.style.marginTop="-8px")})(n):n.classList.contains("no-projects-created")||nt(n)})(n.target.closest("button"))}}},eo=n=>{(n=>{const t="true"===n.dataset.isChecked?Yt():kt();n.parentElement.replaceChild(t,n)})(n.querySelector(".left img")),(n=>{if(n.childElementCount>0){const t=n.firstElementChild.textContent;n.firstElementChild.remove(),n.textContent=t}else{const t=document.createElement("s");t.textContent=n.textContent,n.textContent="",n.appendChild(t)}})(n.querySelector(".left p")),(n=>{if(n.querySelector(".overdue"))n.querySelector(".overdue").remove();else{const t=n.querySelector(".right p").textContent;if(Un(t)&&!n.querySelector(".overdue")){const t=u("Overdue");o(t,{class:"overdue"}),n.querySelector(".right").insertAdjacentElement("afterbegin",t)}}})(n),(n=>{n.classList.toggle("checked")})(n)},oo={click:t=>{if("IMG"===t.target.nodeName&&t.target.closest("div").classList.contains("left")){const n=t.target,e="true"===n.dataset.isChecked,o=n.parentElement.nextElementSibling,r=e?o.firstElementChild.textContent:o.textContent,s=a(n.closest(".project").firstElementChild.textContent.toLowerCase()),i={isChecked:e,title:r,project:s};(n=>{for(const t of $n){const e=t.getTasks();if(!e)return;for(const t of e)t.getTitle()===n&&(t.getChecked()?t.setChecked(!1):t.setChecked(!0))}})(r),_n(),(n=>{const t=document.querySelector(`[data-page-name="${a(n)}"] .alerts`),e=Rt(n);t.after(e),t.remove(),ce()})(s),(n=>{const t=document.querySelectorAll(`[data-project-name="${n.project}"]`);for(const e of t){const t=n.isChecked?e.querySelectorAll(".task.checked"):e.querySelectorAll(".task");for(const e of t)(e.querySelector(".left p s")&&e.querySelector(".left p s").textContent===n.title||e.querySelector(".left p")&&e.querySelector(".left p ").textContent===n.title)&&eo(e)}})(i)}t.target.closest("button")&&t.target.closest("button").classList.contains("expand-task")&&(t=>{const e=t.closest("li");if(e.classList.toggle("expanded"),e.nextElementSibling&&e.nextElementSibling.classList.contains("task-details"))e.nextElementSibling.addEventListener("animationend",(()=>e.nextElementSibling.remove()));else{const t=(t=>{const e=document.createElement("li");o(e,{class:"task-details"});const r=[(()=>{const e=l({class:"description-wrapper"}),r=[u("Description"),(()=>{const n=(()=>{const n=s(t.closest("article").dataset.projectName),e=t.querySelector(".left p").textContent,o=zn(n).getTasks();for(const n of o)if(n.getTitle()===e)return n.getDescription()})(),e=u(n);return o(e,{class:"task-description"}),e})()];return n(e,r),e})(),(()=>{const t={class:"task-options-wrapper"},e=l(t);o(e,t);const r=[(()=>{const n=c({class:"task-edit-btn"});return n.appendChild(qt()),n})(),(()=>{const n=c({class:"task-delete-btn"});return n.appendChild(Tt()),n})()];return n(e,r),e})()];return n(e,r),e})(e);e.insertAdjacentElement("afterend",t)}e.nextElementSibling.classList.toggle("expanded")})(t.target.closest("button"))}},ro={click:n=>{n.target.closest("button")&&n.target.closest("button").classList.contains("task-delete-btn")&&Ee(n),n.target.closest("button")&&n.target.closest("button").classList.contains("task-edit-btn")&&Qe(n)}},ao=()=>{const t=document.createElement("dialog");o(t,{class:"add-project modal"});const e=[(()=>{const t=document.createElement("form");o(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"input-wrapper"},e=l(t);o(e,t);const r=[(()=>{const n=document.createElement("label");return o(n,{for:"project-name"}),n.textContent="Project name:",n})(),(()=>{const n=document.createElement("input");return o(n,{type:"text",name:"project-name",id:"project-name",maxlength:"20"}),n})()];return n(e,r),e})(),(()=>{const t={class:"buttons"},e=l(t);o(e,t);const r=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,r),e})()];return n(t,e),t})()];return n(t,e),t},so=()=>{const t=document.createElement("dialog");o(t,{class:"add-task modal"}),t.dataset.for="add-task-btn";const e=[(()=>{const t=document.createElement("form");o(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"task-title-wrapper"},e=l(t);o(e,t);const r=[(()=>{const n=document.createElement("label");return o(n,{for:"task-title"}),n.textContent="Title",n})(),(()=>{const n=document.createElement("input");return o(n,{class:"input",type:"text",name:"task-title",id:"task-title",minlength:"1",maxlength:"30"}),n})()];return n(e,r),e})(),(()=>{const t=l({class:"task-description-wrapper"}),e=[(()=>{const n=document.createElement("label");return o(n,{for:"task-description"}),n.textContent="Description",n})(),(()=>{const n=document.createElement("textarea");return o(n,{name:"task-description",id:"task-description",cols:"10",rows:"5"}),n})()];return n(t,e),t})(),(()=>{const t={class:"task-grouped-options-wrapper"},e=l(t);o(e,t);const r=[(()=>{const t=l({class:"task-priority-wrapper"}),e=[u("Priority"),(()=>{const t=c({type:"button",class:"task-priority-btn"}),e=[u("High"),Et()];return n(t,e),t})()];return n(t,e),t})(),(()=>{const t=l({class:"task-due-date-wrapper"}),e=[(()=>{const n=document.createElement("label");return o(n,{for:"task-due-date"}),n.textContent="Due date",n})(),(()=>{const n=document.createElement("input"),t={class:"input",type:"date",name:"task-due-date",id:"task-due-date",min:On()};return o(n,t),n})()];return n(t,e),t})()];return n(e,r),e})(),(()=>{const t={class:"buttons"},e=l(t);o(e,t);const r=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,r),e})()];return n(t,e),t})()];return n(t,e),t},io=()=>{const t=document.createElement("dialog");o(t,{class:"default-content modal"});const e=[(()=>{const t=document.createElement("form");o(t,{action:"",method:"dialog"});const e=[(()=>{const n=u("Would you like the program to load default projects and tasks?");return o(n,{class:"message"}),n})(),(()=>{const t={class:"buttons"},e=l(t);o(e,t);const r=[(()=>{const n=c({type:"submit",class:"yes-btn"}),t=u("Yes");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"no-btn"}),t=u("No");return n.appendChild(t),n})()];return n(e,r),e})()];return n(t,e),t})()];return n(t,e),t},co=()=>{const t=document.createElement("dialog");o(t,{class:"delete-task modal"});const e=[(()=>{const t=document.createElement("form");o(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"message"},e=l(t);o(e,t);const r=[(()=>{const n=u(),t=document.createElement("strong");return t.textContent="Delete this task?",n.appendChild(t),n})(),u("You will not be able to recover it.")];return n(e,r),e})(),(()=>{const t={class:"buttons"},e=l(t);o(e,t);const r=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,r),e})()];return n(t,e),t})()];return n(t,e),t},lo=()=>{const t=document.createElement("dialog");o(t,{class:"delete-project modal"});const e=[(()=>{const t=document.createElement("form");o(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"message"},e=l(t);o(e,t);const r=[(()=>{const n=u(),t=document.createElement("strong");return t.textContent="Delete this project?",n.appendChild(t),n})(),u("You will not be able to recover it.")];return n(e,r),e})(),(()=>{const t={class:"buttons"},e=l(t);o(e,t);const r=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,r),e})()];return n(t,e),t})()];return n(t,e),t},Ao=()=>{const t=document.createElement("dialog");o(t,{class:"edit-project modal"});const e=[(()=>{const t=document.createElement("form");o(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"input-wrapper"},e=l(t);o(e,t);const r=[(()=>{const n=document.createElement("label");return o(n,{for:"new-project-name"}),n.textContent="Project name:",n})(),(()=>{const n=document.createElement("input");return o(n,{type:"text",name:"new-project-name",id:"new-project-name",maxlength:"20"}),n})()];return n(e,r),e})(),(()=>{const t={class:"buttons"},e=l(t);o(e,t);const r=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,r),e})()];return n(t,e),t})()];return n(t,e),t},uo=()=>{const t=document.createElement("dialog");o(t,{class:"edit-task modal"}),t.dataset.for="edit-task-btn";const e=[(()=>{const t=document.createElement("form");o(t,{action:"",method:"dialog"});const e=[(()=>{const n=u("Edit task");return o(n,{class:"form-title"}),n})(),(()=>{const t={class:"task-title-wrapper"},e=l(t);o(e,t);const r=[(()=>{const n=document.createElement("label");return o(n,{for:"task-title"}),n.textContent="Title",n})(),(()=>{const n=document.createElement("input");return o(n,{class:"input",type:"text",name:"task-title",id:"task-title",minlength:"1",maxlength:"30"}),n})()];return n(e,r),e})(),(()=>{const t=l({class:"task-description-wrapper"}),e=[(()=>{const n=document.createElement("label");return o(n,{for:"task-description"}),n.textContent="Description",n})(),(()=>{const n=document.createElement("textarea");return o(n,{name:"task-description",id:"task-description",cols:"10",rows:"5"}),n})()];return n(t,e),t})(),(()=>{const t={class:"task-grouped-options-wrapper"},e=l(t);o(e,t);const r=[(()=>{const t=l({class:"task-priority-wrapper"}),e=[u("Priority"),(()=>{const t=c({type:"button",class:"task-priority-btn"}),e=[u("High"),Et()];return n(t,e),t})()];return n(t,e),t})(),(()=>{const t=l({class:"task-due-date-wrapper"}),e=[(()=>{const n=document.createElement("label");return o(n,{for:"task-due-date"}),n.textContent="Due date",n})(),(()=>{const n=new Date,t=n.getMonth()+1<10?`0${n.getMonth()+1}`:n.getMonth()+1,e=n.getDate()<10?`0${n.getDate()}`:n.getDate(),r=n.getFullYear(),a=document.createElement("input");return o(a,{class:"input",type:"date",name:"task-due-date",id:"task-due-date",min:`${r}-${t}-${e}`}),a})()];return n(t,e),t})()];return n(e,r),e})(),(()=>{const t={class:"buttons"},e=l(t);o(e,t);const r=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,r),e})()];return n(t,e),t})()];return n(t,e),t},po=()=>{const t=document.createElement("a");o(t,{href:""});const e=[A({src:ct,alt:"Github icon"}),u("Hannah Kim")];return n(t,e),t},mo=()=>{const t=document.createElement("footer"),e=[po()];return n(t,e),t},go=()=>{const t=[A({src:at,alt:"Bulleted list icon",class:"logo"}),d("1","To-Do Manager")],e=document.createElement("header");return n(e,t),e},fo=()=>{const t=document.createElement("dialog");o(t,{class:"reset-program modal"});const e=[(()=>{const t=document.createElement("form");o(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"message"},e=l(t);o(e,t);const r=[(()=>{const n=u(),t=document.createElement("strong");return t.textContent="Reset the program?",n.appendChild(t),n})(),u("All data will be lost and you cannot recover it.")];return n(e,r),e})(),(()=>{const t={class:"buttons"},e=l(t);o(e,t);const r=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,r),e})()];return n(t,e),t})()];return n(t,e),t},Co=()=>{const t=()=>{const t={type:"button",class:"reset"},e=c(t);o(e,t);const r=[A({src:ht,alt:"Reset icon"}),u("Reset program")];return n(e,r),e},e={class:"general-wrapper"},r=i(e);o(r,e);const a=[d("3","General"),(()=>{const e=l({class:"settings-wrapper"}),o=[t()];return n(e,o),e})()];return n(r,a),r},bo=()=>{const t=l({class:"content-wrapper"}),e=[Co()];return n(t,e),t},ho=()=>{const n=[d("2","Settings"),bo()],t=ot("settings",n);return t.style.display="none",t},xo=()=>{const n=[d("2","Today"),$t()];return ot("today",n)},yo=()=>{const e=e=>{const o={type:"button"};o.class="all"===e?`${a(e)} selected`:a(e);const r=c(o),s=[u(t(e))];return n(r,s),r},o=l({class:"filters"}),r=[e("all"),e("this week"),e("this month")];return n(o,r),o},Bo=()=>{const n=[d("2","Upcoming"),yo(),$t()];return ot("upcoming",n)},vo=()=>{const n=[];for(const t of Object.keys(localStorage))"notes"!==t&&JSON.parse(localStorage.getItem(`${t}`)).name&&n.push(JSON.parse(localStorage.getItem(`${t}`)).name);return n},Io=n=>{const t=[];for(const e of Object.keys(localStorage))if("notes"!==e&&JSON.parse(localStorage.getItem(`${e}`)).project===n){const n=le(),o=JSON.parse(localStorage.getItem(`${e}`));n.setTitle(o.title),n.setDescription(o.description),n.setDueDate(o.dueDate),n.setPriority(o.priority),n.setOverdue(o.isOverdue),n.setChecked(o.isChecked),n.setProject(o.project),t.push(n)}return t},ko=n=>"today"===n?"today":"upcoming"===n?"upcoming":"projects"===n?"all":void 0;var wo=e(379),Eo=e.n(wo),So=e(795),jo=e.n(So),Do=e(569),qo=e.n(Do),Lo=e(565),To=e.n(Lo),Yo=e(216),Mo=e.n(Yo),Po=e(589),Wo=e.n(Po),Oo=e(402),No={};No.styleTagTransform=Wo(),No.setAttributes=To(),No.insert=qo().bind(null,"head"),No.domAPI=jo(),No.insertStyleElement=Mo(),Eo()(Oo.Z,No),Oo.Z&&Oo.Z.locals&&Oo.Z.locals;var Uo=e(538),$o={};$o.styleTagTransform=Wo(),$o.setAttributes=To(),$o.insert=qo().bind(null,"head"),$o.domAPI=jo(),$o.insertStyleElement=Mo(),Eo()(Uo.Z,$o),Uo.Z&&Uo.Z.locals&&Uo.Z.locals,localStorage.length<2?(()=>{const t=document.querySelector("body"),e=[go(),Ht(),ie(),xo(),Bo(),ho(),mo(),ao(),so(),uo(),co(),Ao(),lo(),io(),fo()];n(t,e),document.querySelector(".default-content.modal").showModal()})():(localStorage.removeItem("debug"),(()=>{(()=>{const n=vo();for(const t of n){const n=Io(t),e=rt();e.setName(t),n.forEach((n=>e.addTask(n))),Zn(e)}})(),(()=>{for(const n of $n){const t=n.getTasks();for(const n of t){const t=n.getDueDate();Un(t)&&n.setOverdue(!0)}}})();const e=document.querySelector("body"),o=[go(),Ht(),ie(),xo(),Bo(),ho(),mo(),ao(),so(),uo(),co(),Ao(),lo(),io(),fo()];n(e,o),ce(),document.querySelector(".home.page textarea").value=localStorage.getItem("notes"),(()=>{const n=vo();for(const e of n){Ft(t(e),"projects");const n=a(e),o=document.querySelector(`[data-page-name="${n}"]`),r=Rt(a(e));o.appendChild(r)}})(),(()=>{const n=["today","upcoming"];for(const t of n){const n=["priorityDesc"];n.push(ko(t));const e=Jn(n);for(const n of e){if(0===n.length)continue;const e=Ut(n);Zt(t,e),Wt(t,n)}const o=document.querySelector(`.${t}.page .projects`);if(0===o.childElementCount){const n=et("There are no upcoming tasks.",!1);o.appendChild(n)}}})(),(()=>{const n=vo();for(const t of n){const n=Qt(t);tt(n);const e=zn(t).getTasks(),o=Ut(e);Zt(t,o),Wt(t,e)}})()})()),(()=>{const n=document.querySelector(".add-project.modal");n.addEventListener("click",(n=>re(n))),n.addEventListener("focusin",(n=>re(n))),n.addEventListener("focusout",(n=>re(n))),document.querySelector(".add-task.modal").addEventListener("click",(n=>be(n))),document.querySelector(".delete-task.modal").addEventListener("click",(n=>Ee(n))),document.querySelector(".edit-task.modal").addEventListener("click",(n=>Qe(n)));const t=document.querySelector(".edit-project.modal");t.addEventListener("click",(n=>Oe(n))),t.addEventListener("focusin",(n=>Oe(n))),t.addEventListener("focusout",(n=>Oe(n))),document.querySelector(".delete-project.modal").addEventListener("click",(n=>ve(n)));const e=document.querySelector("body");e.addEventListener("click",(n=>{n.target.closest("nav")&&n.target.closest("nav").classList.contains("sidebar")&&(n=>{const t=n.type;for(const e of Object.keys(to))e===t&&to[e](n)})(n),n.target.closest("div")&&n.target.closest("div").classList.contains("filters")&&(n=>{const t=n.type;for(const e of Object.keys(He))e===t&&He[e](n)})(n),n.target.closest("li")&&n.target.closest("li").classList.contains("task")&&(n=>{const t=n.type;for(const e of Object.keys(oo))e===t&&oo[e](n)})(n),n.target.closest("div")&&n.target.closest("div").classList.contains("task-options-wrapper")&&(n=>{const t=n.type;for(const e of Object.keys(ro))e===t&&ro[e](n)})(n),n.target.closest("article")&&n.target.closest("article").classList.contains("project")&&(n=>{const t=n.type;for(const e of Object.keys(Je))e===t&&Je[e](n)})(n),n.target.closest("dialog")&&n.target.closest("dialog").classList.contains("default-content")&&(n=>{const t=n.type;for(const e of Object.keys(xe))e===t&&xe[e](n)})(n),n.target.closest("dialog")&&n.target.closest("dialog").classList.contains("reset-program")&&Ke(n),n.target.closest("main")&&n.target.closest("main").classList.contains("settings")&&(n=>{const t=n.type;for(const e of Object.keys(no))e===t&&no[e](n)})(n)})),e.addEventListener("change",(n=>{n.target.closest("article")&&n.target.closest("article").classList.contains("notes")&&(n=>{const t=n.type;for(const e of Object.keys(Fe))e===t&&Fe[e](n)})(n)}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,