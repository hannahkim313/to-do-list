(()=>{"use strict";var n={538:(n,e,t)=>{t.d(e,{Z:()=>g});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),s=t(667),c=t.n(s),l=new URL(t(510),t.b),d=new URL(t(937),t.b),A=i()(o()),u=c()(l),p=c()(d);A.push([n.id,'/******************************************************************************/\n/* Inspired by: https://www.joshwcomeau.com/css/custom-css-reset/\n/******************************************************************************/\n\n@font-face {\n    font-family: "Source Sans Pro";\n    src: url('+u+') format("ttf");\n}\n    \n@font-face {\n    font-family: "Roboto";\n    src: url('+p+') format("ttf");\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    font-family: "Source Sans Pro", "Roboto", sans-serif;\n\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\n\nimg, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n}\n\ninput, button, textarea, select {\n    font: inherit;\n}\n\np, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n}\n\n#root, #__next {\n    isolation: isolate;\n}',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA,+EAA+E;AAC/E;+EAC+E;;AAE/E;IACI,8BAA8B;IAC9B,0DAA4D;AAChE;;AAEA;IACI,qBAAqB;IACrB,0DAAqD;AACzD;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,oDAAoD;;IAEpD,gBAAgB;IAChB,mCAAmC;AACvC;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:['/******************************************************************************/\n/* Inspired by: https://www.joshwcomeau.com/css/custom-css-reset/\n/******************************************************************************/\n\n@font-face {\n    font-family: "Source Sans Pro";\n    src: url("../fonts/SourceSansPro-Regular.ttf") format("ttf");\n}\n    \n@font-face {\n    font-family: "Roboto";\n    src: url("../fonts/Roboto-Regular.ttf") format("ttf");\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    font-family: "Source Sans Pro", "Roboto", sans-serif;\n\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\n\nimg, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n}\n\ninput, button, textarea, select {\n    font: inherit;\n}\n\np, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n}\n\n#root, #__next {\n    isolation: isolate;\n}'],sourceRoot:""}]);const g=A},402:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'/******************************************************************************/\n/*\n/*   Sections:\n/*\n/*   1.\n/*\n/******************************************************************************/\n\n/******************************************************************************/\n/* Selectors for general elements start here.\n/******************************************************************************/\n\n:root {\n    --color-text-1: #4d4d4d;\n    --color-text-1-inverted: #ffffff;\n\n    --color-brand-1: #847fca;\n    --color-brand-1-a: #9490c9;\n    --color-brand-1-b: #E2E4F6;\n    --color-brand-2: #D4E09B;\n    --color-brand-3: #F4D179;\n    --color-brand-3-a: #e7c46b;\n    --color-brand-3-b: #dbb966;\n    --color-brand-4: #e67a6b;\n\n    --color-modal-1: #4d4d4d50;\n    \n    --color-neutral-1: #f1f1f1;\n    --color-neutral-2: #eaeaea;\n    --color-neutral-3: #e3e3e3;\n    --color-neutral-4: #dbdbdb;\n    --color-neutral-5: #c6c6c6;\n}\n\nbody {\n    color: var(--color-text-1);\n    \n    display: grid;\n    grid-template-columns: 300px 1fr;\n    grid-template-rows: 85px 1fr auto;\n}\n\na {\n    text-decoration: none;\n\n    color: var(--color-text-1);\n}\n\nli {\n    list-style: none;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n/* Selectors for collapsible sections start here. */\n\n.collapsible {\n    display: flex;\n    justify-content: space-between;\n}\n\n.collapsible .collapsible.icon {\n    margin-left: auto;\n\n    transition: all 0.5s ease;\n}\n\n.collapsible.expanded .collapsible.icon {\n    transform: rotate(180deg);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Project" modal start here.\n/******************************************************************************/\n\n.add-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.add-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.add-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.add-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 2px;\n}\n\n.add-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n\n}\n\n.add-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.add-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the header start here.\n/******************************************************************************/\n\nheader {\n    padding: 16px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\nheader .logo {\n    width: 50px;\n}\n\n/******************************************************************************/\n/* Selectors for the sidebar start here.\n/******************************************************************************/\n\n.sidebar {\n    padding: 16px 16px 32px 16px;\n\n    background-color: var(--color-neutral-1);\n\n    overflow-y: auto;\n    \n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 16px;\n}\n\n/* Selectors for the sidebar sections start here. */\n\n.sidebar-sections > li > img {\n    width: 1.5rem;\n}\n\n.sidebar-sections > li > button {\n    width: 100%;\n    \n    padding: 8px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.3s ease;\n}\n\n.sidebar-sections > li > button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.sidebar-sections > li > button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for the individual projects of the sidebar start here. */\n\n.subsections {\n    max-height: 0;\n\n    margin-top: -8px;\n\n    opacity: 0;\n\n    overflow: hidden;\n\n    transition: all 0.3s ease;\n}\n\n.subsections button {\n    width: 100%;\n\n    padding: 8px 8px 8px 40px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    transition: all 0.2s ease;\n}\n\n.subsections button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.subsections button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.subsection {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.subsection img {\n    width: 0.6rem;\n}\n\n.subsections .alerts {\n    font-size: 0.8rem;\n\n    display: flex;\n    gap: 8px;\n}\n\n.subsections .alerts p {\n    padding: 0 8px;\n    \n    color: var(--color-text-1-inverted);\n\n    border-radius: 50%;\n}\n\n.subsections .alerts .overdue {\n    background-color: var(--color-brand-4);\n}\n\n.subsections .alerts .remaining {\n    background-color: var(--color-brand-1-a);\n}\n\n/* Selectors for the "Add project" button start here. */\n\n.add-project-btn {\n    width: 50%;\n\n    padding: 8px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-3);\n    border: none;\n    border-radius: 32px;\n\n    align-self: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project-btn:hover {\n    background-color: var(--color-brand-3-a);\n\n}\n.add-project-btn:active {\n    background-color: var(--color-brand-3-b);\n}\n\n.add-project-btn img {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Selectors for all pages start here.\n/******************************************************************************/\n\n.page {\n    padding: 16px;\n\n    overflow-y: auto;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: grid;\n    grid-template-rows: auto 1fr;\n}\n\n.page h2 {\n    padding: 0 0 16px 0;\n    margin: 16px 32px;\n\n    border-bottom: 1px solid var(--color-text-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n}\n\n/* Selectors for the project filters start here. */\n\n.filters {\n    padding: 32px 16px 16px 32px;\n    \n    grid-row: 2 / 3;\n\n    display: flex;\n    gap: 8px;\n}\n\n.filters button {\n    font-size: 0.8rem;\n\n    padding: 2px 10px;\n\n    background: none;\n    border: 1px solid var(--color-neutral-5);\n    border-radius: 32px;\n\n    transition: all 0.2s ease;\n}\n\n.filters button:hover {\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-neutral-5);\n}\n\n.filters .selected {\n    color: var(--color-text-1-inverted);\n    \n    background-color: var(--color-neutral-5);\n    border: 1px solid transparent;\n    border-radius: 32px;\n}\n\n/* Selectors for the grouped projects start here. */\n\n.page .projects {\n    padding: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .projects button {\n    background: none;\n    border: none;\n}\n\n.page .projects img[src$="svg"] {\n    width: 1.3rem;\n}\n\n/* Selectors for the individual projects starts here. */\n\n.page .project {\n    padding: 16px;\n    \n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto 1fr;\n}\n\n.page .project h3 {\n    padding-bottom: 16px;\n    \n    grid-column: 1 / 2;\n}\n\n/* Selectors for the project options start here. */\n\n.page .options {\n    padding-bottom: 16px;\n    \n    grid-column: 2 / 3;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .options .dropdown-container {\n    position: relative;\n}\n\n.page .options .dropdown-menu {\n    width: 100%;\n    height: auto;\n\n    padding: 4px 0px;\n\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0px 2px 5px var(--color-neutral-5);\n\n    position: absolute;\n    top: 30px;\n    z-index: 1;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown-menu button {\n    width: 100%;\n\n    padding: 4px 8px;\n\n    display: flex;\n    justify-content: flex-start;\n}\n\n.page .options .dropdown-menu button:hover {\n    background-color: var(--color-neutral-1);\n\n}\n.page .options .dropdown-menu button:active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown-menu .selected {\n    background: var(--color-brand-1-b);\n}\n\n.page .options .dropdown {\n    padding: 2px 8px;\n    \n    background-color: var(--color-neutral-1);\n    border-radius: 4px;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown:active {\n    background-color: var(--color-neutral-3);\n}\n\n.page .options .dropdown .input {\n    display: flex;\n    align-items: center;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter) {\n    padding: 4px;\n    \n    transition: all 0.2s ease;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):hover {\n    background-color: var(--color-neutral-1);\n    border-radius: 8px;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):active {\n    background-color: var(--color-neutral-2);\n}\n\n/* Selectors for the project tasks start here. */\n\n.page .tasks {\n    grid-column: 1 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .task {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.page .task .left {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .task .right {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n}\n\n.page .task .right .overdue {\n    font-size: 0.8rem;\n\n    padding: 2px 8px;\n\n    color: white;\n\n    background-color: var(--color-brand-4);\n    border-radius: 8px;\n}\n\n.page .task.checked .left > :not(button),\n.page .task.checked .right > :not(.expand-task) {\n    opacity: 0.5;\n}\n\n.page .task .right .expand-task {\n    padding: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.page .task .right .expand-task:hover {\n    background-color: var(--color-neutral-3);\n    border-radius: 8px;\n}\n\n/* Selectors for empty projects/tasks start here. */\n\n.empty {\n    height: 60px;\n\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    grid-row: 2 / 3;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Home" page start here.\n/******************************************************************************/\n\n.home {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n.home h3 {\n    padding: 16px;\n}\n\n/* Selectors for the overview section start here. */\n\n.overview {\n    padding: 16px;\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n}\n\n/* Selectors for the date section start here. */\n\n.date-container {\n    padding: 16px;\n    \n    display: flex;\n    align-items: flex-end;\n    gap: 16px;\n}\n\n.date-container .num-date {\n    width: 75px;\n    height: 75px;\n\n    font-size: 2rem;\n\n    background-color: var(--color-brand-1-b);\n    border-radius: 2px;\n    border-top-left-radius: 50%;\n    border-bottom-right-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.date-container .full-date {\n    font-size: 1.2rem;\n}\n\n/* Selectors for the tasks section start here. */\n\n.overview-tasks {\n    padding: 16px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n}\n\n.overview-tasks > * {\n    width: 110px;\n    height: 110px;\n\n    text-align: center;\n\n    border-radius: 50%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.overview-tasks h4 {\n    font-size: 1.2rem;\n}\n\n.overview-tasks p {\n    font-size: 0.8rem;\n}\n\n.overview-tasks .completed {\n    border: 8px solid var(--color-brand-2);\n}\n\n.overview-tasks .remaining {\n    border: 8px solid var(--color-brand-3);\n}\n\n.overview-tasks .overdue {\n    border: 8px solid var(--color-brand-4);\n}\n\n/* Selectors for the overview image start here. */\n\n.overview-img-wrapper {\n    height: 100%;\n\n    margin: 16px 0 0 16px;\n\n    overflow: hidden;\n}\n\n.overview-img-wrapper img {\n    width: 100%;\n    height: 100%;\n    \n    object-fit: cover;\n    object-position: 0% 95%;\n\n    border-radius: 8px;\n}\n\n/* Selectors for the notes section start here. */\n\n.notes {\n    padding: 16px;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.notes textarea {\n    height: 100%;\n\n    resize: none;\n\n    margin: 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 8px;\n}\n\n.notes textarea:focus {\n    outline: 2px solid var(--color-text-1);\n}\n\n/******************************************************************************/\n/* Selectors for the "Upcoming" page start here.\n/******************************************************************************/\n\n/* Selectors for the grouped projects start here. */\n\n.upcoming.page .projects {\n    grid-row: 3 / 4;\n}\n\n/******************************************************************************/\n/* Selectors for the footer start here.\n/******************************************************************************/\n\nfooter {\n    padding: 16px;\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    \n    display: flex;\n    justify-content: center;\n}\n\nfooter a {\n    color: var(--color-text-1-inverted);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\nfooter img[src*="github"] {\n    width: 1rem;\n}',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"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",sourcesContent:['/******************************************************************************/\n/*\n/*   Sections:\n/*\n/*   1.\n/*\n/******************************************************************************/\n\n/******************************************************************************/\n/* Selectors for general elements start here.\n/******************************************************************************/\n\n:root {\n    --color-text-1: #4d4d4d;\n    --color-text-1-inverted: #ffffff;\n\n    --color-brand-1: #847fca;\n    --color-brand-1-a: #9490c9;\n    --color-brand-1-b: #E2E4F6;\n    --color-brand-2: #D4E09B;\n    --color-brand-3: #F4D179;\n    --color-brand-3-a: #e7c46b;\n    --color-brand-3-b: #dbb966;\n    --color-brand-4: #e67a6b;\n\n    --color-modal-1: #4d4d4d50;\n    \n    --color-neutral-1: #f1f1f1;\n    --color-neutral-2: #eaeaea;\n    --color-neutral-3: #e3e3e3;\n    --color-neutral-4: #dbdbdb;\n    --color-neutral-5: #c6c6c6;\n}\n\nbody {\n    color: var(--color-text-1);\n    \n    display: grid;\n    grid-template-columns: 300px 1fr;\n    grid-template-rows: 85px 1fr auto;\n}\n\na {\n    text-decoration: none;\n\n    color: var(--color-text-1);\n}\n\nli {\n    list-style: none;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n/* Selectors for collapsible sections start here. */\n\n.collapsible {\n    display: flex;\n    justify-content: space-between;\n}\n\n.collapsible .collapsible.icon {\n    margin-left: auto;\n\n    transition: all 0.5s ease;\n}\n\n.collapsible.expanded .collapsible.icon {\n    transform: rotate(180deg);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Project" modal start here.\n/******************************************************************************/\n\n.add-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.add-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.add-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.add-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 2px;\n}\n\n.add-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n\n}\n\n.add-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.add-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the header start here.\n/******************************************************************************/\n\nheader {\n    padding: 16px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\nheader .logo {\n    width: 50px;\n}\n\n/******************************************************************************/\n/* Selectors for the sidebar start here.\n/******************************************************************************/\n\n.sidebar {\n    padding: 16px 16px 32px 16px;\n\n    background-color: var(--color-neutral-1);\n\n    overflow-y: auto;\n    \n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 16px;\n}\n\n/* Selectors for the sidebar sections start here. */\n\n.sidebar-sections > li > img {\n    width: 1.5rem;\n}\n\n.sidebar-sections > li > button {\n    width: 100%;\n    \n    padding: 8px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.3s ease;\n}\n\n.sidebar-sections > li > button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.sidebar-sections > li > button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for the individual projects of the sidebar start here. */\n\n.subsections {\n    max-height: 0;\n\n    margin-top: -8px;\n\n    opacity: 0;\n\n    overflow: hidden;\n\n    transition: all 0.3s ease;\n}\n\n.subsections button {\n    width: 100%;\n\n    padding: 8px 8px 8px 40px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    transition: all 0.2s ease;\n}\n\n.subsections button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.subsections button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.subsection {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.subsection img {\n    width: 0.6rem;\n}\n\n.subsections .alerts {\n    font-size: 0.8rem;\n\n    display: flex;\n    gap: 8px;\n}\n\n.subsections .alerts p {\n    padding: 0 8px;\n    \n    color: var(--color-text-1-inverted);\n\n    border-radius: 50%;\n}\n\n.subsections .alerts .overdue {\n    background-color: var(--color-brand-4);\n}\n\n.subsections .alerts .remaining {\n    background-color: var(--color-brand-1-a);\n}\n\n/* Selectors for the "Add project" button start here. */\n\n.add-project-btn {\n    width: 50%;\n\n    padding: 8px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-3);\n    border: none;\n    border-radius: 32px;\n\n    align-self: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project-btn:hover {\n    background-color: var(--color-brand-3-a);\n\n}\n.add-project-btn:active {\n    background-color: var(--color-brand-3-b);\n}\n\n.add-project-btn img {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Selectors for all pages start here.\n/******************************************************************************/\n\n.page {\n    padding: 16px;\n\n    overflow-y: auto;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: grid;\n    grid-template-rows: auto 1fr;\n}\n\n.page h2 {\n    padding: 0 0 16px 0;\n    margin: 16px 32px;\n\n    border-bottom: 1px solid var(--color-text-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n}\n\n/* Selectors for the project filters start here. */\n\n.filters {\n    padding: 32px 16px 16px 32px;\n    \n    grid-row: 2 / 3;\n\n    display: flex;\n    gap: 8px;\n}\n\n.filters button {\n    font-size: 0.8rem;\n\n    padding: 2px 10px;\n\n    background: none;\n    border: 1px solid var(--color-neutral-5);\n    border-radius: 32px;\n\n    transition: all 0.2s ease;\n}\n\n.filters button:hover {\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-neutral-5);\n}\n\n.filters .selected {\n    color: var(--color-text-1-inverted);\n    \n    background-color: var(--color-neutral-5);\n    border: 1px solid transparent;\n    border-radius: 32px;\n}\n\n/* Selectors for the grouped projects start here. */\n\n.page .projects {\n    padding: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .projects button {\n    background: none;\n    border: none;\n}\n\n.page .projects img[src$="svg"] {\n    width: 1.3rem;\n}\n\n/* Selectors for the individual projects starts here. */\n\n.page .project {\n    padding: 16px;\n    \n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto 1fr;\n}\n\n.page .project h3 {\n    padding-bottom: 16px;\n    \n    grid-column: 1 / 2;\n}\n\n/* Selectors for the project options start here. */\n\n.page .options {\n    padding-bottom: 16px;\n    \n    grid-column: 2 / 3;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .options .dropdown-container {\n    position: relative;\n}\n\n.page .options .dropdown-menu {\n    width: 100%;\n    height: auto;\n\n    padding: 4px 0px;\n\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0px 2px 5px var(--color-neutral-5);\n\n    position: absolute;\n    top: 30px;\n    z-index: 1;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown-menu button {\n    width: 100%;\n\n    padding: 4px 8px;\n\n    display: flex;\n    justify-content: flex-start;\n}\n\n.page .options .dropdown-menu button:hover {\n    background-color: var(--color-neutral-1);\n\n}\n.page .options .dropdown-menu button:active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown-menu .selected {\n    background: var(--color-brand-1-b);\n}\n\n.page .options .dropdown {\n    padding: 2px 8px;\n    \n    background-color: var(--color-neutral-1);\n    border-radius: 4px;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown:active {\n    background-color: var(--color-neutral-3);\n}\n\n.page .options .dropdown .input {\n    display: flex;\n    align-items: center;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter) {\n    padding: 4px;\n    \n    transition: all 0.2s ease;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):hover {\n    background-color: var(--color-neutral-1);\n    border-radius: 8px;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):active {\n    background-color: var(--color-neutral-2);\n}\n\n/* Selectors for the project tasks start here. */\n\n.page .tasks {\n    grid-column: 1 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .task {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.page .task .left {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .task .right {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n}\n\n.page .task .right .overdue {\n    font-size: 0.8rem;\n\n    padding: 2px 8px;\n\n    color: white;\n\n    background-color: var(--color-brand-4);\n    border-radius: 8px;\n}\n\n.page .task.checked .left > :not(button),\n.page .task.checked .right > :not(.expand-task) {\n    opacity: 0.5;\n}\n\n.page .task .right .expand-task {\n    padding: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.page .task .right .expand-task:hover {\n    background-color: var(--color-neutral-3);\n    border-radius: 8px;\n}\n\n/* Selectors for empty projects/tasks start here. */\n\n.empty {\n    height: 60px;\n\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    grid-row: 2 / 3;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Home" page start here.\n/******************************************************************************/\n\n.home {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n.home h3 {\n    padding: 16px;\n}\n\n/* Selectors for the overview section start here. */\n\n.overview {\n    padding: 16px;\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n}\n\n/* Selectors for the date section start here. */\n\n.date-container {\n    padding: 16px;\n    \n    display: flex;\n    align-items: flex-end;\n    gap: 16px;\n}\n\n.date-container .num-date {\n    width: 75px;\n    height: 75px;\n\n    font-size: 2rem;\n\n    background-color: var(--color-brand-1-b);\n    border-radius: 2px;\n    border-top-left-radius: 50%;\n    border-bottom-right-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.date-container .full-date {\n    font-size: 1.2rem;\n}\n\n/* Selectors for the tasks section start here. */\n\n.overview-tasks {\n    padding: 16px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n}\n\n.overview-tasks > * {\n    width: 110px;\n    height: 110px;\n\n    text-align: center;\n\n    border-radius: 50%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.overview-tasks h4 {\n    font-size: 1.2rem;\n}\n\n.overview-tasks p {\n    font-size: 0.8rem;\n}\n\n.overview-tasks .completed {\n    border: 8px solid var(--color-brand-2);\n}\n\n.overview-tasks .remaining {\n    border: 8px solid var(--color-brand-3);\n}\n\n.overview-tasks .overdue {\n    border: 8px solid var(--color-brand-4);\n}\n\n/* Selectors for the overview image start here. */\n\n.overview-img-wrapper {\n    height: 100%;\n\n    margin: 16px 0 0 16px;\n\n    overflow: hidden;\n}\n\n.overview-img-wrapper img {\n    width: 100%;\n    height: 100%;\n    \n    object-fit: cover;\n    object-position: 0% 95%;\n\n    border-radius: 8px;\n}\n\n/* Selectors for the notes section start here. */\n\n.notes {\n    padding: 16px;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.notes textarea {\n    height: 100%;\n\n    resize: none;\n\n    margin: 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 8px;\n}\n\n.notes textarea:focus {\n    outline: 2px solid var(--color-text-1);\n}\n\n/******************************************************************************/\n/* Selectors for the "Upcoming" page start here.\n/******************************************************************************/\n\n/* Selectors for the grouped projects start here. */\n\n.upcoming.page .projects {\n    grid-row: 3 / 4;\n}\n\n/******************************************************************************/\n/* Selectors for the footer start here.\n/******************************************************************************/\n\nfooter {\n    padding: 16px;\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    \n    display: flex;\n    justify-content: center;\n}\n\nfooter a {\n    color: var(--color-text-1-inverted);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\nfooter img[src*="github"] {\n    width: 1rem;\n}'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var u=t(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var g=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:g,references:1})}i.push(A)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},937:(n,e,t)=>{n.exports=t.p+"fc2b5060f7accec5cf74.ttf"},510:(n,e,t)=>{n.exports=t.p+"df87f53caf449a3b7572.ttf"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const n=(n,e)=>{for(const t of e)n.appendChild(t)},e=n=>{const e=n.split(" ");for(let n=0;n<e.length;n++)e[n]=e[n].charAt(0).toUpperCase()+e[n].slice(1);return e.join(" ")},r=(n,e)=>{for(const[t,r]of Object.entries(e)){const e=t;n.setAttribute(e,r)}},o=n=>n.replaceAll(" ","-"),a=n=>n.replaceAll("-"," "),i=n=>{const e=document.createElement("article");return r(e,n),e},s=n=>{const e=document.createElement("button");return r(e,n),e},c=n=>{const e=document.createElement("div");return r(e,n),e},l=(n,e)=>{const t=document.createElement(`h${n}`);return t.textContent=e,t},d=n=>{const e=document.createElement("img");return r(e,n),e},A=n=>{const e=document.createElement("p");return e.textContent=n,e};function u(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function p(n){return u(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function g(n){u(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function f(n){if(u(1,arguments),!p(n)&&"number"!=typeof n)return!1;var e=g(n);return!isNaN(Number(e))}function m(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function h(n,e){u(2,arguments);var t=g(n).getTime(),r=m(e);return new Date(t+r)}function b(n,e){u(2,arguments);var t=m(e);return h(n,-t)}var C=864e5;function v(n){u(1,arguments);var e=1,t=g(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function y(n){u(1,arguments);var e=g(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=v(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=v(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function w(n){u(1,arguments);var e=y(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=v(t);return r}var x=6048e5,B={};function I(){return B}function E(n,e){var t,r,o,a,i,s,c,l;u(1,arguments);var d=I(),A=m(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=g(n),f=p.getUTCDay(),h=(f<A?7:0)+f-A;return p.setUTCDate(p.getUTCDate()-h),p.setUTCHours(0,0,0,0),p}function k(n,e){var t,r,o,a,i,s,c,l;u(1,arguments);var d=g(n),A=d.getUTCFullYear(),p=I(),f=m(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:p.firstWeekContainsDate)&&void 0!==r?r:null===(c=p.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(A+1,0,f),h.setUTCHours(0,0,0,0);var b=E(h,e),C=new Date(0);C.setUTCFullYear(A,0,f),C.setUTCHours(0,0,0,0);var v=E(C,e);return d.getTime()>=b.getTime()?A+1:d.getTime()>=v.getTime()?A:A-1}function j(n,e){var t,r,o,a,i,s,c,l;u(1,arguments);var d=I(),A=m(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1),p=k(n,e),g=new Date(0);g.setUTCFullYear(p,0,A),g.setUTCHours(0,0,0,0);var f=E(g,e);return f}var S=6048e5;function D(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const T=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return D("yy"===e?r%100:r,e.length)},L=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):D(t+1,2)},M=function(n,e){return D(n.getUTCDate(),e.length)},Y=function(n,e){return D(n.getUTCHours()%12||12,e.length)},P=function(n,e){return D(n.getUTCHours(),e.length)},U=function(n,e){return D(n.getUTCMinutes(),e.length)},q=function(n,e){return D(n.getUTCSeconds(),e.length)},N=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return D(Math.floor(r*Math.pow(10,t-3)),e.length)};var W={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return T(n,e)},Y:function(n,e,t,r){var o=k(n,r),a=o>0?o:1-o;return"YY"===e?D(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):D(a,e.length)},R:function(n,e){return D(y(n),e.length)},u:function(n,e){return D(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return D(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return D(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return L(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return D(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){u(1,arguments);var t=g(n),r=E(t,e).getTime()-j(t,e).getTime();return Math.round(r/S)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):D(o,e.length)},I:function(n,e,t){var r=function(n){u(1,arguments);var e=g(n),t=v(e).getTime()-w(e).getTime();return Math.round(t/x)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):D(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):M(n,e)},D:function(n,e,t){var r=function(n){u(1,arguments);var e=g(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/C)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):D(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return D(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return D(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return D(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return Y(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):P(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):D(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):D(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):U(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):q(n,e)},S:function(n,e){return N(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return z(o);case"XXXX":case"XX":return Z(o);default:return Z(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return z(o);case"xxxx":case"xx":return Z(o);default:return Z(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+O(o,":");default:return"GMT"+Z(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+O(o,":");default:return"GMT"+Z(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return D(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return D((r._originalDate||n).getTime(),e.length)}};function O(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=e||"";return t+String(o)+i+D(a,2)}function z(n,e){return n%60==0?(n>0?"-":"+")+D(Math.abs(n)/60,2):Z(n,e)}function Z(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+D(Math.floor(o/60),2)+t+D(o%60,2)}const F=W;var H=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Q=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const R={p:Q,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return H(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",H(o,e)).replace("{{time}}",Q(a,e))}};function G(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var X=["D","DD"],$=["YY","YYYY"];function J(n){return-1!==X.indexOf(n)}function _(n){return-1!==$.indexOf(n)}function V(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var K={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function nn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const en={date:nn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:nn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:nn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var tn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function rn(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[s]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const on={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:rn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:rn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:rn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:rn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:rn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function an(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,s=a[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(c)?cn(c,(function(n){return n.test(s)})):sn(c,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(l):l,i=t.valueCallback?t.valueCallback(i):i;var d=e.slice(s.length);return{value:i,rest:d}}}function sn(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function cn(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var ln,dn={ordinalNumber:(ln={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(ln.matchPattern);if(!t)return null;var r=t[0],o=n.match(ln.parsePattern);if(!o)return null;var a=ln.valueCallback?ln.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=n.slice(r.length);return{value:a,rest:i}}),era:an({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:an({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:an({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:an({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:an({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const An={code:"en-US",formatDistance:function(n,e,t){var r,o=K[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:en,formatRelative:function(n,e,t,r){return tn[n]},localize:on,match:dn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var un=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,pn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gn=/^'([^]*?)'?$/,fn=/''/g,mn=/[a-zA-Z]/;function hn(n,e,t){var r,o,a,i,s,c,l,d,A,p,h,C,v,y,w,x,B,E;u(2,arguments);var k=String(e),j=I(),S=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:j.locale)&&void 0!==r?r:An,D=m(null!==(a=null!==(i=null!==(s=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(l=t.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:j.firstWeekContainsDate)&&void 0!==i?i:null===(A=j.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==a?a:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=m(null!==(h=null!==(C=null!==(v=null!==(y=null==t?void 0:t.weekStartsOn)&&void 0!==y?y:null==t||null===(w=t.locale)||void 0===w||null===(x=w.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==v?v:j.weekStartsOn)&&void 0!==C?C:null===(B=j.locale)||void 0===B||null===(E=B.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==h?h:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var L=g(n);if(!f(L))throw new RangeError("Invalid time value");var M=G(L),Y=b(L,M),P={firstWeekContainsDate:D,weekStartsOn:T,locale:S,_originalDate:L},U=k.match(pn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,R[e])(n,S.formatLong):n})).join("").match(un).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return bn(r);var a=F[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!_(r)||V(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!J(r)||V(r,e,String(n)),a(Y,r,S.localize,P);if(o.match(mn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return U}function bn(n){var e=n.match(gn);return e?e[1].replace(fn,"'"):n}function Cn(n,e){u(2,arguments);var t=g(n),r=m(e);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function vn(n,e){u(2,arguments);var t=g(n),r=m(e);if(isNaN(r))return new Date(NaN);if(!r)return t;var o=t.getDate(),a=new Date(t.getTime());a.setMonth(t.getMonth()+r+1,0);var i=a.getDate();return o>=i?a:(t.setFullYear(a.getFullYear(),a.getMonth(),o),t)}function yn(n,e){if(u(2,arguments),!e||"object"!=typeof e)return new Date(NaN);var t=e.years?m(e.years):0,r=e.months?m(e.months):0,o=e.weeks?m(e.weeks):0,a=e.days?m(e.days):0,i=e.hours?m(e.hours):0,s=e.minutes?m(e.minutes):0,c=e.seconds?m(e.seconds):0,l=g(n),d=r||t?vn(l,r+12*t):l,A=a||o?Cn(d,a+7*o):d,p=s+60*i,f=c+60*p,h=1e3*f,b=new Date(A.getTime()+h);return b}function wn(n){u(1,arguments);var e=g(n),t=e.getDay();return t}function xn(n,e){u(2,arguments);var t=e-wn(n);return t<=0&&(t+=7),Cn(n,t)}function Bn(n){return u(1,arguments),xn(n,0)}function In(n){return u(1,arguments),xn(n,1)}function En(n){return u(1,arguments),xn(n,2)}function kn(n){return u(1,arguments),xn(n,3)}function jn(n){return u(1,arguments),xn(n,4)}function Sn(n){return u(1,arguments),xn(n,5)}function Dn(n){return u(1,arguments),xn(n,6)}function Tn(n,e){u(2,arguments);var t=m(e);return Cn(n,-t)}function Ln(n,e){u(2,arguments);var t=m(e);return vn(n,-t)}function Mn(n,e){u(2,arguments);var t=wn(n)-e;return t<=0&&(t+=7),Tn(n,t)}function Yn(n){return u(1,arguments),Mn(n,0)}function Pn(n){return u(1,arguments),Mn(n,1)}function Un(n){return u(1,arguments),Mn(n,2)}function qn(n){return u(1,arguments),Mn(n,3)}function Nn(n){return u(1,arguments),Mn(n,4)}function Wn(n){return u(1,arguments),Mn(n,5)}function On(n){return u(1,arguments),Mn(n,6)}function zn(n,e){var t,r,o,a,i,s,c,l;u(1,arguments);var d=I(),A=m(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=g(n),f=p.getDay(),h=(f<A?7:0)+f-A;return p.setDate(p.getDate()-h),p.setHours(0,0,0,0),p}function Zn(n,e,t){u(2,arguments);var r=zn(n,t),o=zn(e,t);return r.getTime()===o.getTime()}function Fn(n,e){u(2,arguments);var t=g(n),r=g(e);return t.getFullYear()===r.getFullYear()&&t.getMonth()===r.getMonth()}const Hn=new Date,Qn=()=>hn(Hn,"LLL d, yyyy"),Rn=n=>hn(yn(Hn,n),"LLL d, yyyy"),Gn=(n,e)=>{const t=yn(Hn,{weeks:e}),r={sunday:hn(Bn(t),"LLL d, yyyy"),monday:hn(In(t),"LLL d, yyyy"),tuesday:hn(En(t),"LLL d, yyyy"),wednesday:hn(kn(t),"LLL d, yyyy"),thursday:hn(jn(t),"LLL d, yyyy"),friday:hn(Sn(t),"LLL d, yyyy"),saturday:hn(Dn(t),"LLL d, yyyy")};for(const[e,t]of Object.entries(r))if(e===n)return t},Xn=(n,e)=>{const t=function(n,e){if(u(2,arguments),!e||"object"!=typeof e)return new Date(NaN);var t=e.years?m(e.years):0,r=e.months?m(e.months):0,o=e.weeks?m(e.weeks):0,a=e.days?m(e.days):0,i=e.hours?m(e.hours):0,s=e.minutes?m(e.minutes):0,c=e.seconds?m(e.seconds):0,l=Tn(Ln(n,r+12*t),a+7*o),d=1e3*(c+60*(s+60*i));return new Date(l.getTime()-d)}(Hn,{weeks:e}),r={sunday:hn(Yn(t),"LLL d, yyyy"),monday:hn(Pn(t),"LLL d, yyyy"),tuesday:hn(Un(t),"LLL d, yyyy"),wednesday:hn(qn(t),"LLL d, yyyy"),thursday:hn(Nn(t),"LLL d, yyyy"),friday:hn(Wn(t),"LLL d, yyyy"),saturday:hn(On(t),"LLL d, yyyy")};for(const[e,t]of Object.entries(r))if(e===n)return t},$n=n=>{const e=Array.from(n),t=e.findIndex((n=>","===n));e.splice(t,1),n=e.join("").split(" ");const r=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"].findIndex((e=>e===n[0])),o=n[1],a=n[2];return new Date(a,r,o)},Jn=[],_n=n=>Jn.push(n),Vn=n=>{let e=0;for(const t of Jn){const r=t.getTasks();if(!r)return e;if(r[0].project===n)return e+r.length;n||(e+=r.length)}return e},Kn=n=>{let e=0;for(const t of Jn){const r=t.getTasks();if(!r)return e;if(r[0].project===n)return e+r.filter((n=>n.checked)).length;n||(e+=r.filter((n=>n.checked)).length)}return e},ne={completed:Kn,overdue:n=>{let e=0;for(const t of Jn){const r=t.getTasks();if(!r)return e;if(r[0].project===n)return e+r.filter((n=>n.overdue&&!n.checked)).length;n||(e+=r.filter((n=>n.overdue&&!n.checked)).length)}return e},remaining:n=>n?Vn(n)-Kn(n):Vn()-Kn()},ee=(n,e)=>{n&&(n=a(n));for(const t of Object.keys(ne))if(t===e)return ne[t](n)},te=n=>{if(n)return n.filter((n=>!1===n.overdue))},re={today:n=>{if(n)return n.filter((n=>n.dueDate===Qn()))},all:te,thisWeek:n=>{if(n)return n.filter((n=>{return!1===n.overdue&&(e=n.dueDate,function(n,e){return u(1,arguments),Zn(n,Date.now(),e)}(e=$n(e)));var e}))},thisMonth:n=>{if(n)return n.filter((n=>{return!1===n.overdue&&(e=n.dueDate,function(n){return u(1,arguments),Fn(Date.now(),n)}(e=$n(e)));var e}))},upcoming:te},oe=n=>{n=(n=>{const e=Array.from(n);for(let n=0;n<e.length-1&&e[n+1];n++)" "===e[n]&&(e[n+1]=e[n+1].toUpperCase());return e.filter((n=>" "!==n)).join("")})(n);const e=[];for(const t of Jn){const r=t.getTasks();for(const t of Object.keys(re))t===n&&e.push(re[t](r))}return e},ae=n=>{const e=n.dataset.pageName;if("empty"===e)return;const t=document.querySelectorAll("body > main");for(const n of t){const t=n.dataset.pageName;n.style.display=t===e?"grid":"none"}},ie=n=>{const e=document.querySelector("body"),t=document.querySelector("footer");e.insertBefore(n,t)},se=(e,t)=>{const a=o(e.toLowerCase()),i=document.createElement("main");return r(i,{class:`${a} page`}),i.dataset.pageName=a,i.style.display="none",n(i,t),i},ce=()=>{let n,e;return{getName:()=>n,getTasks:()=>e,setName:e=>n=e,setTasks:n=>e=n}},le=t.p+"f580f1dab98539152aaf.svg",de=t.p+"96e8b3cf8315d13551ef.svg",Ae=t.p+"18291fddc12bbbd43e48.svg",ue=t.p+"3581a6ffa04f4a694a25.svg",pe=t.p+"c60d10f9969e17a92c30.svg",ge=t.p+"8131ec68ddf3c332ac89.svg",fe=t.p+"826e390e64ac7471c3b8.svg",me=t.p+"bbccdea7353be054b7cd.svg",he=t.p+"82ebe5cd270c9acdebd1.svg",be=t.p+"86261c822015abc70d63.svg",Ce=t.p+"3006533cacbe3f0a9c70.jpg",ve=t.p+"123e48f9e5634f79beb7.svg",ye=t.p+"11888627b5b2c8866427.svg",we=t.p+"cf25268c36eaf3663845.svg",xe=t.p+"605789c7fc6cbee9ef91.svg",Be=t.p+"4803b6b61d18ae6a0b20.svg",Ie=t.p+"5fc28dff1fb7023abdf0.svg",Ee=()=>{const n=d({src:de,alt:"Checked box"});return n.dataset.isChecked="true",n},ke=()=>d({src:Ae,alt:"Click to display content",class:"collapsible icon"}),je=n=>{const e={alt:"Plus icon"};return e.src=n?ye:ve,d(e)},Se=()=>{const n=d({src:Be,alt:"Unchecked box"});return n.dataset.isChecked="false",n},De=e=>{const t=(()=>{let n,e,t,r,o,a,i;return{getTitle:()=>n,getDescription:()=>e,getDueDate:()=>t,getPriority:()=>r,getOverdue:()=>o,getChecked:()=>a,getProject:()=>i,setTitle:e=>n=e,setDescription:n=>e=n,setDueDate:n=>t=n,setPriority:n=>r=n,setOverdue:n=>o=n,setChecked:n=>a=n,setProject:n=>i=n}})();t.setTitle(e.title),t.setDescription(e.description),t.setDueDate(e.dueDate),t.setPriority(e.priority),t.setOverdue(e.overdue),t.setChecked(e.checked),t.setProject(e.project);const o=document.createElement("li"),a=t.getChecked()?"task checked":"task";r(o,{class:a});const i=[(e=>{const t=e.getChecked(),r=e.getTitle(),o=c({class:"left"}),a=[(()=>{const e=s({type:"button"}),r=t?Ee():Se();return n(e,[r]),e})(),t?(()=>{const e=document.createElement("s");e.textContent=r;const t=[e],o=A();return n(o,t),o})():A(r)];return n(o,a),o})(t),(e=>{const t=e.getPriority(),o=e.getDueDate(),a=e.getOverdue(),i=c({class:"right"}),l=[A(o),"low"===t?d({src:me,alt:"Low priority"}):"medium"===t?d({src:he,alt:"Medium priority"}):"high"===t?d({src:pe,alt:"High priority"}):void 0,(()=>{const e=s({type:"button",class:"expand-task"}),t=[ke()];return n(e,t),e})()];return a&&l.unshift((()=>{const n=A("Overdue");return r(n,{class:"overdue"}),n})()),n(i,l),i})(t)];return n(o,i),o},Te=()=>{const n=document.createElement("menu");return r(n,{class:"tasks"}),n},Le=(n,e)=>{if(!e){const n=((n,e)=>{const t=A("There are no tasks.");return r(t,{class:"empty nested"}),t})();return void document.querySelector("footer").previousElementSibling.querySelector(".tasks").appendChild(n)}n=o(n);const t=o(e[0].project),a=document.querySelector(`.${n} [data-project-name='${t}'] .tasks`);for(const n of e){const e=De(n);a.appendChild(e)}},Me=()=>{const e=c({class:"options"}),t=[(()=>{const e=()=>{const n=A("Priority: High to low");return r(n,{class:"input"}),n},t=c({class:"dropdown-container"}),o=[(()=>{const t=s({type:"button",class:"dropdown collapsible"}),r=[e(),ke()];return n(t,r),t})(),(()=>{const e=document.createElement("menu");r(e,{class:"dropdown-menu"});const t=(n=>{const e=[];for(const n of["Priority: High to low","Priority: Low to high","Date: High to low","Date: Low to high"]){const t=s({type:"button",class:"sort-by-filter"}),r=A(n);t.appendChild(r);const o=document.createElement("li");o.appendChild(t),e.push(o)}return e[0].firstElementChild.classList.add("selected"),e})();return n(e,t),e.style.visibility="hidden",e.style.opacity="0",e})()];return n(t,o),t})(),(()=>{const e=s({type:"button"}),t=[je(!1)];return n(e,t),e})(),(()=>{const e=s({type:"button"}),t=[d({src:be,alt:"Click for more options"})];return n(e,t),e})()];return n(e,t),e},Ye=t=>{const r=t?t[0].project:document.querySelector("footer").previousElementSibling.dataset.pageName,a=i({class:"project"}),s=[l("3",e(r)),Me(),Te()];return a.dataset.projectName=o(r),n(a,s),a},Pe=()=>c({class:"projects"}),Ue=(n,e)=>{n=o(n),document.querySelector(`.${n} .projects`).appendChild(e)},qe=n=>{const t=[l("2","Projects"),Pe()],r=e(n),o=se(r,t);return o.className+=" projects",o},Ne=e=>{e||(e="empty");const t=()=>{const t=c({class:"subsection"}),r=[d({src:fe,alt:"Bullet list"})];return"empty"===e?r.push(A("Nothing has been added")):r.push(A(e)),n(t,r),t},r=document.createElement("li"),a=[(()=>{const r=s({type:"button"});r.dataset.pageName=o(e.toLowerCase());const a=[t()];return n(r,a),r})()];return n(r,a),r},We=()=>{const t=t=>{const a=document.createElement("li"),i=[(()=>{const r={type:"button"},a=[t.icon,A(e(t.name))];t.collapsible&&(r.class=`${t.name} collapsible`,a.push(ke()));const i=s(r);return i.dataset.pageName=o(t.name),n(i,a),i})()];return t.collapsible&&i.push((()=>{const e=document.createElement("menu");r(e,{class:"subsections"});const t=[Ne()];return n(e,t),e})()),n(a,i),a},a=document.createElement("nav");r(a,{class:"sidebar"});const i=[(e=>{const o=document.createElement("menu");r(o,{class:"sidebar-sections"});const a=[];for(const n of e)a.push(t(n));return n(o,a),o})([{name:"home",icon:d({src:ge,alt:"Home icon"})},{name:"today",icon:d({src:xe,alt:"Single day calendar icon"})},{name:"upcoming",icon:d({src:Ie,alt:"Multiple days calendar icon"})},{name:"projects",icon:d({src:we,alt:"Folder icon"}),collapsible:!0}]),(()=>{const e=s({type:"button",class:"add-project-btn"}),t=[je(!0),A("Add project")];return n(e,t),e})()];return n(a,i),a},Oe=(n,e)=>{const t=document.querySelector(`.${e} + .subsections`),r=t.querySelector("li");"empty"===r.firstElementChild.dataset.pageName&&r.remove();const o=Ne(n);t.appendChild(o)},ze=e=>{const t=(e,t)=>{const o=A();r(o,{class:e});const a=document.createElement("strong");return a.textContent=t,n(o,[a]),o},o=document.createElement("aside");r(o,{class:"alerts"});const a=ee(e,"overdue"),i=ee(e,"remaining"),s=[];return a>0&&s.push(t("overdue",a)),i>0&&s.push(t("remaining",i)),n(o,s),o},Ze=n=>""===n.value,Fe=n=>{const e=o(n.value.toLowerCase().trim()),t=document.querySelectorAll(".projects + .subsections button");for(const n of t)if(n.dataset.pageName===e)return!0;return!1},He=n=>!Ze(n)&&!Fe(n),Qe=n=>{const e=n.closest(".input-wrapper");if(e.childElementCount<4){const t=()=>Ze(n)?A("Please enter a project name."):Fe(n)?A("This project already exists."):void 0;3===e.childElementCount&&e.lastElementChild.remove(),n.closest("form").style.gap="8px";const r=t();r.style.fontSize="0.7rem",r.style.color="var(--color-brand-4)",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",r)}},Re=n=>{const e=n.querySelectorAll("input");for(const n of e)n.nextElementSibling&&n.nextElementSibling.remove(),n.value="",n.style.borderColor="var(--color-text-1)",n.closest("form").style.gap="16px"},Ge=n=>{const t=n.querySelector("input").value.toLowerCase().trim(),r=ce();r.setName(t),_n(r);const o=r.getName();Oe(e(o),"projects");const a=qe(t);ie(a);const i=Ye();Ue(o,i),Le(o),ae(a),Re(n)},Xe=n=>{const e=n.querySelectorAll("input");for(const n of e){const e=n.style.borderColor;"transparent"===e&&(n.style.borderColor="var(--color-text-1)"),"var(--color-text-1)"===e&&(n.style.borderColor="transparent")}},$e={click:n=>{if(n.target.closest("button")){if(n.target.closest("button").classList.contains("cancel-btn")){const t=n.target.closest("dialog");Re(e=t),e.close()}var e;n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const e=n.target.closest("dialog"),t=e.querySelectorAll("input");for(const r of t)He(r)?Ge(e):(n.preventDefault(),Qe(r))})(n)}},focusin:n=>{if(n.target.closest("form")){const e=n.target.closest("form");Xe(e)}},focusout:n=>{if(n.target.closest("form")){const e=n.target.closest("form");Xe(e)}}},Je=n=>{const e=n.type;for(const t of Object.keys($e))t===e&&$e[t](n)},_e=n=>{document.querySelector(".filters .selected").classList.remove("selected"),(n=>{const e=document.querySelectorAll(`.${n} .project`);for(const n of e)n.remove()})(n.closest("main").dataset.pageName),(n=>{const e=n.getAttribute("class");(n=>{const e=oe(n);for(const n of e){if(!n)return;if(0===n.length)continue;const e=Ye(n);Ue("upcoming",e),Le("upcoming",n)}})(a(e)),n.classList.add("selected")})(n)},Ve={click:n=>{if(n.target.closest("button")&&!n.target.closest("button").classList.contains("selected")){const e=n.target.closest("button");_e(e)}}},Ke=n=>{n.classList.toggle("expanded");const e=n.nextElementSibling;n.classList.contains("expanded")?(e.style.visibility="visible",e.style.opacity="1"):(e.style.visibility="hidden",e.style.opacity="0")},nt={click:n=>{var e;n.target.closest("button")&&n.target.closest("button").classList.contains("dropdown")&&Ke(n.target.closest("button")),n.target.closest("button")&&n.target.closest("button").classList.contains("sort-by-filter")&&((e=n.target.closest("button")).closest("menu").querySelector(".selected").classList.toggle("selected"),e.classList.toggle("selected"),e.closest("div").querySelector(".dropdown").firstElementChild.textContent=e.firstElementChild.textContent,Ke(n.target.closest("div").querySelector(".dropdown"))),n.target.closest("button").className,n.target.closest("button").className}},et={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("add-project-btn")&&document.querySelector(".add-project.modal").showModal(),n.target.closest("button")&&n.target.closest("button").dataset.pageName){(n=>{n.classList.contains("collapsible")?(n=>{n.classList.toggle("expanded");const e=n.nextElementSibling;"0px"===window.getComputedStyle(e).getPropertyValue("max-height")?(e.style.maxHeight="100%",e.style.opacity="1",e.style.marginTop="0"):(e.style.maxHeight="0",e.style.opacity="0",e.style.marginTop="-8px")})(n):n.classList.contains("no-projects-created")||ae(n)})(n.target.closest("button"))}}},tt=()=>{const e=i({class:"overview"}),t=[l("3","Overview"),(()=>{const e=c({class:"date-container"}),t=[(()=>{const n=A(hn(Hn,"d"));return r(n,{class:"num-date"}),n})(),(()=>{const e=c({class:"full-date"}),t=hn(Hn,"EEE"),r=hn(Hn,"LLL"),o=hn(Hn,"yyyy"),a=[A(`${t},`),A(`${r} ${o}`)];return n(e,a),e})()];return n(e,t),e})(),(()=>{const e=c({class:"overview-tasks"}),t=(()=>{const e=[],t=["completed","remaining","overdue"];for(const r of t){const t=i({class:r}),o=[l("4","0"),A("Tasks"),A(r)];n(t,o),e.push(t)}return e})();return n(e,t),e})(),(()=>{const e=c({class:"overview-img-wrapper"}),t=[d({src:Ce,alt:"Aesthetic image"})];return n(e,t),e})()];return n(e,t),e},rt=()=>{const e=i({class:"notes"}),t=[l("3","Notes"),(()=>{const n=document.createElement("textarea");return r(n,{name:"user-notes",id:"user-notes",cols:"30",rows:"10"}),n})()];return n(e,t),e},ot=()=>{const n=[l("2","Home"),tt(),rt()],e=se("home",n);return e.style.display="grid",e},at=()=>{const n=ee(null,"completed");document.querySelector(".overview-tasks .completed h4").textContent=n;const e=ee(null,"overdue");document.querySelector(".overview-tasks .overdue h4").textContent=e;const t=ee(null,"remaining");document.querySelector(".overview-tasks .remaining h4").textContent=t},it=n=>{(n=>{const e="true"===n.dataset.isChecked?Se():Ee();n.parentElement.replaceChild(e,n)})(n.querySelector(".left img")),(n=>{if(n.childElementCount>0){const e=n.firstElementChild.textContent;n.firstElementChild.remove(),n.textContent=e}else{const e=document.createElement("s");e.textContent=n.textContent,n.textContent="",n.appendChild(e)}})(n.querySelector(".left p")),(n=>{n.classList.toggle("checked")})(n)},st={click:n=>{if("IMG"===n.target.nodeName&&n.target.closest("div").classList.contains("left")){const e=n.target,t="true"===e.dataset.isChecked,r=e.parentElement.nextElementSibling,a=t?r.firstElementChild.textContent:r.textContent,i=o(e.closest(".project").firstElementChild.textContent.toLowerCase()),s={isChecked:t,title:a,project:i};(n=>{for(const e of Jn){const t=e.getTasks();if(!t)return;for(const e of t)if(e.title===n){const n=e.checked;e.checked=!n}}})(a),(n=>{const e=document.querySelector(`[data-page-name="${n}"] .alerts`),t=ze(n);e.after(t),e.remove(),at()})(i),(n=>{const e=document.querySelectorAll(`[data-project-name="${n.project}"]`);for(const t of e){const e=n.isChecked?t.querySelectorAll(".task.checked"):t.querySelectorAll(".task");for(const t of e)(t.querySelector(".left p s")&&t.querySelector(".left p s").textContent===n.title||t.querySelector(".left p")&&t.querySelector(".left p ").textContent===n.title)&&it(t)}})(s)}}},ct=[[{title:"Drop off package",description:"Store opens at 10AM",dueDate:Qn(),priority:"high",overdue:!1,checked:!0,project:"errands"},{title:"Buy birthday gift",dueDate:Qn(),priority:"high",overdue:!1,checked:!0,project:"errands"},{title:"Send out postcard",dueDate:Xn("sunday",0),priority:"medium",overdue:!0,overdue:!0,checked:!1,project:"errands"},{title:"Get groceries",dueDate:Qn(),priority:"medium",overdue:!1,checked:!0,project:"errands"},{title:"Meal prep",dueDate:Qn(),priority:"low",overdue:!1,checked:!1,project:"errands"},{title:"Water plants",dueDate:Qn(),priority:"low",overdue:!1,checked:!1,project:"errands"},{title:"Go to gym",description:"\n            Upper body day:\n            bicep curls, overhead tricep extensions, upright row,\n            rear delt fly/pull, overhead shoulder presses, chest presses\n        ",dueDate:Qn(),priority:"low",overdue:!1,checked:!0,project:"errands"}],[{title:"Book Airbnb",description:"Check cancellation policy before booking",dueDate:Qn(),priority:"high",overdue:!1,checked:!0,project:"road trip"},{title:"Schedule doggy daycare",dueDate:Rn({days:4}),priority:"high",overdue:!1,checked:!0,project:"road trip"},{title:"Get car checked",dueDate:Gn("saturday",1),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Finish packing",dueDate:Gn("thursday",3),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Turn off all electronics and lock all doors",dueDate:Gn("friday",3),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Make dinner reservations for the day we arrive",dueDate:Qn(),priority:"medium",overdue:!1,checked:!1,project:"road trip"},{title:"Buy parking pass for national parks/viewpoints",dueDate:Rn({days:4}),priority:"medium",overdue:!1,checked:!0,project:"road trip"},{title:"Buy travel items",dueDate:Rn({days:6}),priority:"low",overdue:!1,checked:!0,project:"road trip"}],[{title:"Confirm vacation time",dueDate:Gn("tuesday",0),priority:"high",overdue:!1,checked:!0,project:"work"},{title:"Introduce new team members",dueDate:Gn("monday",2),priority:"high",overdue:!1,checked:!1,project:"work"},{title:"Gather end-of-week analysis",dueDate:Gn("friday",2),priority:"high",overdue:!1,checked:!1,project:"work"},{title:"Video call Joe",description:"Go over team dynamic and discuss possible changes",dueDate:Xn("wednesday",0),priority:"medium",overdue:!0,overdue:!0,checked:!1,project:"work"}]],lt=()=>{const e=document.createElement("a");r(e,{href:""});const t=[d({src:ue,alt:"Github icon"}),A("Hannah Kim")];return n(e,t),e},dt=()=>{const e=document.createElement("footer"),t=[lt()];return n(e,t),e},At=()=>{const e=[d({src:le,alt:"Bulleted list icon",class:"logo"}),l("1","To-Do Manager")],t=document.createElement("header");return n(t,e),t},ut=()=>{const e=document.createElement("dialog");r(e,{class:"add-project modal"}),e.dataset.for="add-project-btn";const t=[(()=>{const e=document.createElement("form");r(e,{action:"",method:"dialog"});const t=[(()=>{const e={class:"input-wrapper"},t=c(e);r(t,e);const o=[(()=>{const n=document.createElement("label");return r(n,{for:"project-name"}),n.textContent="Project name:",n})(),(()=>{const n=document.createElement("input");return r(n,{type:"text",id:"project-name",maxlength:"20"}),n})()];return n(t,o),t})(),(()=>{const e={class:"buttons"},t=c(e);r(t,e);const o=[(()=>{const n=s({type:"submit",class:"confirm-btn"}),e=A("Confirm");return n.appendChild(e),n})(),(()=>{const n=s({type:"button",class:"cancel-btn"}),e=A("Cancel");return n.appendChild(e),n})()];return n(t,o),t})()];return n(e,t),e})()];return n(e,t),e},pt=()=>{const n=[l("2","Today"),Pe()];return se("today",n)},gt=()=>{const t=t=>{const r={type:"button"};r.class="all"===t?`${o(t)} selected`:o(t);const a=s(r),i=[A(e(t))];return n(a,i),a},r=c({class:"filters"}),a=[t("all"),t("this week"),t("this month")];return n(r,a),r},ft=()=>{const n=[l("2","Upcoming"),gt(),Pe()];return se("upcoming",n)};var mt=t(379),ht=t.n(mt),bt=t(795),Ct=t.n(bt),vt=t(569),yt=t.n(vt),wt=t(565),xt=t.n(wt),Bt=t(216),It=t.n(Bt),Et=t(589),kt=t.n(Et),jt=t(402),St={};St.styleTagTransform=kt(),St.setAttributes=xt(),St.insert=yt().bind(null,"head"),St.domAPI=Ct(),St.insertStyleElement=It(),ht()(jt.Z,St),jt.Z&&jt.Z.locals&&jt.Z.locals;var Dt=t(538),Tt={};Tt.styleTagTransform=kt(),Tt.setAttributes=xt(),Tt.insert=yt().bind(null,"head"),Tt.domAPI=Ct(),Tt.insertStyleElement=It(),ht()(Dt.Z,Tt),Dt.Z&&Dt.Z.locals&&Dt.Z.locals,(()=>{const t=document.querySelector("body"),r=[At(),We(),ot(),pt(),ft(),dt(),ut()];n(t,r),(()=>{for(const n of ct){const e=ce();e.setTasks(n),_n(e)}})(),(n=>{for(const n of["today","upcoming"]){const e=oe(n);for(const t of e){if(0===t.length)continue;const e=Ye(t);Ue(n,e),Le(n,t)}}})(),(()=>{for(const n of ct){const e=n[0].project,t=qe(e);ie(t);const r=Ye(n);Ue(e,r),Le(e,n)}})(),(()=>{for(const n of ct){const t=n[0].project;Oe(e(t),"projects");const r=o(t),a=document.querySelector(`[data-page-name='${r}']`),i=ze(o(t));a.appendChild(i)}})(),at()})(),(()=>{const n=document.querySelector(".add-project.modal");n.addEventListener("click",(n=>Je(n))),n.addEventListener("focusin",(n=>Je(n))),n.addEventListener("focusout",(n=>Je(n))),document.querySelector("body").addEventListener("click",(n=>{n.target.closest("nav")&&n.target.closest("nav").classList.contains("sidebar")&&(n=>{const e=n.type;for(const t of Object.keys(et))t===e&&et[t](n)})(n),n.target.closest("div")&&n.target.closest("div").classList.contains("filters")&&(n=>{const e=n.type;for(const t of Object.keys(Ve))t===e&&Ve[t](n)})(n),n.target.closest("li")&&n.target.closest("li").classList.contains("task")&&(n=>{const e=n.type;for(const t of Object.keys(st))t===e&&st[t](n)})(n),(n.target.closest("button")&&n.target.closest("button").classList.contains("dropdown")||n.target.closest("menu")&&n.target.closest("menu").classList.contains("dropdown-menu"))&&(n=>{const e=n.type;for(const t of Object.keys(nt))t===e&&nt[t](n)})(n)}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,