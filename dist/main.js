(()=>{"use strict";var n={538:(n,e,t)=>{t.d(e,{Z:()=>g});var r=t(537),o=t.n(r),a=t(645),s=t.n(a),i=t(667),c=t.n(i),l=new URL(t(510),t.b),d=new URL(t(937),t.b),A=s()(o()),u=c()(l),p=c()(d);A.push([n.id,'/******************************************************************************/\n/* Inspired by: https://www.joshwcomeau.com/css/custom-css-reset/\n/******************************************************************************/\n\n@font-face {\n    font-family: "Source Sans Pro";\n    src: url('+u+') format("ttf");\n}\n    \n@font-face {\n    font-family: "Roboto";\n    src: url('+p+') format("ttf");\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    font-family: "Source Sans Pro", "Roboto", sans-serif;\n\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\n\nimg, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n}\n\ninput, button, textarea, select {\n    font: inherit;\n}\n\np, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n}\n\n#root, #__next {\n    isolation: isolate;\n}',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA,+EAA+E;AAC/E;+EAC+E;;AAE/E;IACI,8BAA8B;IAC9B,0DAA4D;AAChE;;AAEA;IACI,qBAAqB;IACrB,0DAAqD;AACzD;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,oDAAoD;;IAEpD,gBAAgB;IAChB,mCAAmC;AACvC;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:['/******************************************************************************/\n/* Inspired by: https://www.joshwcomeau.com/css/custom-css-reset/\n/******************************************************************************/\n\n@font-face {\n    font-family: "Source Sans Pro";\n    src: url("../fonts/SourceSansPro-Regular.ttf") format("ttf");\n}\n    \n@font-face {\n    font-family: "Roboto";\n    src: url("../fonts/Roboto-Regular.ttf") format("ttf");\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    font-family: "Source Sans Pro", "Roboto", sans-serif;\n\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\n\nimg, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n}\n\ninput, button, textarea, select {\n    font: inherit;\n}\n\np, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n}\n\n#root, #__next {\n    isolation: isolate;\n}'],sourceRoot:""}]);const g=A},402:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([n.id,'/******************************************************************************/\n/*\n/*   Sections:\n/*\n/*   1.\n/*\n/******************************************************************************/\n\n/******************************************************************************/\n/* Selectors for general elements start here.\n/******************************************************************************/\n\n:root {\n    --color-text-1: #4d4d4d;\n    --color-text-1-inverted: #ffffff;\n\n    --color-brand-1: #847fca;\n    --color-brand-1-a: #9490c9;\n    --color-brand-1-b: #E2E4F6;\n    --color-brand-2: #D4E09B;\n    --color-brand-3: #F4D179;\n    --color-brand-3-a: #e7c46b;\n    --color-brand-3-b: #dbb966;\n    --color-brand-4: #e67a6b;\n\n    --color-modal-1: #4d4d4d50;\n    \n    --color-neutral-1: #f1f1f1;\n    --color-neutral-2: #eaeaea;\n    --color-neutral-3: #e3e3e3;\n    --color-neutral-4: #dbdbdb;\n    --color-neutral-5: #c6c6c6;\n}\n\nbody {\n    color: var(--color-text-1);\n    \n    display: grid;\n    grid-template-columns: 300px 1fr;\n    grid-template-rows: 85px 1fr auto;\n}\n\na {\n    text-decoration: none;\n\n    color: var(--color-text-1);\n}\n\nli {\n    list-style: none;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n/* Selectors for collapsible sections start here. */\n\n.collapsible {\n    display: flex;\n    justify-content: space-between;\n}\n\n.collapsible .collapsible.icon {\n    margin-left: auto;\n\n    transition: all 0.5s ease;\n}\n\n.collapsible.expanded .collapsible.icon {\n    transform: rotate(180deg);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Project" modal start here.\n/******************************************************************************/\n\n.add-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.add-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.add-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.add-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.add-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Task" modal start here.\n/******************************************************************************/\n\n.add-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.add-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.add-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.add-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.add-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.add-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.add-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.add-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.add-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.add-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.add-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.add-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the header start here.\n/******************************************************************************/\n\nheader {\n    padding: 16px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\nheader .logo {\n    width: 50px;\n}\n\n/******************************************************************************/\n/* Selectors for the sidebar start here.\n/******************************************************************************/\n\n.sidebar {\n    padding: 16px 16px 32px 16px;\n\n    background-color: var(--color-neutral-1);\n\n    overflow-y: auto;\n    \n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 16px;\n}\n\n/* Selectors for the sidebar sections start here. */\n\n.sidebar-sections > li > img {\n    width: 1.5rem;\n}\n\n.sidebar-sections > li > button {\n    width: 100%;\n    \n    padding: 8px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.3s ease;\n}\n\n.sidebar-sections > li > button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.sidebar-sections > li > button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for the individual projects of the sidebar start here. */\n\n.subsections {\n    max-height: 0;\n\n    margin-top: -8px;\n\n    opacity: 0;\n\n    overflow: hidden;\n\n    transition: all 0.3s ease;\n}\n\n.subsections button {\n    width: 100%;\n\n    padding: 8px 8px 8px 40px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    transition: all 0.2s ease;\n}\n\n.subsections button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.subsections button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.subsection {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.subsection img {\n    width: 0.6rem;\n}\n\n.subsections .alerts {\n    font-size: 0.8rem;\n\n    display: flex;\n    gap: 8px;\n}\n\n.subsections .alerts p {\n    padding: 1px 9px 0 9px;\n    \n    color: var(--color-text-1-inverted);\n\n    border-radius: 50%;\n}\n\n.subsections .alerts .overdue {\n    background-color: var(--color-brand-4);\n}\n\n.subsections .alerts .remaining {\n    background-color: var(--color-brand-1-a);\n}\n\n/* Selectors for the "Add project" button start here. */\n\n.add-project-btn {\n    width: 50%;\n\n    padding: 8px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-3);\n    border: none;\n    border-radius: 32px;\n\n    align-self: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project-btn:hover {\n    background-color: var(--color-brand-3-a);\n\n}\n.add-project-btn:active {\n    background-color: var(--color-brand-3-b);\n}\n\n.add-project-btn img {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Selectors for all pages start here.\n/******************************************************************************/\n\n.page {\n    padding: 16px;\n\n    overflow-y: auto;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: grid;\n    grid-template-rows: auto 1fr;\n}\n\n.page h2 {\n    padding: 0 0 16px 0;\n    margin: 16px 32px;\n\n    border-bottom: 1px solid var(--color-text-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n}\n\n/* Selectors for the project filters start here. */\n\n.filters {\n    padding: 16px 16px 16px 32px;\n    \n    grid-row: 2 / 3;\n\n    display: flex;\n    gap: 8px;\n}\n\n.filters button {\n    font-size: 0.8rem;\n\n    padding: 2px 10px;\n\n    background: none;\n    border: 1px solid var(--color-neutral-5);\n    border-radius: 32px;\n\n    transition: all 0.2s ease;\n}\n\n.filters button:hover {\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-neutral-5);\n}\n\n.filters .selected {\n    color: var(--color-text-1-inverted);\n    \n    background-color: var(--color-neutral-5);\n    border: 1px solid transparent;\n    border-radius: 32px;\n}\n\n/* Selectors for the grouped projects start here. */\n\n.page .projects {\n    padding: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .projects button {\n    background: none;\n    border: none;\n}\n\n.page .projects img[src$="svg"] {\n    width: 1.3rem;\n}\n\n/* Selectors for the individual projects starts here. */\n\n.page .project {\n    padding: 16px;\n    \n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto 1fr;\n}\n\n.page .project h3 {\n    padding-bottom: 16px;\n    \n    grid-column: 1 / 2;\n}\n\n/* Selectors for the project options start here. */\n\n.page .options {\n    padding-bottom: 16px;\n    \n    grid-column: 2 / 3;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .options .dropdown-wrapper {\n    position: relative;\n}\n\n.page .options .dropdown-menu {\n    width: 100%;\n    height: auto;\n\n    padding: 4px 0;\n\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0 2px 5px var(--color-neutral-5);\n\n    position: absolute;\n    top: 30px;\n    z-index: 1;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown-menu button {\n    width: 100%;\n\n    padding: 4px 8px;\n\n    display: flex;\n    justify-content: flex-start;\n}\n\n.page .options .dropdown-menu button:hover {\n    background-color: var(--color-neutral-1);\n\n}\n.page .options .dropdown-menu button:active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown-menu .selected {\n    background: var(--color-brand-1-b);\n}\n\n.page .options .dropdown {\n    padding: 2px 8px;\n    \n    background-color: var(--color-neutral-1);\n    border-radius: 4px;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown:active {\n    background-color: var(--color-neutral-3);\n}\n\n.page .options .dropdown .input {\n    display: flex;\n    align-items: center;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter) {\n    padding: 4px;\n    \n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):hover {\n    background-color: var(--color-neutral-1);\n    border-radius: 8px;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):active {\n    background-color: var(--color-neutral-2);\n}\n\n/* Selectors for the project tasks start here. */\n\n.page .tasks {\n    grid-column: 1 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .task {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.page .task .left {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .task .right {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n}\n\n.page .task .right .overdue {\n    font-size: 0.8rem;\n\n    padding: 2px 8px;\n\n    color: white;\n\n    background-color: var(--color-brand-4);\n    border-radius: 8px;\n}\n\n.page .task.checked .left > :not(button),\n.page .task.checked .right > :not(.expand-task) {\n    opacity: 0.5;\n}\n\n.page .task .right .expand-task {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .task .right .expand-task:hover {\n    background-color: var(--color-neutral-3);\n\n}\n.page .task .right .expand-task:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for a task\'s expanded details start here. */\n\n.task-details {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 16px;\n\n    animation: slide-up 0.3s ease;\n}\n\n.task-details.expanded {\n    animation: slide-down 0.3s ease;\n}\n\n.task-details .description-wrapper {\n    width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 8px;\n}\n\n.task-details .description-wrapper .task-description {\n    min-height: 100px;\n\n    text-align: left;\n\n    padding: 16px;\n\n    background-color: white;\n    border-radius: 4px;\n}\n\n.task-details .task-options-wrapper {\n    min-width: 9%;\n    height: 100%;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 8px;\n    flex-shrink: 0;\n}\n\n.task-details .task-options-wrapper button {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n}\n\n.task-details .task-options-wrapper button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.task-details .task-options-wrapper button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for empty projects/tasks start here. */\n\n.empty {\n    height: 60px;\n\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    grid-row: 2 / 3;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Home" page start here.\n/******************************************************************************/\n\n.home {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n.home h3 {\n    padding: 16px;\n}\n\n/* Selectors for the overview section start here. */\n\n.overview {\n    padding: 16px;\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n}\n\n/* Selectors for the date section start here. */\n\n.date-wrapper {\n    padding: 16px;\n    \n    display: flex;\n    align-items: flex-end;\n    gap: 16px;\n}\n\n.date-wrapper .num-date {\n    width: 75px;\n    height: 75px;\n\n    font-size: 2rem;\n\n    background-color: var(--color-brand-1-b);\n    border-radius: 2px;\n    border-top-left-radius: 50%;\n    border-bottom-right-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.date-wrapper .full-date {\n    font-size: 1.2rem;\n}\n\n/* Selectors for the tasks section start here. */\n\n.overview-tasks {\n    padding: 16px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n}\n\n.overview-tasks > * {\n    width: 110px;\n    height: 110px;\n\n    text-align: center;\n\n    border-radius: 50%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.overview-tasks h4 {\n    font-size: 1.2rem;\n}\n\n.overview-tasks p {\n    font-size: 0.8rem;\n}\n\n.overview-tasks .completed {\n    border: 8px solid var(--color-brand-2);\n}\n\n.overview-tasks .remaining {\n    border: 8px solid var(--color-brand-3);\n}\n\n.overview-tasks .overdue {\n    border: 8px solid var(--color-brand-4);\n}\n\n/* Selectors for the overview image start here. */\n\n.overview-img-wrapper {\n    height: 100%;\n\n    margin: 16px 0 0 16px;\n\n    overflow: hidden;\n}\n\n.overview-img-wrapper img {\n    width: 100%;\n    height: 100%;\n    \n    object-fit: cover;\n    object-position: 0% 95%;\n\n    border-radius: 8px;\n}\n\n/* Selectors for the notes section start here. */\n\n.notes {\n    padding: 16px;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.notes textarea {\n    height: 100%;\n\n    resize: none;\n\n    margin: 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 8px;\n}\n\n.notes textarea:focus {\n    outline: 2px solid var(--color-text-1);\n}\n\n/******************************************************************************/\n/* Selectors for the "Upcoming" page start here.\n/******************************************************************************/\n\n/* Selectors for the grouped projects start here. */\n\n.upcoming.page .projects {\n    grid-row: 3 / 4;\n}\n\n/******************************************************************************/\n/* Selectors for the footer start here.\n/******************************************************************************/\n\nfooter {\n    padding: 16px;\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    \n    display: flex;\n    justify-content: center;\n}\n\nfooter a {\n    color: var(--color-text-1-inverted);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\nfooter img[src*="github"] {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Animation keyframes start here.\n/******************************************************************************/\n\n@keyframes slide-down {\n    from {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n}\n@keyframes slide-up {\n    from {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n}',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"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",sourcesContent:['/******************************************************************************/\n/*\n/*   Sections:\n/*\n/*   1.\n/*\n/******************************************************************************/\n\n/******************************************************************************/\n/* Selectors for general elements start here.\n/******************************************************************************/\n\n:root {\n    --color-text-1: #4d4d4d;\n    --color-text-1-inverted: #ffffff;\n\n    --color-brand-1: #847fca;\n    --color-brand-1-a: #9490c9;\n    --color-brand-1-b: #E2E4F6;\n    --color-brand-2: #D4E09B;\n    --color-brand-3: #F4D179;\n    --color-brand-3-a: #e7c46b;\n    --color-brand-3-b: #dbb966;\n    --color-brand-4: #e67a6b;\n\n    --color-modal-1: #4d4d4d50;\n    \n    --color-neutral-1: #f1f1f1;\n    --color-neutral-2: #eaeaea;\n    --color-neutral-3: #e3e3e3;\n    --color-neutral-4: #dbdbdb;\n    --color-neutral-5: #c6c6c6;\n}\n\nbody {\n    color: var(--color-text-1);\n    \n    display: grid;\n    grid-template-columns: 300px 1fr;\n    grid-template-rows: 85px 1fr auto;\n}\n\na {\n    text-decoration: none;\n\n    color: var(--color-text-1);\n}\n\nli {\n    list-style: none;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n/* Selectors for collapsible sections start here. */\n\n.collapsible {\n    display: flex;\n    justify-content: space-between;\n}\n\n.collapsible .collapsible.icon {\n    margin-left: auto;\n\n    transition: all 0.5s ease;\n}\n\n.collapsible.expanded .collapsible.icon {\n    transform: rotate(180deg);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Project" modal start here.\n/******************************************************************************/\n\n.add-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.add-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.add-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.add-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.add-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Task" modal start here.\n/******************************************************************************/\n\n.add-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.add-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.add-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.add-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.add-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.add-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.add-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.add-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.add-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.add-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.add-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.add-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the header start here.\n/******************************************************************************/\n\nheader {\n    padding: 16px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\nheader .logo {\n    width: 50px;\n}\n\n/******************************************************************************/\n/* Selectors for the sidebar start here.\n/******************************************************************************/\n\n.sidebar {\n    padding: 16px 16px 32px 16px;\n\n    background-color: var(--color-neutral-1);\n\n    overflow-y: auto;\n    \n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 16px;\n}\n\n/* Selectors for the sidebar sections start here. */\n\n.sidebar-sections > li > img {\n    width: 1.5rem;\n}\n\n.sidebar-sections > li > button {\n    width: 100%;\n    \n    padding: 8px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.3s ease;\n}\n\n.sidebar-sections > li > button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.sidebar-sections > li > button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for the individual projects of the sidebar start here. */\n\n.subsections {\n    max-height: 0;\n\n    margin-top: -8px;\n\n    opacity: 0;\n\n    overflow: hidden;\n\n    transition: all 0.3s ease;\n}\n\n.subsections button {\n    width: 100%;\n\n    padding: 8px 8px 8px 40px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    transition: all 0.2s ease;\n}\n\n.subsections button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.subsections button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.subsection {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.subsection img {\n    width: 0.6rem;\n}\n\n.subsections .alerts {\n    font-size: 0.8rem;\n\n    display: flex;\n    gap: 8px;\n}\n\n.subsections .alerts p {\n    padding: 1px 9px 0 9px;\n    \n    color: var(--color-text-1-inverted);\n\n    border-radius: 50%;\n}\n\n.subsections .alerts .overdue {\n    background-color: var(--color-brand-4);\n}\n\n.subsections .alerts .remaining {\n    background-color: var(--color-brand-1-a);\n}\n\n/* Selectors for the "Add project" button start here. */\n\n.add-project-btn {\n    width: 50%;\n\n    padding: 8px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-3);\n    border: none;\n    border-radius: 32px;\n\n    align-self: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project-btn:hover {\n    background-color: var(--color-brand-3-a);\n\n}\n.add-project-btn:active {\n    background-color: var(--color-brand-3-b);\n}\n\n.add-project-btn img {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Selectors for all pages start here.\n/******************************************************************************/\n\n.page {\n    padding: 16px;\n\n    overflow-y: auto;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: grid;\n    grid-template-rows: auto 1fr;\n}\n\n.page h2 {\n    padding: 0 0 16px 0;\n    margin: 16px 32px;\n\n    border-bottom: 1px solid var(--color-text-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n}\n\n/* Selectors for the project filters start here. */\n\n.filters {\n    padding: 16px 16px 16px 32px;\n    \n    grid-row: 2 / 3;\n\n    display: flex;\n    gap: 8px;\n}\n\n.filters button {\n    font-size: 0.8rem;\n\n    padding: 2px 10px;\n\n    background: none;\n    border: 1px solid var(--color-neutral-5);\n    border-radius: 32px;\n\n    transition: all 0.2s ease;\n}\n\n.filters button:hover {\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-neutral-5);\n}\n\n.filters .selected {\n    color: var(--color-text-1-inverted);\n    \n    background-color: var(--color-neutral-5);\n    border: 1px solid transparent;\n    border-radius: 32px;\n}\n\n/* Selectors for the grouped projects start here. */\n\n.page .projects {\n    padding: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .projects button {\n    background: none;\n    border: none;\n}\n\n.page .projects img[src$="svg"] {\n    width: 1.3rem;\n}\n\n/* Selectors for the individual projects starts here. */\n\n.page .project {\n    padding: 16px;\n    \n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto 1fr;\n}\n\n.page .project h3 {\n    padding-bottom: 16px;\n    \n    grid-column: 1 / 2;\n}\n\n/* Selectors for the project options start here. */\n\n.page .options {\n    padding-bottom: 16px;\n    \n    grid-column: 2 / 3;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .options .dropdown-wrapper {\n    position: relative;\n}\n\n.page .options .dropdown-menu {\n    width: 100%;\n    height: auto;\n\n    padding: 4px 0;\n\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0 2px 5px var(--color-neutral-5);\n\n    position: absolute;\n    top: 30px;\n    z-index: 1;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown-menu button {\n    width: 100%;\n\n    padding: 4px 8px;\n\n    display: flex;\n    justify-content: flex-start;\n}\n\n.page .options .dropdown-menu button:hover {\n    background-color: var(--color-neutral-1);\n\n}\n.page .options .dropdown-menu button:active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown-menu .selected {\n    background: var(--color-brand-1-b);\n}\n\n.page .options .dropdown {\n    padding: 2px 8px;\n    \n    background-color: var(--color-neutral-1);\n    border-radius: 4px;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown:active {\n    background-color: var(--color-neutral-3);\n}\n\n.page .options .dropdown .input {\n    display: flex;\n    align-items: center;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter) {\n    padding: 4px;\n    \n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):hover {\n    background-color: var(--color-neutral-1);\n    border-radius: 8px;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):active {\n    background-color: var(--color-neutral-2);\n}\n\n/* Selectors for the project tasks start here. */\n\n.page .tasks {\n    grid-column: 1 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .task {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.page .task .left {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .task .right {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n}\n\n.page .task .right .overdue {\n    font-size: 0.8rem;\n\n    padding: 2px 8px;\n\n    color: white;\n\n    background-color: var(--color-brand-4);\n    border-radius: 8px;\n}\n\n.page .task.checked .left > :not(button),\n.page .task.checked .right > :not(.expand-task) {\n    opacity: 0.5;\n}\n\n.page .task .right .expand-task {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .task .right .expand-task:hover {\n    background-color: var(--color-neutral-3);\n\n}\n.page .task .right .expand-task:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for a task\'s expanded details start here. */\n\n.task-details {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 16px;\n\n    animation: slide-up 0.3s ease;\n}\n\n.task-details.expanded {\n    animation: slide-down 0.3s ease;\n}\n\n.task-details .description-wrapper {\n    width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 8px;\n}\n\n.task-details .description-wrapper .task-description {\n    min-height: 100px;\n\n    text-align: left;\n\n    padding: 16px;\n\n    background-color: white;\n    border-radius: 4px;\n}\n\n.task-details .task-options-wrapper {\n    min-width: 9%;\n    height: 100%;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 8px;\n    flex-shrink: 0;\n}\n\n.task-details .task-options-wrapper button {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n}\n\n.task-details .task-options-wrapper button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.task-details .task-options-wrapper button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for empty projects/tasks start here. */\n\n.empty {\n    height: 60px;\n\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    grid-row: 2 / 3;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Home" page start here.\n/******************************************************************************/\n\n.home {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n.home h3 {\n    padding: 16px;\n}\n\n/* Selectors for the overview section start here. */\n\n.overview {\n    padding: 16px;\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n}\n\n/* Selectors for the date section start here. */\n\n.date-wrapper {\n    padding: 16px;\n    \n    display: flex;\n    align-items: flex-end;\n    gap: 16px;\n}\n\n.date-wrapper .num-date {\n    width: 75px;\n    height: 75px;\n\n    font-size: 2rem;\n\n    background-color: var(--color-brand-1-b);\n    border-radius: 2px;\n    border-top-left-radius: 50%;\n    border-bottom-right-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.date-wrapper .full-date {\n    font-size: 1.2rem;\n}\n\n/* Selectors for the tasks section start here. */\n\n.overview-tasks {\n    padding: 16px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n}\n\n.overview-tasks > * {\n    width: 110px;\n    height: 110px;\n\n    text-align: center;\n\n    border-radius: 50%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.overview-tasks h4 {\n    font-size: 1.2rem;\n}\n\n.overview-tasks p {\n    font-size: 0.8rem;\n}\n\n.overview-tasks .completed {\n    border: 8px solid var(--color-brand-2);\n}\n\n.overview-tasks .remaining {\n    border: 8px solid var(--color-brand-3);\n}\n\n.overview-tasks .overdue {\n    border: 8px solid var(--color-brand-4);\n}\n\n/* Selectors for the overview image start here. */\n\n.overview-img-wrapper {\n    height: 100%;\n\n    margin: 16px 0 0 16px;\n\n    overflow: hidden;\n}\n\n.overview-img-wrapper img {\n    width: 100%;\n    height: 100%;\n    \n    object-fit: cover;\n    object-position: 0% 95%;\n\n    border-radius: 8px;\n}\n\n/* Selectors for the notes section start here. */\n\n.notes {\n    padding: 16px;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.notes textarea {\n    height: 100%;\n\n    resize: none;\n\n    margin: 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 8px;\n}\n\n.notes textarea:focus {\n    outline: 2px solid var(--color-text-1);\n}\n\n/******************************************************************************/\n/* Selectors for the "Upcoming" page start here.\n/******************************************************************************/\n\n/* Selectors for the grouped projects start here. */\n\n.upcoming.page .projects {\n    grid-row: 3 / 4;\n}\n\n/******************************************************************************/\n/* Selectors for the footer start here.\n/******************************************************************************/\n\nfooter {\n    padding: 16px;\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    \n    display: flex;\n    justify-content: center;\n}\n\nfooter a {\n    color: var(--color-text-1-inverted);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\nfooter img[src*="github"] {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Animation keyframes start here.\n/******************************************************************************/\n\n@keyframes slide-down {\n    from {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n}\n@keyframes slide-up {\n    from {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n}'],sourceRoot:""}]);const i=s},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),s=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(s).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},s=[],i=0;i<n.length;i++){var c=n[i],l=r.base?c[0]+r.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var u=t(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var g=o(p,r);r.byIndex=i,e.splice(i,0,{identifier:A,updater:g,references:1})}s.push(A)}return s}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=t(a[s]);e[i].references--}for(var c=r(n,o),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},937:(n,e,t)=>{n.exports=t.p+"fc2b5060f7accec5cf74.ttf"},510:(n,e,t)=>{n.exports=t.p+"df87f53caf449a3b7572.ttf"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const n=(n,e)=>{for(const t of e)n.appendChild(t)},e=n=>{const e=n.split(" ");for(let n=0;n<e.length;n++)e[n]=e[n].charAt(0).toUpperCase()+e[n].slice(1);return e.join(" ")},r=(n,e)=>{for(const[t,r]of Object.entries(e)){const e=t;n.setAttribute(e,r)}},o=n=>n.replaceAll(" ","-"),a=n=>n.replaceAll("-"," "),s=n=>{const e=document.createElement("article");return r(e,n),e},i=n=>{const e=document.createElement("button");return r(e,n),e},c=n=>{const e=document.createElement("div");return r(e,n),e},l=(n,e)=>{const t=document.createElement(`h${n}`);return t.textContent=e,t},d=n=>{const e=document.createElement("img");return r(e,n),e},A=n=>{const e=document.createElement("p");return e.textContent=n,e};function u(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function p(n){return u(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function g(n){u(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function f(n){if(u(1,arguments),!p(n)&&"number"!=typeof n)return!1;var e=g(n);return!isNaN(Number(e))}function m(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function h(n,e){u(2,arguments);var t=g(n).getTime(),r=m(e);return new Date(t+r)}function C(n,e){u(2,arguments);var t=m(e);return h(n,-t)}var b=864e5;function v(n){u(1,arguments);var e=1,t=g(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function y(n){u(1,arguments);var e=g(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=v(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var s=v(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=s.getTime()?t:t-1}function x(n){u(1,arguments);var e=y(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=v(t);return r}var w=6048e5,B={};function k(){return B}function I(n,e){var t,r,o,a,s,i,c,l;u(1,arguments);var d=k(),A=m(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(s=e.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=g(n),f=p.getUTCDay(),h=(f<A?7:0)+f-A;return p.setUTCDate(p.getUTCDate()-h),p.setUTCHours(0,0,0,0),p}function E(n,e){var t,r,o,a,s,i,c,l;u(1,arguments);var d=g(n),A=d.getUTCFullYear(),p=k(),f=m(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(s=e.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.firstWeekContainsDate)&&void 0!==o?o:p.firstWeekContainsDate)&&void 0!==r?r:null===(c=p.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(A+1,0,f),h.setUTCHours(0,0,0,0);var C=I(h,e),b=new Date(0);b.setUTCFullYear(A,0,f),b.setUTCHours(0,0,0,0);var v=I(b,e);return d.getTime()>=C.getTime()?A+1:d.getTime()>=v.getTime()?A:A-1}function D(n,e){var t,r,o,a,s,i,c,l;u(1,arguments);var d=k(),A=m(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(s=e.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1),p=E(n,e),g=new Date(0);g.setUTCFullYear(p,0,A),g.setUTCHours(0,0,0,0);var f=I(g,e);return f}var S=6048e5;function j(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const T=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return j("yy"===e?r%100:r,e.length)},L=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):j(t+1,2)},M=function(n,e){return j(n.getUTCDate(),e.length)},Y=function(n,e){return j(n.getUTCHours()%12||12,e.length)},P=function(n,e){return j(n.getUTCHours(),e.length)},q=function(n,e){return j(n.getUTCMinutes(),e.length)},W=function(n,e){return j(n.getUTCSeconds(),e.length)},U=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return j(Math.floor(r*Math.pow(10,t-3)),e.length)};var N={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return T(n,e)},Y:function(n,e,t,r){var o=E(n,r),a=o>0?o:1-o;return"YY"===e?j(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):j(a,e.length)},R:function(n,e){return j(y(n),e.length)},u:function(n,e){return j(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return j(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return L(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){u(1,arguments);var t=g(n),r=I(t,e).getTime()-D(t,e).getTime();return Math.round(r/S)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):j(o,e.length)},I:function(n,e,t){var r=function(n){u(1,arguments);var e=g(n),t=v(e).getTime()-x(e).getTime();return Math.round(t/w)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):j(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):M(n,e)},D:function(n,e,t){var r=function(n){u(1,arguments);var e=g(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/b)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):j(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return j(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return j(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return j(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return Y(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):P(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):j(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):j(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):q(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):W(n,e)},S:function(n,e){return U(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return z(o);case"XXXX":case"XX":return Q(o);default:return Q(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return z(o);case"xxxx":case"xx":return Q(o);default:return Q(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+O(o,":");default:return"GMT"+Q(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+O(o,":");default:return"GMT"+Q(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return j(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return j((r._originalDate||n).getTime(),e.length)}};function O(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var s=e||"";return t+String(o)+s+j(a,2)}function z(n,e){return n%60==0?(n>0?"-":"+")+j(Math.abs(n)/60,2):Q(n,e)}function Q(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+j(Math.floor(o/60),2)+t+j(o%60,2)}const Z=N;var H=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},$=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const F={p:$,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return H(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",H(o,e)).replace("{{time}}",$(a,e))}};function R(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var X=["D","DD"],G=["YY","YYYY"];function J(n){return-1!==X.indexOf(n)}function _(n){return-1!==G.indexOf(n)}function V(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var K={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function nn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const en={date:nn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:nn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:nn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var tn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function rn(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var s=n.defaultWidth,i=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[i]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const on={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:rn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:rn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:rn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:rn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:rn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function an(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var s,i=a[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(c)?cn(c,(function(n){return n.test(i)})):sn(c,(function(n){return n.test(i)}));s=n.valueCallback?n.valueCallback(l):l,s=t.valueCallback?t.valueCallback(s):s;var d=e.slice(i.length);return{value:s,rest:d}}}function sn(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function cn(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var ln,dn={ordinalNumber:(ln={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(ln.matchPattern);if(!t)return null;var r=t[0],o=n.match(ln.parsePattern);if(!o)return null;var a=ln.valueCallback?ln.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var s=n.slice(r.length);return{value:a,rest:s}}),era:an({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:an({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:an({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:an({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:an({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const An={code:"en-US",formatDistance:function(n,e,t){var r,o=K[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:en,formatRelative:function(n,e,t,r){return tn[n]},localize:on,match:dn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var un=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,pn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gn=/^'([^]*?)'?$/,fn=/''/g,mn=/[a-zA-Z]/;function hn(n,e,t){var r,o,a,s,i,c,l,d,A,p,h,b,v,y,x,w,B,I;u(2,arguments);var E=String(e),D=k(),S=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:D.locale)&&void 0!==r?r:An,j=m(null!==(a=null!==(s=null!==(i=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(l=t.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==i?i:D.firstWeekContainsDate)&&void 0!==s?s:null===(A=D.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==a?a:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=m(null!==(h=null!==(b=null!==(v=null!==(y=null==t?void 0:t.weekStartsOn)&&void 0!==y?y:null==t||null===(x=t.locale)||void 0===x||null===(w=x.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==v?v:D.weekStartsOn)&&void 0!==b?b:null===(B=D.locale)||void 0===B||null===(I=B.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==h?h:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var L=g(n);if(!f(L))throw new RangeError("Invalid time value");var M=R(L),Y=C(L,M),P={firstWeekContainsDate:j,weekStartsOn:T,locale:S,_originalDate:L},q=E.match(pn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,F[e])(n,S.formatLong):n})).join("").match(un).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Cn(r);var a=Z[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!_(r)||V(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!J(r)||V(r,e,String(n)),a(Y,r,S.localize,P);if(o.match(mn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return q}function Cn(n){var e=n.match(gn);return e?e[1].replace(fn,"'"):n}function bn(n,e){u(2,arguments);var t=g(n),r=m(e);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function vn(n,e){u(2,arguments);var t=g(n),r=m(e);if(isNaN(r))return new Date(NaN);if(!r)return t;var o=t.getDate(),a=new Date(t.getTime());a.setMonth(t.getMonth()+r+1,0);var s=a.getDate();return o>=s?a:(t.setFullYear(a.getFullYear(),a.getMonth(),o),t)}function yn(n,e){if(u(2,arguments),!e||"object"!=typeof e)return new Date(NaN);var t=e.years?m(e.years):0,r=e.months?m(e.months):0,o=e.weeks?m(e.weeks):0,a=e.days?m(e.days):0,s=e.hours?m(e.hours):0,i=e.minutes?m(e.minutes):0,c=e.seconds?m(e.seconds):0,l=g(n),d=r||t?vn(l,r+12*t):l,A=a||o?bn(d,a+7*o):d,p=i+60*s,f=c+60*p,h=1e3*f,C=new Date(A.getTime()+h);return C}function xn(n){u(1,arguments);var e=g(n),t=e.getDay();return t}function wn(n,e){u(2,arguments);var t=e-xn(n);return t<=0&&(t+=7),bn(n,t)}function Bn(n){return u(1,arguments),wn(n,0)}function kn(n){return u(1,arguments),wn(n,1)}function In(n){return u(1,arguments),wn(n,2)}function En(n){return u(1,arguments),wn(n,3)}function Dn(n){return u(1,arguments),wn(n,4)}function Sn(n){return u(1,arguments),wn(n,5)}function jn(n){return u(1,arguments),wn(n,6)}function Tn(n,e){u(2,arguments);var t=m(e);return bn(n,-t)}function Ln(n,e){u(2,arguments);var t=m(e);return vn(n,-t)}function Mn(n,e){u(2,arguments);var t=xn(n)-e;return t<=0&&(t+=7),Tn(n,t)}function Yn(n){return u(1,arguments),Mn(n,0)}function Pn(n){return u(1,arguments),Mn(n,1)}function qn(n){return u(1,arguments),Mn(n,2)}function Wn(n){return u(1,arguments),Mn(n,3)}function Un(n){return u(1,arguments),Mn(n,4)}function Nn(n){return u(1,arguments),Mn(n,5)}function On(n){return u(1,arguments),Mn(n,6)}function zn(n,e){var t,r,o,a,s,i,c,l;u(1,arguments);var d=k(),A=m(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(s=e.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=g(n),f=p.getDay(),h=(f<A?7:0)+f-A;return p.setDate(p.getDate()-h),p.setHours(0,0,0,0),p}function Qn(n,e,t){u(2,arguments);var r=zn(n,t),o=zn(e,t);return r.getTime()===o.getTime()}function Zn(n,e){u(2,arguments);var t=g(n),r=g(e);return t.getFullYear()===r.getFullYear()&&t.getMonth()===r.getMonth()}const Hn=new Date,$n=()=>hn(Hn,"LLL d, yyyy"),Fn=n=>hn(yn(Hn,n),"LLL d, yyyy"),Rn=(n,e)=>{const t=yn(Hn,{weeks:e}),r={sunday:hn(Bn(t),"LLL d, yyyy"),monday:hn(kn(t),"LLL d, yyyy"),tuesday:hn(In(t),"LLL d, yyyy"),wednesday:hn(En(t),"LLL d, yyyy"),thursday:hn(Dn(t),"LLL d, yyyy"),friday:hn(Sn(t),"LLL d, yyyy"),saturday:hn(jn(t),"LLL d, yyyy")};for(const[e,t]of Object.entries(r))if(e===n)return t},Xn=(n,e)=>{const t=function(n,e){if(u(2,arguments),!e||"object"!=typeof e)return new Date(NaN);var t=e.years?m(e.years):0,r=e.months?m(e.months):0,o=e.weeks?m(e.weeks):0,a=e.days?m(e.days):0,s=e.hours?m(e.hours):0,i=e.minutes?m(e.minutes):0,c=e.seconds?m(e.seconds):0,l=Tn(Ln(n,r+12*t),a+7*o),d=1e3*(c+60*(i+60*s));return new Date(l.getTime()-d)}(Hn,{weeks:e}),r={sunday:hn(Yn(t),"LLL d, yyyy"),monday:hn(Pn(t),"LLL d, yyyy"),tuesday:hn(qn(t),"LLL d, yyyy"),wednesday:hn(Wn(t),"LLL d, yyyy"),thursday:hn(Un(t),"LLL d, yyyy"),friday:hn(Nn(t),"LLL d, yyyy"),saturday:hn(On(t),"LLL d, yyyy")};for(const[e,t]of Object.entries(r))if(e===n)return t},Gn=n=>{const e=Array.from(n),t=e.findIndex((n=>","===n));e.splice(t,1),n=e.join("").split(" ");const r=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"].findIndex((e=>e===n[0])),o=n[1],a=n[2];return new Date(a,r,o)},Jn=[],_n=n=>Jn.push(n),Vn=n=>{for(const e of Jn)if(e.getName().toLowerCase()===n)return e},Kn=n=>{let e=0;for(const t of Jn){const r=t.getTasks();if(!r)return e;if(n||(e+=r.length),r[0].getProject()===n)return e+r.length}return e},ne=n=>{let e=0;for(const t of Jn){const r=t.getTasks();if(!r)return e;if(n||(e+=r.filter((n=>n.getChecked())).length),r[0].getProject()===n)return e+r.filter((n=>n.getChecked())).length}return e},ee={completed:ne,overdue:n=>{let e=0;for(const t of Jn){const r=t.getTasks();if(!r)return e;if(n||(e+=r.filter((n=>n.getOverdue()&&!n.getChecked())).length),r[0].getProject()===n)return e+r.filter((n=>n.getOverdue()&&!n.getChecked())).length}return e},remaining:n=>n?Kn(n)-ne(n):Kn()-ne()},te=(n,e)=>{n&&(n=a(n));for(const t of Object.keys(ee))if(t===e)return ee[t](n)},re=n=>"low"===n?1:"medium"===n?2:"high"===n?3:void 0,oe={today:n=>{if(n)return n.filter((n=>n.getDueDate()===$n()))},upcoming:n=>{if(n)return n.filter((n=>!1===n.getOverdue()))},all:n=>{if(n)return n},thisWeek:n=>{if(n)return n.filter((n=>{return!1===n.getOverdue()&&(e=n.getDueDate(),function(n,e){return u(1,arguments),Qn(n,Date.now(),e)}(e=Gn(e)));var e}))},thisMonth:n=>{if(n)return n.filter((n=>{return!1===n.getOverdue()&&(e=n.getDueDate(),function(n){return u(1,arguments),Zn(Date.now(),n)}(e=Gn(e)));var e}))},priorityAsc:n=>{if(n){const e=(n,e)=>{const t=Gn(n.getDueDate()),r=Gn(e.getDueDate()),o=re(n.getPriority()),a=re(e.getPriority());return o===a?t<r?-1:1:o-a};return n.sort(((n,t)=>e(n,t))),n}},priorityDesc:n=>{if(n){const e=(n,e)=>{const t=Gn(n.getDueDate()),r=Gn(e.getDueDate()),o=re(n.getPriority()),a=re(e.getPriority());return o===a?t<r?-1:1:a-o};return n.sort(((n,t)=>e(n,t))),n}},dateAsc:n=>{if(n){const e=(n,e)=>{const t=Gn(n.getDueDate()),r=Gn(e.getDueDate()),o=re(n.getPriority()),a=re(e.getPriority());return n.getDueDate()===e.getDueDate()?o>a?-1:1:t-r};return n.sort(((n,t)=>e(n,t))),n}},dateDesc:n=>{if(n){const e=(n,e)=>{const t=Gn(n.getDueDate()),r=Gn(e.getDueDate()),o=re(n.getPriority()),a=re(e.getPriority());return n.getDueDate()===e.getDueDate()?o>a?-1:1:r-t};return n.sort(((n,t)=>e(n,t))),n}}},ae=n=>{const e=[];for(const t of Jn){const r=t.getTasks();let o;for(const e of n)o=oe[e](r);e.push(o)}return e},se=n=>{const e=n.dataset.pageName;if("empty"===e)return;const t=document.querySelectorAll("body > main");for(const n of t){const t=n.dataset.pageName;n.style.display=t===e?"grid":"none"}},ie=n=>{const e=document.querySelector("body"),t=document.querySelector("footer");e.insertBefore(n,t)},ce=(e,t)=>{const a=o(e.toLowerCase()),s=document.createElement("main");return r(s,{class:`${a} page`}),s.dataset.pageName=a,s.style.display="none",n(s,t),s},le=()=>{let n,e=[];return{getName:()=>n,getTasks:()=>e,setName:e=>n=e,addTask:n=>e.push(n)}},de=t.p+"f580f1dab98539152aaf.svg",Ae=t.p+"96e8b3cf8315d13551ef.svg",ue=t.p+"18291fddc12bbbd43e48.svg",pe=t.p+"3581a6ffa04f4a694a25.svg",ge=t.p+"c60d10f9969e17a92c30.svg",fe=t.p+"8131ec68ddf3c332ac89.svg",me=t.p+"826e390e64ac7471c3b8.svg",he=t.p+"bbccdea7353be054b7cd.svg",Ce=t.p+"82ebe5cd270c9acdebd1.svg",be=t.p+"86261c822015abc70d63.svg",ve=t.p+"3006533cacbe3f0a9c70.jpg",ye=t.p+"cafa4f878e6652771a4e.svg",xe=t.p+"123e48f9e5634f79beb7.svg",we=t.p+"11888627b5b2c8866427.svg",Be=t.p+"cf25268c36eaf3663845.svg",ke=t.p+"605789c7fc6cbee9ef91.svg",Ie=t.p+"622cff1ac70b0f1d1490.svg",Ee=t.p+"4803b6b61d18ae6a0b20.svg",De=t.p+"5fc28dff1fb7023abdf0.svg",Se=()=>{const n=d({src:Ae,alt:"Checked box"});return n.dataset.isChecked="true",n},je=()=>d({src:ue,alt:"Click to display content",class:"collapsible icon"}),Te=()=>d({src:ge,alt:"High priority"}),Le=()=>d({src:he,alt:"Low priority"}),Me=()=>d({src:Ce,alt:"Medium priority"}),Ye=n=>{const e={alt:"Plus icon"};return e.src=n?we:xe,d(e)},Pe=()=>{const n=d({src:Ee,alt:"Unchecked box"});return n.dataset.isChecked="false",n},qe=e=>{const t=document.createElement("li"),o=e.getChecked()?"task checked":"task";r(t,{class:`collapsible ${o}`});const a=[(()=>{const t=e.getChecked(),r=e.getTitle().charAt(0).toUpperCase()+e.getTitle().slice(1),o=c({class:"left"}),a=[(()=>{const e=i({type:"button"}),r=t?Se():Pe();return n(e,[r]),e})(),t?(()=>{const e=document.createElement("s");e.textContent=r;const t=[e],o=A();return n(o,t),o})():A(r)];return n(o,a),o})(),(()=>{const t=e.getPriority(),o=e.getDueDate(),a=e.getOverdue(),s=c({class:"right"}),l=[A(o),"low"===t?Le():"medium"===t?Me():"high"===t?Te():void 0,(()=>{const e=i({type:"button",class:"expand-task"}),t=[je()];return n(e,t),e})()];return a&&l.unshift((()=>{const n=A("Overdue");return r(n,{class:"overdue"}),n})()),n(s,l),s})()];return n(t,a),t},We=()=>{const n=document.createElement("menu");return r(n,{class:"tasks"}),n},Ue=(n,e)=>{if(!e){const n=((n,e)=>{const t=A("There are no tasks.");return r(t,{class:"empty nested"}),t})();return void document.querySelector("footer").previousElementSibling.querySelector(".tasks").appendChild(n)}n=o(n).toLowerCase();const t=o(e[0].getProject()),a=document.querySelector(`.${n}.page [data-project-name="${t}"] .tasks`);for(const n of e){const e=qe(n);a.appendChild(e)}},Ne=(n,e)=>{n=o(n).toLowerCase();const t=o(e[0].getProject()),r=document.querySelector(`.${n}.page [data-project-name="${t}"] .tasks`),a=r.querySelectorAll(".task");for(const n of a)n.remove();for(const n of e){const e=qe(n);r.appendChild(e)}},Oe=()=>{const e=c({class:"options"}),t=[(()=>{const e=()=>{const n=A("Priority: High to low");return r(n,{class:"input"}),n},t=c({class:"dropdown-wrapper"}),o=[(()=>{const t=i({type:"button",class:"dropdown collapsible"}),r=[e(),je()];return n(t,r),t})(),(()=>{const e=document.createElement("menu");r(e,{class:"dropdown-menu"});const t=(n=>{const e=[];for(const n of["Priority: High to low","Priority: Low to high","Date: Newest to oldest","Date: Oldest to newest"]){const t=i({type:"button",class:"sort-by-filter"}),r=A(n);t.appendChild(r);const o=document.createElement("li");o.appendChild(t),e.push(o)}return e[0].firstElementChild.classList.add("selected"),e})();return n(e,t),e.style.visibility="hidden",e.style.opacity="0",e})()];return n(t,o),t})(),(()=>{const e=i({type:"button",class:"add-task-btn"}),t=[Ye(!1)];return n(e,t),e})(),(()=>{const e=i({type:"button"}),t=[d({src:be,alt:"Click for more options"})];return n(e,t),e})()];return n(e,t),e},ze=t=>{const r=t?t[0].getProject():document.querySelector("footer").previousElementSibling.dataset.pageName,i=s({class:"project"}),c=[l("3",e(a(r))),Oe(),We()];return i.dataset.projectName=o(r),n(i,c),i},Qe=()=>c({class:"projects"}),Ze=(n,e)=>{n=o(n),document.querySelector(`.${n} .projects`).appendChild(e)},He=n=>{const e=[],t=n.closest("button").firstElementChild.textContent;"Priority: High to low"===t&&e.push("priorityDesc"),"Priority: Low to high"===t&&e.push("priorityAsc"),"Date: Newest to oldest"===t&&e.push("dateDesc"),"Date: Oldest to newest"===t&&e.push("dateAsc");const r=n.closest("main").dataset.pageName;if("today"===r&&e.push("today"),"upcoming"===r){const t=n.closest("main").querySelector(".filters .selected").firstElementChild.textContent.toLowerCase();"all"===t?e.push("upcoming"):e.push((n=>{const e=Array.from(n);for(let n=0;n<e.length-1&&e[n+1];n++)" "===e[n]&&(e[n+1]=e[n+1].toUpperCase());return e.filter((n=>" "!==n)).join("")})(t))}return e},$e=n=>{const t=[l("2","Projects"),Qe()],r=e(n),o=ce(r,t);return o.className+=" projects",o},Fe=e=>{e||(e="empty");const t=()=>{const t=c({class:"subsection"}),r=[d({src:me,alt:"Bullet list"})];return"empty"===e?r.push(A("Nothing has been added")):r.push(A(e)),n(t,r),t},r=document.createElement("li"),a=[(()=>{const r=i({type:"button"});r.dataset.pageName=o(e.toLowerCase());const a=[t()];return n(r,a),r})()];return n(r,a),r},Re=()=>{const t=t=>{const a=document.createElement("li"),s=[(()=>{const r={type:"button"},a=[t.icon,A(e(t.name))];t.collapsible&&(r.class=`${t.name} collapsible`,a.push(je()));const s=i(r);return s.dataset.pageName=o(t.name),n(s,a),s})()];return t.collapsible&&s.push((()=>{const e=document.createElement("menu");r(e,{class:"subsections"});const t=[Fe()];return n(e,t),e})()),n(a,s),a},a=document.createElement("nav");r(a,{class:"sidebar"});const s=[(e=>{const o=document.createElement("menu");r(o,{class:"sidebar-sections"});const a=[];for(const n of e)a.push(t(n));return n(o,a),o})([{name:"home",icon:d({src:fe,alt:"Home icon"})},{name:"today",icon:d({src:ke,alt:"Single day calendar icon"})},{name:"upcoming",icon:d({src:De,alt:"Multiple days calendar icon"})},{name:"projects",icon:d({src:Be,alt:"Folder icon"}),collapsible:!0}]),(()=>{const e=i({type:"button",class:"add-project-btn"}),t=[Ye(!0),A("Add project")];return n(e,t),e})()];return n(a,s),a},Xe=(n,e)=>{const t=document.querySelector(`.${e} + .subsections`),r=t.querySelector("li");"empty"===r.firstElementChild.dataset.pageName&&r.remove();const o=Fe(n);t.appendChild(o)},Ge=e=>{const t=(e,t)=>{const o=A();r(o,{class:e});const a=document.createElement("strong");return a.textContent=t,n(o,[a]),o},o=document.createElement("aside");r(o,{class:"alerts"});const a=te(e,"overdue"),s=te(e,"remaining"),i=[];return a>0&&i.push(t("overdue",a)),s>0&&i.push(t("remaining",s)),n(o,i),o},Je=n=>""===n.value,_e=n=>{const e=o(n.value.toLowerCase().trim()),t=document.querySelectorAll(".projects + .subsections button");for(const n of t)if(n.dataset.pageName===e)return!0;return!1},Ve=n=>!Je(n)&&!_e(n),Ke=n=>{const e=n.closest(".input-wrapper");if(e.childElementCount<4){const t=()=>Je(n)?A("Please enter a project name."):_e(n)?A("This project already exists."):void 0;3===e.childElementCount&&e.lastElementChild.remove(),n.closest("form").style.gap="8px";const r=t();r.style.fontSize="0.7rem",r.style.color="var(--color-brand-4)",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",r)}},nt=n=>{const e=n.querySelectorAll("input");for(const n of e)n.nextElementSibling&&n.nextElementSibling.remove(),n.value=null,n.style.borderColor="var(--color-text-1)",n.closest("form").style.gap="16px"},et=n=>{const t=n.querySelector("input").value.toLowerCase().trim(),r=le();r.setName(t),_n(r);const o=r.getName();Xe(e(o),"projects");const a=$e(t);ie(a);const s=ze();Ze(o,s),Ue(o),se(a),nt(n)},tt=n=>{const e=n.querySelectorAll("input");for(const n of e){const e=n.style.borderColor;"transparent"===e&&(n.style.borderColor="var(--color-text-1)"),"var(--color-text-1)"===e&&(n.style.borderColor="transparent")}},rt={click:n=>{var e;n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")&&(e=n.target.closest("dialog"),nt(e),e.close()),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const e=n.target.closest("dialog"),t=e.querySelectorAll("input");for(const r of t)Ve(r)?et(e):(n.preventDefault(),Ke(r))})(n)},focusin:n=>{if(n.target.closest("form")){const e=n.target.closest("form");tt(e)}},focusout:n=>{if(n.target.closest("form")){const e=n.target.closest("form");tt(e)}}},ot=n=>{const e=n.type;for(const t of Object.keys(rt))t===e&&rt[t](n)},at=()=>{let n,e,t,r,o,a,s;return{getTitle:()=>n,getDescription:()=>e,getDueDate:()=>t,getPriority:()=>r,getOverdue:()=>o,getChecked:()=>a,getProject:()=>s,setTitle:e=>n=e,setDescription:n=>e=n,setDueDate:n=>t=n,setPriority:n=>r=n,setOverdue:n=>o=n,setChecked:n=>a=n,setProject:n=>s=n}},st=n=>{const e=n.querySelectorAll(".input");for(const n of e)n.value=null,n.style.borderColor="transparent",n.nextElementSibling&&n.nextElementSibling.remove()},it=n=>""===n.value,ct=n=>{if("task-title"===n.id){const e=n.closest("form").querySelector(".form-title").textContent.toLowerCase().slice(12),t=Vn(e).getTasks();for(const e of t)if(e.getTitle().toLowerCase()===n.value.toLowerCase())return!0}return!1},lt=(n,e)=>""===n.value||ct(n)?((n=>{const e=n.closest("div");3===e.childElementCount&&e.lastElementChild.remove();const t=(n=>it(n)&&"task-title"===n.id?A("Please enter a task name."):it(n)&&"task-due-date"===n.id?A("Please select a date."):ct(n)?A("This task already exists in this project."):void 0)(n);t.style.fontSize="0.7rem",t.style.color="var(--color-brand-4)",t.style.marginTop="3px",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",t)})(n),e.preventDefault(),0):((n=>{n.nextElementSibling&&(n.style.border="1.5px solid transparent",n.nextElementSibling.remove())})(n),1),dt={click:n=>{var t;n.target.closest("button")&&n.target.closest("button").classList.contains("add-task-btn")&&((n=>{const t=e(a(n.dataset.projectName)),o=A(`Add task to ${t}`);r(o,{class:"form-title"});const s=document.querySelector(".add-task.modal form");s.firstElementChild.classList.contains("form-title")&&s.firstElementChild.remove(),s.insertBefore(o,s.firstElementChild)})(n.target.closest("article")),document.querySelector(".add-task.modal").showModal()),n.target.closest("button")&&n.target.closest("button").classList.contains("task-priority-btn")&&(n=>{n.lastElementChild.remove();const e=n.firstElementChild.textContent;if("Low"===e){const e=Me();n.appendChild(e),n.firstElementChild.textContent="Medium"}if("Medium"===e){const e=Te();n.appendChild(e),n.firstElementChild.textContent="High"}if("High"===e){const e=Le();n.appendChild(e),n.firstElementChild.textContent="Low"}})(n.target.closest("button")),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const e=n.target.closest("dialog"),t=e.querySelectorAll(".input");let r=0;for(const e of t)r+=lt(e,n);r===t.length&&(n=>{const e=at(),t=n.querySelector("#task-title").value.toLowerCase();e.setTitle(t.charAt(0).toUpperCase()+t.slice(1));const r=n.querySelector("#task-description").value.toLowerCase();e.setDescription(r);const a=n.querySelector("#task-due-date").value.split("-"),s=a[0],i="0"===a[1].charAt(0)?a[1].slice(1):a[1],c="0"===a[2].charAt(0)?a[2].slice(1):a[2],l=`${d=i,["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][d-1]} ${c}, ${s}`;var d;e.setDueDate(l);const A=n.querySelector(".task-priority-btn p").textContent.toLowerCase();e.setPriority(A),e.setOverdue(!1),e.setChecked(!1);const u=n.querySelector(".form-title").textContent.toLowerCase().slice(12);e.setProject(u),Vn(u).addTask(e),(n=>{const e=["today","upcoming","projects"];for(const t of e){const e=[];"projects"===t?e.push("all"):e.push(t);const r=document.querySelector(`.page.${t} [data-project-name="${o(n)}"] .dropdown p`).textContent;"Priority: High to low"===r&&e.unshift("priorityDesc"),"Priority: Low to high"===r&&e.unshift("priorityAsc"),"Date: Newest to oldest"===r&&e.unshift("dateDesc"),"Date: Oldest to newest"===r&&e.unshift("dateAsc");const a=ae(e);for(const e of a)if(0!==e.length&&e[0].getProject()===n){Ne(t,e);break}}})(u),(n=>{const e=document.querySelector(`[data-page-name="${n}"] .alerts`),t=Ge(n);e.after(t),e.remove()})(u),st(n),n.close()})(e)})(n),n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")&&(t=n.target.closest("dialog"),st(t),t.close())}},At=n=>{const e=n.type;for(const t of Object.keys(dt))t===e&&dt[t](n)},ut=n=>{document.querySelector(".filters .selected").classList.remove("selected");(n=>{n.classList.add("selected"),(n=>{const e=He(n);e.unshift("priorityDesc");const t=ae(e),r=document.querySelectorAll(".upcoming.page .project");for(const n of r)n.remove();for(const n of t){if(0===n.length)continue;const e=ze(n);Ze("upcoming",e),Ue("upcoming",n)}})(n)})(n.target.closest("button"))},pt={click:n=>{n.target.closest("button")&&!n.target.closest("button").classList.contains("selected")&&ut(n)}},gt=n=>{n.classList.toggle("expanded");const e=n.nextElementSibling;n.classList.contains("expanded")?(e.style.visibility="visible",e.style.opacity="1"):(e.style.visibility="hidden",e.style.opacity="0")},ft={click:n=>{if(n.target.closest("button").classList.contains("dropdown")){const e=n.target.closest("button");gt(e)}if(n.target.closest("button").classList.contains("sort-by-filter")){(e=n.target.closest("button")).closest("menu").querySelector(".selected").classList.toggle("selected"),e.classList.toggle("selected"),e.closest("div").querySelector(".dropdown").firstElementChild.textContent=e.firstElementChild.textContent;const t=n.target.closest("div").querySelector(".dropdown");gt(t),(n=>{const e=He(n),t=ae(e),r=o(n.closest("main").firstElementChild.textContent.toLowerCase()),s=o(n.closest("article").firstElementChild.textContent.toLowerCase()),i=document.querySelector(`.${r}.page [data-project-name="${s}"] .tasks`);i.firstElementChild.classList.contains("empty")||(n=>{for(;n.firstElementChild;)n.removeChild(n.firstElementChild)})(i);for(const n of t){if(0===n.length)return;if(n[0].getProject()===a(s)){Ue(r,n);break}}})(n.target.closest("button"))}var e}},mt={click:n=>{n.target.closest("button")&&(n.target.closest("button").classList.contains("dropdown")||n.target.closest("button").classList.contains("sort-by-filter"))&&(n=>{const e=n.type;for(const t of Object.keys(ft))t===e&&ft[t](n)})(n),n.target.closest("button")&&n.target.closest("button").classList.contains("add-task-btn")&&At(n),n.target.closest("button")&&n.target.closest("button").classList.contains("more-options-btn")}},ht={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("add-project-btn")&&document.querySelector(".add-project.modal").showModal(),n.target.closest("button")&&n.target.closest("button").dataset.pageName){(n=>{n.classList.contains("collapsible")?(n=>{n.classList.toggle("expanded");const e=n.nextElementSibling;"0px"===window.getComputedStyle(e).getPropertyValue("max-height")?(e.style.maxHeight="100%",e.style.opacity="1",e.style.marginTop="0"):(e.style.maxHeight="0",e.style.opacity="0",e.style.marginTop="-8px")})(n):n.classList.contains("no-projects-created")||se(n)})(n.target.closest("button"))}}},Ct=()=>{const e=s({class:"overview"}),t=[l("3","Overview"),(()=>{const e=c({class:"date-wrapper"}),t=[(()=>{const n=A(hn(Hn,"d"));return r(n,{class:"num-date"}),n})(),(()=>{const e=c({class:"full-date"}),t=hn(Hn,"EEE"),r=hn(Hn,"LLL"),o=hn(Hn,"yyyy"),a=[A(`${t},`),A(`${r} ${o}`)];return n(e,a),e})()];return n(e,t),e})(),(()=>{const e=c({class:"overview-tasks"}),t=(()=>{const e=[],t=["completed","remaining","overdue"];for(const r of t){const t=s({class:r}),o=[l("4","0"),A("Tasks"),A(r)];n(t,o),e.push(t)}return e})();return n(e,t),e})(),(()=>{const e=c({class:"overview-img-wrapper"}),t=[d({src:ve,alt:"Aesthetic image"})];return n(e,t),e})()];return n(e,t),e},bt=()=>{const e=s({class:"notes"}),t=[l("3","Notes"),(()=>{const n=document.createElement("textarea");return r(n,{name:"user-notes",id:"user-notes",cols:"30",rows:"10"}),n})()];return n(e,t),e},vt=()=>{const n=[l("2","Home"),Ct(),bt()],e=ce("home",n);return e.style.display="grid",e},yt=()=>{const n=te(null,"completed");document.querySelector(".overview-tasks .completed h4").textContent=n;const e=te(null,"overdue");document.querySelector(".overview-tasks .overdue h4").textContent=e;const t=te(null,"remaining");document.querySelector(".overview-tasks .remaining h4").textContent=t},xt=n=>{(n=>{const e="true"===n.dataset.isChecked?Pe():Se();n.parentElement.replaceChild(e,n)})(n.querySelector(".left img")),(n=>{if(n.childElementCount>0){const e=n.firstElementChild.textContent;n.firstElementChild.remove(),n.textContent=e}else{const e=document.createElement("s");e.textContent=n.textContent,n.textContent="",n.appendChild(e)}})(n.querySelector(".left p")),(n=>{n.classList.toggle("checked")})(n)},wt={click:e=>{if("IMG"===e.target.nodeName&&e.target.closest("div").classList.contains("left")){const n=e.target,t="true"===n.dataset.isChecked,r=n.parentElement.nextElementSibling,a=t?r.firstElementChild.textContent:r.textContent,s=o(n.closest(".project").firstElementChild.textContent.toLowerCase()),i={isChecked:t,title:a,project:s};(n=>{for(const e of Jn){const t=e.getTasks();if(!t)return;for(const e of t)e.getTitle()===n&&(e.getChecked()?e.setChecked(!1):e.setChecked(!0))}})(a),(n=>{const e=document.querySelector(`[data-page-name="${n}"] .alerts`),t=Ge(n);e.after(t),e.remove(),yt()})(s),(n=>{const e=document.querySelectorAll(`[data-project-name="${n.project}"]`);for(const t of e){const e=n.isChecked?t.querySelectorAll(".task.checked"):t.querySelectorAll(".task");for(const t of e)(t.querySelector(".left p s")&&t.querySelector(".left p s").textContent===n.title||t.querySelector(".left p")&&t.querySelector(".left p ").textContent===n.title)&&xt(t)}})(i)}e.target.closest("button")&&e.target.closest("button").classList.contains("expand-task")&&(e=>{const t=e.closest("li");if(t.classList.toggle("expanded"),t.nextElementSibling&&t.nextElementSibling.classList.contains("task-details"))t.nextElementSibling.addEventListener("animationend",(()=>t.nextElementSibling.remove()));else{const e=(e=>{const t=c({class:"task-details"}),o=[(()=>{const t=c({class:"description-wrapper"}),o=[A("Description"),(()=>{const n=(()=>{const n=a(e.closest("article").dataset.projectName),t=e.querySelector(".left p").textContent,r=Vn(n).getTasks();for(const n of r)if(n.getTitle()===t)return n.getDescription()})(),t=A(n);return r(t,{class:"task-description"}),t})()];return n(t,o),t})(),(()=>{const e={class:"task-options-wrapper"},t=c(e);r(t,e);const o=[(()=>{const n=i({class:"task-edit-btn"});return n.appendChild(d({src:ye,alt:"Pencil icon"})),n})(),(()=>{const n=i({class:"task-delete-btn"});return n.appendChild(d({src:Ie,alt:"Trash can icon"})),n})()];return n(t,o),t})()];return n(t,o),t})(t);t.insertAdjacentElement("afterend",e)}t.nextElementSibling.classList.toggle("expanded")})(e.target.closest("button"))}},Bt=()=>{const e=document.createElement("dialog");r(e,{class:"add-project modal"}),e.dataset.for="add-project-btn";const t=[(()=>{const e=document.createElement("form");r(e,{action:"",method:"dialog"});const t=[(()=>{const e={class:"input-wrapper"},t=c(e);r(t,e);const o=[(()=>{const n=document.createElement("label");return r(n,{for:"project-name"}),n.textContent="Project name:",n})(),(()=>{const n=document.createElement("input");return r(n,{type:"text",name:"project-name",id:"project-name",maxlength:"20"}),n})()];return n(t,o),t})(),(()=>{const e={class:"buttons"},t=c(e);r(t,e);const o=[(()=>{const n=i({type:"submit",class:"confirm-btn"}),e=A("Confirm");return n.appendChild(e),n})(),(()=>{const n=i({type:"button",class:"cancel-btn"}),e=A("Cancel");return n.appendChild(e),n})()];return n(t,o),t})()];return n(e,t),e})()];return n(e,t),e},kt=()=>{const e=document.createElement("dialog");r(e,{class:"add-task modal"}),e.dataset.for="add-task-btn";const t=[(()=>{const e=document.createElement("form");r(e,{action:"",method:"dialog"});const t=[(()=>{const e={class:"task-title-wrapper"},t=c(e);r(t,e);const o=[(()=>{const n=document.createElement("label");return r(n,{for:"task-title"}),n.textContent="Title",n})(),(()=>{const n=document.createElement("input");return r(n,{class:"input",type:"text",name:"task-title",id:"task-title",minlength:"1",maxlength:"30"}),n})()];return n(t,o),t})(),(()=>{const e=c({class:"task-description-wrapper"}),t=[(()=>{const n=document.createElement("label");return r(n,{for:"task-description"}),n.textContent="Description",n})(),(()=>{const n=document.createElement("textarea");return r(n,{name:"task-description",id:"task-description",cols:"10",rows:"5"}),n})()];return n(e,t),e})(),(()=>{const e={class:"task-grouped-options-wrapper"},t=c(e);r(t,e);const o=[(()=>{const e=c({class:"task-priority-wrapper"}),t=[A("Priority"),(()=>{const e=i({type:"button",class:"task-priority-btn"}),t=[A("High"),Te()];return n(e,t),e})()];return n(e,t),e})(),(()=>{const e=c({class:"task-due-date-wrapper"}),t=[(()=>{const n=document.createElement("label");return r(n,{for:"task-due-date"}),n.textContent="Due date",n})(),(()=>{const n=new Date,e=n.getMonth()+1<10?`0${n.getMonth()+1}`:n.getMonth()+1,t=n.getDate()<10?`0${n.getDate()}`:n.getDate(),o=n.getFullYear(),a=document.createElement("input");return r(a,{class:"input",type:"date",name:"task-due-date",id:"task-due-date",min:`${o}-${e}-${t}`}),a})()];return n(e,t),e})()];return n(t,o),t})(),(()=>{const e={class:"buttons"},t=c(e);r(t,e);const o=[(()=>{const n=i({type:"submit",class:"confirm-btn"}),e=A("Confirm");return n.appendChild(e),n})(),(()=>{const n=i({type:"button",class:"cancel-btn"}),e=A("Cancel");return n.appendChild(e),n})()];return n(t,o),t})()];return n(e,t),e})()];return n(e,t),e},It=[[{title:"Drop off package",description:"Store opens at 10 AM",dueDate:$n(),priority:"high",overdue:!1,checked:!0,project:"errands"},{title:"Buy birthday gift",dueDate:$n(),priority:"high",overdue:!1,checked:!0,project:"errands"},{title:"Send out postcard",dueDate:Xn("sunday",0),priority:"medium",overdue:!0,overdue:!0,checked:!1,project:"errands"},{title:"Get groceries",dueDate:$n(),priority:"medium",overdue:!1,checked:!0,project:"errands"},{title:"Meal prep",dueDate:$n(),priority:"low",overdue:!1,checked:!1,project:"errands"},{title:"Water plants",dueDate:$n(),priority:"low",overdue:!1,checked:!1,project:"errands"},{title:"Go to gym",description:"\n            Upper body day:\n            bicep curls, overhead tricep extensions, upright row,\n            rear delt fly/pull, overhead shoulder presses, chest presses\n        ",dueDate:$n(),priority:"low",overdue:!1,checked:!0,project:"errands"}],[{title:"Book Airbnb",description:"Check cancellation policy before booking",dueDate:$n(),priority:"high",overdue:!1,checked:!0,project:"road trip"},{title:"Schedule doggy daycare",dueDate:Fn({days:4}),priority:"high",overdue:!1,checked:!0,project:"road trip"},{title:"Get car checked",dueDate:Rn("saturday",1),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Finish packing",dueDate:Rn("thursday",3),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Turn off all electronics and lock all doors",dueDate:Rn("friday",3),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Make dinner reservations for the day we arrive",dueDate:$n(),priority:"medium",overdue:!1,checked:!1,project:"road trip"},{title:"Buy parking pass for national parks/viewpoints",dueDate:Fn({days:4}),description:"Save copies of tickets",priority:"medium",overdue:!1,checked:!0,project:"road trip"},{title:"Buy travel items",dueDate:Fn({days:6}),priority:"low",overdue:!1,checked:!0,project:"road trip"}],[{title:"Confirm vacation time",dueDate:Rn("tuesday",0),priority:"high",overdue:!1,checked:!0,project:"work"},{title:"Introduce new team members",dueDate:Rn("monday",2),priority:"high",overdue:!1,checked:!1,project:"work"},{title:"Gather end-of-week analysis",dueDate:Rn("friday",2),priority:"high",overdue:!1,checked:!1,project:"work"},{title:"Video call Joe",description:"Go over team dynamic and discuss possible changes",dueDate:Xn("wednesday",0),priority:"medium",overdue:!0,checked:!1,project:"work"}]],Et=()=>{const e=document.createElement("a");r(e,{href:""});const t=[d({src:pe,alt:"Github icon"}),A("Hannah Kim")];return n(e,t),e},Dt=()=>{const e=document.createElement("footer"),t=[Et()];return n(e,t),e},St=()=>{const e=[d({src:de,alt:"Bulleted list icon",class:"logo"}),l("1","To-Do Manager")],t=document.createElement("header");return n(t,e),t},jt=()=>{const n=[l("2","Today"),Qe()];return ce("today",n)},Tt=()=>{const t=t=>{const r={type:"button"};r.class="all"===t?`${o(t)} selected`:o(t);const a=i(r),s=[A(e(t))];return n(a,s),a},r=c({class:"filters"}),a=[t("all"),t("this week"),t("this month")];return n(r,a),r},Lt=()=>{const n=[l("2","Upcoming"),Tt(),Qe()];return ce("upcoming",n)};var Mt=t(379),Yt=t.n(Mt),Pt=t(795),qt=t.n(Pt),Wt=t(569),Ut=t.n(Wt),Nt=t(565),Ot=t.n(Nt),zt=t(216),Qt=t.n(zt),Zt=t(589),Ht=t.n(Zt),$t=t(402),Ft={};Ft.styleTagTransform=Ht(),Ft.setAttributes=Ot(),Ft.insert=Ut().bind(null,"head"),Ft.domAPI=qt(),Ft.insertStyleElement=Qt(),Yt()($t.Z,Ft),$t.Z&&$t.Z.locals&&$t.Z.locals;var Rt=t(538),Xt={};Xt.styleTagTransform=Ht(),Xt.setAttributes=Ot(),Xt.insert=Ut().bind(null,"head"),Xt.domAPI=qt(),Xt.insertStyleElement=Qt(),Yt()(Rt.Z,Xt),Rt.Z&&Rt.Z.locals&&Rt.Z.locals,(()=>{const t=document.querySelector("body"),r=[St(),Re(),vt(),jt(),Lt(),Dt(),Bt(),kt()];n(t,r),(()=>{for(const n of It){const e=le();e.setName(n[0].project);for(const t of n){const n=at();n.setTitle(t.title),n.setDescription(t.description),n.setDueDate(t.dueDate),n.setPriority(t.priority),n.setOverdue(t.overdue),n.setChecked(t.checked),n.setProject(t.project),e.addTask(n)}_n(e)}})(),(n=>{for(const n of["today","upcoming"]){const e=ae([n]);for(const t of e){if(0===t.length)continue;const e=ze(t);Ze(n,e),Ue(n,t)}}})(),(()=>{for(const n of It){const e=n[0].project,t=$e(e);ie(t);const r=Vn(e).getTasks(),o=ze(r);Ze(e,o),Ue(e,r)}})(),(()=>{for(const n of It){const t=n[0].project;Xe(e(t),"projects");const r=o(t),a=document.querySelector(`[data-page-name="${r}"]`),s=Ge(o(t));a.appendChild(s)}})(),yt()})(),(()=>{const n=document.querySelector(".add-project.modal");n.addEventListener("click",(n=>ot(n))),n.addEventListener("focusin",(n=>ot(n))),n.addEventListener("focusout",(n=>ot(n)));const e=document.querySelector(".add-task.modal");e.addEventListener("click",(n=>At(n))),e.addEventListener("focusin",(n=>At(n))),e.addEventListener("focusout",(n=>At(n))),document.querySelector("body").addEventListener("click",(n=>{n.target.closest("nav")&&n.target.closest("nav").classList.contains("sidebar")&&(n=>{const e=n.type;for(const t of Object.keys(ht))t===e&&ht[t](n)})(n),n.target.closest("div")&&n.target.closest("div").classList.contains("filters")&&(n=>{const e=n.type;for(const t of Object.keys(pt))t===e&&pt[t](n)})(n),n.target.closest("li")&&n.target.closest("li").classList.contains("task")&&(n=>{const e=n.type;for(const t of Object.keys(wt))t===e&&wt[t](n)})(n),n.target.closest("article")&&n.target.closest("article").classList.contains("project")&&(n=>{const e=n.type;for(const t of Object.keys(mt))t===e&&mt[t](n)})(n)}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,