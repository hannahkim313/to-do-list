(()=>{"use strict";var n={538:(n,t,e)=>{e.d(t,{Z:()=>m});var r=e(537),o=e.n(r),a=e(645),s=e.n(a),i=e(667),c=e.n(i),l=new URL(e(510),e.b),d=new URL(e(937),e.b),A=s()(o()),u=c()(l),p=c()(d);A.push([n.id,'/******************************************************************************/\n/* Inspired by: https://www.joshwcomeau.com/css/custom-css-reset/\n/******************************************************************************/\n\n@font-face {\n    font-family: "Source Sans Pro";\n    src: url('+u+') format("ttf");\n}\n    \n@font-face {\n    font-family: "Roboto";\n    src: url('+p+') format("ttf");\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    font-family: "Source Sans Pro", "Roboto", sans-serif;\n\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\n\nimg, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n}\n\ninput, button, textarea, select {\n    font: inherit;\n}\n\np, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n}\n\n#root, #__next {\n    isolation: isolate;\n}',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA,+EAA+E;AAC/E;+EAC+E;;AAE/E;IACI,8BAA8B;IAC9B,0DAA4D;AAChE;;AAEA;IACI,qBAAqB;IACrB,0DAAqD;AACzD;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,oDAAoD;;IAEpD,gBAAgB;IAChB,mCAAmC;AACvC;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:['/******************************************************************************/\n/* Inspired by: https://www.joshwcomeau.com/css/custom-css-reset/\n/******************************************************************************/\n\n@font-face {\n    font-family: "Source Sans Pro";\n    src: url("../fonts/SourceSansPro-Regular.ttf") format("ttf");\n}\n    \n@font-face {\n    font-family: "Roboto";\n    src: url("../fonts/Roboto-Regular.ttf") format("ttf");\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n}\n\nbody {\n    font-family: "Source Sans Pro", "Roboto", sans-serif;\n\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n}\n\nimg, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n}\n\ninput, button, textarea, select {\n    font: inherit;\n}\n\np, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n}\n\n#root, #__next {\n    isolation: isolate;\n}'],sourceRoot:""}]);const m=A},402:(n,t,e)=>{e.d(t,{Z:()=>i});var r=e(537),o=e.n(r),a=e(645),s=e.n(a)()(o());s.push([n.id,'/******************************************************************************/\n/*\n/*   Sections:\n/*\n/*   1.\n/*\n/******************************************************************************/\n\n/******************************************************************************/\n/* Selectors for general elements start here.\n/******************************************************************************/\n\n:root {\n    --color-text-1: #4d4d4d;\n    --color-text-1-inverted: #ffffff;\n\n    --color-brand-1: #847fca;\n    --color-brand-1-a: #9490c9;\n    --color-brand-1-b: #E2E4F6;\n    --color-brand-2: #D4E09B;\n    --color-brand-3: #F4D179;\n    --color-brand-3-a: #e7c46b;\n    --color-brand-3-b: #dbb966;\n    --color-brand-4: #e67a6b;\n\n    --color-modal-1: #4d4d4d50;\n    \n    --color-neutral-1: #f1f1f1;\n    --color-neutral-2: #eaeaea;\n    --color-neutral-3: #e3e3e3;\n    --color-neutral-4: #dbdbdb;\n    --color-neutral-5: #c6c6c6;\n}\n\nbody {\n    color: var(--color-text-1);\n    \n    display: grid;\n    grid-template-columns: 300px 1fr;\n    grid-template-rows: 85px 1fr auto;\n}\n\na {\n    text-decoration: none;\n\n    color: var(--color-text-1);\n}\n\nli {\n    list-style: none;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n/* Selectors for collapsible sections start here. */\n\n.collapsible {\n    display: flex;\n    justify-content: space-between;\n}\n\n.collapsible .collapsible.icon {\n    margin-left: auto;\n\n    transition: all 0.5s ease;\n}\n\n.collapsible.expanded .collapsible.icon {\n    transform: rotate(180deg);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Project" modal start here.\n/******************************************************************************/\n\n.add-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.add-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.add-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.add-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.add-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Task" modal start here.\n/******************************************************************************/\n\n.add-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.add-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.add-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.add-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.add-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.add-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.add-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.add-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.add-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.add-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.add-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.add-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Edit Task" modal start here.\n/******************************************************************************/\n\n.edit-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.edit-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.edit-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.edit-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.edit-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.edit-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.edit-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.edit-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.edit-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.edit-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.edit-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.edit-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.edit-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.edit-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.edit-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.edit-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Delete Task" modal start here.\n/******************************************************************************/\n\n.delete-task.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.delete-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.delete-task.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.delete-task.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.delete-task.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.delete-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.delete-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.delete-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Edit Project" modal start here.\n/******************************************************************************/\n\n.edit-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.edit-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.edit-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.edit-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.edit-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.edit-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.edit-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Delete Project" modal start here.\n/******************************************************************************/\n\n.delete-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.delete-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.delete-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.delete-project.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.delete-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.delete-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.delete-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.delete-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the header start here.\n/******************************************************************************/\n\nheader {\n    padding: 16px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\nheader .logo {\n    width: 50px;\n}\n\n/******************************************************************************/\n/* Selectors for the sidebar start here.\n/******************************************************************************/\n\n.sidebar {\n    padding: 16px 16px 32px 16px;\n\n    background-color: var(--color-neutral-1);\n\n    overflow-y: auto;\n    \n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 16px;\n}\n\n/* Selectors for the sidebar sections start here. */\n\n.sidebar-sections > li > img {\n    width: 1.5rem;\n}\n\n.sidebar-sections > li > button {\n    width: 100%;\n    \n    padding: 8px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.3s ease;\n}\n\n.sidebar-sections > li > button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.sidebar-sections > li > button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for the individual projects of the sidebar start here. */\n\n.subsections {\n    max-height: 0;\n\n    margin-top: -8px;\n\n    opacity: 0;\n\n    overflow: hidden;\n\n    transition: all 0.3s ease;\n}\n\n.subsections li > * {\n    width: 100%;\n\n    padding: 8px 8px 8px 40px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    transition: all 0.2s ease;\n}\n\n.subsections button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.subsections button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.subsection {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.subsection .empty {\n    margin-right: auto;\n}\n\n.subsection img {\n    width: 0.6rem;\n}\n\n.subsections .alerts {\n    font-size: 0.8rem;\n\n    display: flex;\n    gap: 8px;\n}\n\n.subsections .alerts p {\n    padding: 1px 9px 0 9px;\n    \n    color: var(--color-text-1-inverted);\n\n    border-radius: 50%;\n}\n\n.subsections .alerts .overdue {\n    background-color: var(--color-brand-4);\n}\n\n.subsections .alerts .remaining {\n    background-color: var(--color-brand-1-a);\n}\n\n/* Selectors for the "Add project" button start here. */\n\n.add-project-btn {\n    width: 50%;\n\n    padding: 8px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-3);\n    border: none;\n    border-radius: 32px;\n\n    align-self: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project-btn:hover {\n    background-color: var(--color-brand-3-a);\n\n}\n.add-project-btn:active {\n    background-color: var(--color-brand-3-b);\n}\n\n.add-project-btn img {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Selectors for all pages start here.\n/******************************************************************************/\n\n.page {\n    padding: 16px;\n\n    overflow-y: auto;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n}\n\n.page h2 {\n    padding: 0 0 16px 0;\n    margin: 16px 32px;\n\n    border-bottom: 1px solid var(--color-text-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n}\n\n/* Selectors for the project filters start here. */\n\n.filters {\n    padding: 16px 16px 16px 32px;\n    \n    grid-row: 2 / 3;\n\n    display: flex;\n    gap: 8px;\n}\n\n.filters button {\n    font-size: 0.8rem;\n\n    padding: 2px 10px;\n\n    background: none;\n    border: 1px solid var(--color-neutral-5);\n    border-radius: 32px;\n\n    transition: all 0.2s ease;\n}\n\n.filters button:hover {\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-neutral-5);\n}\n\n.filters .selected {\n    color: var(--color-text-1-inverted);\n    \n    background-color: var(--color-neutral-5);\n    border: 1px solid transparent;\n    border-radius: 32px;\n}\n\n/* Selectors for the grouped projects start here. */\n\n.page .projects {\n    padding: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .projects button {\n    background: none;\n    border: none;\n}\n\n.page .projects img[src$="svg"] {\n    width: 1.3rem;\n}\n\n/* Selectors for the individual projects starts here. */\n\n.page .project {\n    padding: 16px;\n    \n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto 1fr;\n}\n\n.page .project h3 {\n    padding-bottom: 16px;\n    \n    grid-column: 1 / 2;\n}\n\n/* Selectors for the project options start here. */\n\n.page .options {\n    padding-bottom: 16px;\n    \n    grid-column: 2 / 3;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .options > button {\n    border-radius: 8px;\n}\n\n.page .options .dropdown-wrapper {\n    position: relative;\n}\n\n.page .options .dropdown-menu {\n    width: 100%;\n    height: auto;\n\n    padding: 4px 0;\n\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0 2px 5px var(--color-neutral-5);\n\n    position: absolute;\n    top: 30px;\n    z-index: 1;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown-menu button {\n    width: 100%;\n\n    padding: 4px 8px;\n\n    display: flex;\n    justify-content: flex-start;\n}\n\n.page .options .dropdown-menu button:hover {\n    background-color: var(--color-neutral-1);\n\n}\n.page .options .dropdown-menu button:active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown-menu .selected {\n    background: var(--color-brand-1-b);\n}\n\n.page .options .dropdown {\n    padding: 2px 8px;\n    \n    background-color: var(--color-neutral-1);\n    border-radius: 4px;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown:active {\n    background-color: var(--color-neutral-3);\n}\n\n.page .options .dropdown .input {\n    display: flex;\n    align-items: center;\n}\n\n.page .options button.active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options button:not(.dropdown, .sort-by-filter) {\n    padding: 4px;\n    \n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):hover {\n    background-color: var(--color-neutral-1);\n    border-radius: 8px;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):active {\n    background-color: var(--color-neutral-2);\n}\n\n/* Selectors for the project tasks start here. */\n\n.page .tasks {\n    grid-column: 1 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .task {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.page .task .left {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .task .right {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n}\n\n.page .task .right .overdue {\n    font-size: 0.8rem;\n\n    padding: 2px 8px;\n\n    color: white;\n\n    background-color: var(--color-brand-4);\n    border-radius: 8px;\n}\n\n.page .task.checked .left > :not(button),\n.page .task.checked .right > :not(.expand-task) {\n    opacity: 0.5;\n}\n\n.page .task .right .expand-task {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .task .right .expand-task:hover {\n    background-color: var(--color-neutral-3);\n\n}\n.page .task .right .expand-task:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for a task\'s expanded details start here. */\n\n.task-details {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 16px;\n\n    animation: slide-up 0.3s ease;\n}\n\n.task-details.expanded {\n    animation: slide-down 0.3s ease;\n}\n\n.task-details .description-wrapper {\n    width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 8px;\n}\n\n.task-details .description-wrapper .task-description {\n    min-height: 100px;\n\n    text-align: left;\n\n    padding: 16px;\n\n    background-color: white;\n    border-radius: 4px;\n}\n\n.task-details .task-options-wrapper {\n    min-width: 9%;\n    height: 100%;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 8px;\n    flex-shrink: 0;\n}\n\n.task-details .task-options-wrapper button {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n}\n\n.task-details .task-options-wrapper button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.task-details .task-options-wrapper button.active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for empty projects/tasks start here. */\n\n.projects .empty {\n    height: 60px;\n\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    grid-row: 2 / 3;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Home" page start here.\n/******************************************************************************/\n\n.home {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n.home h3 {\n    padding: 16px;\n}\n\n/* Selectors for the overview section start here. */\n\n.overview {\n    padding: 16px;\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n}\n\n/* Selectors for the date section start here. */\n\n.date-wrapper {\n    padding: 16px;\n    \n    display: flex;\n    align-items: flex-end;\n    gap: 16px;\n}\n\n.date-wrapper .num-date {\n    width: 75px;\n    height: 75px;\n\n    font-size: 2rem;\n\n    background-color: var(--color-brand-1-b);\n    border-radius: 2px;\n    border-top-left-radius: 50%;\n    border-bottom-right-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.date-wrapper .full-date {\n    font-size: 1.2rem;\n}\n\n/* Selectors for the tasks section start here. */\n\n.overview-tasks {\n    padding: 16px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n}\n\n.overview-tasks > * {\n    width: 110px;\n    height: 110px;\n\n    text-align: center;\n\n    border-radius: 50%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.overview-tasks h4 {\n    font-size: 1.2rem;\n}\n\n.overview-tasks p {\n    font-size: 0.8rem;\n}\n\n.overview-tasks .completed {\n    border: 8px solid var(--color-brand-2);\n}\n\n.overview-tasks .remaining {\n    border: 8px solid var(--color-brand-3);\n}\n\n.overview-tasks .overdue {\n    border: 8px solid var(--color-brand-4);\n}\n\n/* Selectors for the overview image start here. */\n\n.overview-img-wrapper {\n    height: 100%;\n\n    margin: 16px 0 0 16px;\n\n    overflow: hidden;\n}\n\n.overview-img-wrapper img {\n    width: 100%;\n    height: 100%;\n    \n    object-fit: cover;\n    object-position: 0% 95%;\n\n    border-radius: 8px;\n}\n\n/* Selectors for the notes section start here. */\n\n.notes {\n    padding: 16px;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.notes textarea {\n    height: 100%;\n\n    resize: none;\n\n    margin: 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 8px;\n}\n\n.notes textarea:focus {\n    outline: 2px solid var(--color-text-1);\n}\n\n/******************************************************************************/\n/* Selectors for the "Upcoming" page start here.\n/******************************************************************************/\n\n/* Selectors for the grouped projects start here. */\n\n.upcoming.page .projects {\n    grid-row: 3 / 4;\n}\n\n/******************************************************************************/\n/* Selectors for the footer start here.\n/******************************************************************************/\n\nfooter {\n    padding: 16px;\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    \n    display: flex;\n    justify-content: center;\n}\n\nfooter a {\n    color: var(--color-text-1-inverted);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\nfooter img[src*="github"] {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Animation keyframes start here.\n/******************************************************************************/\n\n@keyframes slide-down {\n    from {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n}\n@keyframes slide-up {\n    from {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n}',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"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",sourcesContent:['/******************************************************************************/\n/*\n/*   Sections:\n/*\n/*   1.\n/*\n/******************************************************************************/\n\n/******************************************************************************/\n/* Selectors for general elements start here.\n/******************************************************************************/\n\n:root {\n    --color-text-1: #4d4d4d;\n    --color-text-1-inverted: #ffffff;\n\n    --color-brand-1: #847fca;\n    --color-brand-1-a: #9490c9;\n    --color-brand-1-b: #E2E4F6;\n    --color-brand-2: #D4E09B;\n    --color-brand-3: #F4D179;\n    --color-brand-3-a: #e7c46b;\n    --color-brand-3-b: #dbb966;\n    --color-brand-4: #e67a6b;\n\n    --color-modal-1: #4d4d4d50;\n    \n    --color-neutral-1: #f1f1f1;\n    --color-neutral-2: #eaeaea;\n    --color-neutral-3: #e3e3e3;\n    --color-neutral-4: #dbdbdb;\n    --color-neutral-5: #c6c6c6;\n}\n\nbody {\n    color: var(--color-text-1);\n    \n    display: grid;\n    grid-template-columns: 300px 1fr;\n    grid-template-rows: 85px 1fr auto;\n}\n\na {\n    text-decoration: none;\n\n    color: var(--color-text-1);\n}\n\nli {\n    list-style: none;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n/* Selectors for collapsible sections start here. */\n\n.collapsible {\n    display: flex;\n    justify-content: space-between;\n}\n\n.collapsible .collapsible.icon {\n    margin-left: auto;\n\n    transition: all 0.5s ease;\n}\n\n.collapsible.expanded .collapsible.icon {\n    transform: rotate(180deg);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Project" modal start here.\n/******************************************************************************/\n\n.add-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.add-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.add-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.add-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.add-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Add Task" modal start here.\n/******************************************************************************/\n\n.add-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.add-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.add-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.add-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.add-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.add-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.add-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.add-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.add-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.add-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.add-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.add-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.add-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.add-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.add-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.add-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.add-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.add-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Edit Task" modal start here.\n/******************************************************************************/\n\n.edit-task.modal {\n    margin: auto;\n\n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px var(--color-modal-1), -3px 3px 5px var(--color-modal-1);\n\n    top: 0;\n    left: 0;\n}\n\n.edit-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.edit-task.modal form {\n    width: 350px;\n    height: 485px;\n\n    padding: 32px 24px;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.edit-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.edit-task.modal .form-title {\n    font-size: 1.1rem;\n}\n\n/* Selectors for the "Title" input start here. */\n\n.edit-task.modal .task-title-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.edit-task.modal .task-title-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.edit-task.modal .task-title-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n/* Selectors for the "Description" input start here. */\n\n.edit-task.modal .task-description-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.edit-task.modal .task-description-wrapper textarea {\n    width: 100%;\n\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    resize: none;\n}\n\n.edit-task.modal .task-description-wrapper textarea:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-task.modal .task-grouped-options-wrapper {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    gap: 16px;\n}\n\n/* Selectors for the "Priority" input start here. */\n\n.edit-task.modal .task-priority-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    position: relative;\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn {\n    width: 100%;\n\n    background-color: var(--color-neutral-1);\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 4px;\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.edit-task.modal .task-priority-wrapper .task-priority-btn:active {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-task.modal .task-priority-wrapper img[src$="svg"] {\n    width: 1rem;\n}\n\n/* Selectors for the "Due Date" input start here. */\n\n.edit-task.modal .task-due-date-wrapper {\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.edit-task.modal .task-due-date-wrapper input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-task.modal .task-due-date-wrapper input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-task.modal .task-due-date-wrapper input:hover {\n    background-color: var(--color-neutral-2);\n    \n    cursor: pointer;\n}\n\n.edit-task.modal .task-due-date-wrapper input:active {\n    background-color: var(--color-neutral-3);\n}\n\n/* Selectors for the Confirm/Cancel buttons start here. */\n\n.edit-task.modal .buttons {\n    width: 100%;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Delete Task" modal start here.\n/******************************************************************************/\n\n.delete-task.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.delete-task.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.delete-task.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.delete-task.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.delete-task.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.delete-task.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.delete-task.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.delete-task.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Edit Project" modal start here.\n/******************************************************************************/\n\n.edit-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.edit-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.edit-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 16px;\n}\n\n.edit-project.modal .input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.edit-project.modal input {\n    padding: 0 0 0 4px;\n\n    background-color: var(--color-neutral-1);\n    border: 1.5px solid transparent;\n    border-radius: 4px;\n}\n\n.edit-project.modal input:focus {\n    outline: none;\n    border: 1.5px solid var(--color-text-1);\n    border-radius: 2px;\n}\n\n.edit-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.edit-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.edit-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.edit-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the "Delete Project" modal start here.\n/******************************************************************************/\n\n.delete-project.modal {\n    margin: auto;\n    \n    border: none;\n    border-radius: 8px;\n    box-shadow: 3px 3px 5px #4d4d4d50, -3px 3px 5px #4d4d4d50;\n\n    top: 0;\n    left: 0;\n}\n\n.delete-project.modal::backdrop {\n    background-color: #4d4d4d50;\n}\n\n.delete-project.modal form {\n    width: 300px;\n    height: 165px;\n    \n    padding: 8px;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.delete-project.modal .message {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\n.delete-project.modal .buttons {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 48px;\n}\n\n.delete-project.modal button {\n    padding: 2px 8px;\n\n    background-color: var(--color-neutral-2);\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.delete-project.modal button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.delete-project.modal button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/******************************************************************************/\n/* Selectors for the header start here.\n/******************************************************************************/\n\nheader {\n    padding: 16px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\nheader .logo {\n    width: 50px;\n}\n\n/******************************************************************************/\n/* Selectors for the sidebar start here.\n/******************************************************************************/\n\n.sidebar {\n    padding: 16px 16px 32px 16px;\n\n    background-color: var(--color-neutral-1);\n\n    overflow-y: auto;\n    \n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 16px;\n}\n\n/* Selectors for the sidebar sections start here. */\n\n.sidebar-sections > li > img {\n    width: 1.5rem;\n}\n\n.sidebar-sections > li > button {\n    width: 100%;\n    \n    padding: 8px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    transition: all 0.3s ease;\n}\n\n.sidebar-sections > li > button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.sidebar-sections > li > button:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for the individual projects of the sidebar start here. */\n\n.subsections {\n    max-height: 0;\n\n    margin-top: -8px;\n\n    opacity: 0;\n\n    overflow: hidden;\n\n    transition: all 0.3s ease;\n}\n\n.subsections li > * {\n    width: 100%;\n\n    padding: 8px 8px 8px 40px;\n\n    background: none;\n    border: none;\n    border-radius: 8px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    transition: all 0.2s ease;\n}\n\n.subsections button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.subsections button:active {\n    background-color: var(--color-neutral-4);\n}\n\n.subsection {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.subsection .empty {\n    margin-right: auto;\n}\n\n.subsection img {\n    width: 0.6rem;\n}\n\n.subsections .alerts {\n    font-size: 0.8rem;\n\n    display: flex;\n    gap: 8px;\n}\n\n.subsections .alerts p {\n    padding: 1px 9px 0 9px;\n    \n    color: var(--color-text-1-inverted);\n\n    border-radius: 50%;\n}\n\n.subsections .alerts .overdue {\n    background-color: var(--color-brand-4);\n}\n\n.subsections .alerts .remaining {\n    background-color: var(--color-brand-1-a);\n}\n\n/* Selectors for the "Add project" button start here. */\n\n.add-project-btn {\n    width: 50%;\n\n    padding: 8px;\n\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-brand-3);\n    border: none;\n    border-radius: 32px;\n\n    align-self: center;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 4px;\n\n    transition: all 0.2s ease;\n}\n\n.add-project-btn:hover {\n    background-color: var(--color-brand-3-a);\n\n}\n.add-project-btn:active {\n    background-color: var(--color-brand-3-b);\n}\n\n.add-project-btn img {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Selectors for all pages start here.\n/******************************************************************************/\n\n.page {\n    padding: 16px;\n\n    overflow-y: auto;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n}\n\n.page h2 {\n    padding: 0 0 16px 0;\n    margin: 16px 32px;\n\n    border-bottom: 1px solid var(--color-text-1);\n\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n}\n\n/* Selectors for the project filters start here. */\n\n.filters {\n    padding: 16px 16px 16px 32px;\n    \n    grid-row: 2 / 3;\n\n    display: flex;\n    gap: 8px;\n}\n\n.filters button {\n    font-size: 0.8rem;\n\n    padding: 2px 10px;\n\n    background: none;\n    border: 1px solid var(--color-neutral-5);\n    border-radius: 32px;\n\n    transition: all 0.2s ease;\n}\n\n.filters button:hover {\n    color: var(--color-text-1-inverted);\n\n    background-color: var(--color-neutral-5);\n}\n\n.filters .selected {\n    color: var(--color-text-1-inverted);\n    \n    background-color: var(--color-neutral-5);\n    border: 1px solid transparent;\n    border-radius: 32px;\n}\n\n/* Selectors for the grouped projects start here. */\n\n.page .projects {\n    padding: 16px;\n\n    grid-column: 1 / 3;\n    grid-row: 2 / 3;\n    \n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .projects button {\n    background: none;\n    border: none;\n}\n\n.page .projects img[src$="svg"] {\n    width: 1.3rem;\n}\n\n/* Selectors for the individual projects starts here. */\n\n.page .project {\n    padding: 16px;\n    \n    display: grid;\n    grid-template-columns: 1fr auto;\n    grid-template-rows: auto 1fr;\n}\n\n.page .project h3 {\n    padding-bottom: 16px;\n    \n    grid-column: 1 / 2;\n}\n\n/* Selectors for the project options start here. */\n\n.page .options {\n    padding-bottom: 16px;\n    \n    grid-column: 2 / 3;\n\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .options > button {\n    border-radius: 8px;\n}\n\n.page .options .dropdown-wrapper {\n    position: relative;\n}\n\n.page .options .dropdown-menu {\n    width: 100%;\n    height: auto;\n\n    padding: 4px 0;\n\n    background-color: white;\n    border-radius: 4px;\n    box-shadow: 0 2px 5px var(--color-neutral-5);\n\n    position: absolute;\n    top: 30px;\n    z-index: 1;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown-menu button {\n    width: 100%;\n\n    padding: 4px 8px;\n\n    display: flex;\n    justify-content: flex-start;\n}\n\n.page .options .dropdown-menu button:hover {\n    background-color: var(--color-neutral-1);\n\n}\n.page .options .dropdown-menu button:active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown-menu .selected {\n    background: var(--color-brand-1-b);\n}\n\n.page .options .dropdown {\n    padding: 2px 8px;\n    \n    background-color: var(--color-neutral-1);\n    border-radius: 4px;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    transition: all 0.2s ease;\n}\n\n.page .options .dropdown:hover {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options .dropdown:active {\n    background-color: var(--color-neutral-3);\n}\n\n.page .options .dropdown .input {\n    display: flex;\n    align-items: center;\n}\n\n.page .options button.active {\n    background-color: var(--color-neutral-2);\n}\n\n.page .options button:not(.dropdown, .sort-by-filter) {\n    padding: 4px;\n    \n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):hover {\n    background-color: var(--color-neutral-1);\n    border-radius: 8px;\n}\n\n.page .options button:not(.dropdown, .sort-by-filter):active {\n    background-color: var(--color-neutral-2);\n}\n\n/* Selectors for the project tasks start here. */\n\n.page .tasks {\n    grid-column: 1 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.page .task {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n}\n\n.page .task .left {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.page .task .right {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n}\n\n.page .task .right .overdue {\n    font-size: 0.8rem;\n\n    padding: 2px 8px;\n\n    color: white;\n\n    background-color: var(--color-brand-4);\n    border-radius: 8px;\n}\n\n.page .task.checked .left > :not(button),\n.page .task.checked .right > :not(.expand-task) {\n    opacity: 0.5;\n}\n\n.page .task .right .expand-task {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n\n    flex-shrink: 0;\n}\n\n.page .task .right .expand-task:hover {\n    background-color: var(--color-neutral-3);\n\n}\n.page .task .right .expand-task:active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for a task\'s expanded details start here. */\n\n.task-details {\n    padding: 16px 18px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 16px;\n\n    animation: slide-up 0.3s ease;\n}\n\n.task-details.expanded {\n    animation: slide-down 0.3s ease;\n}\n\n.task-details .description-wrapper {\n    width: 100%;\n    height: 100%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 8px;\n}\n\n.task-details .description-wrapper .task-description {\n    min-height: 100px;\n\n    text-align: left;\n\n    padding: 16px;\n\n    background-color: white;\n    border-radius: 4px;\n}\n\n.task-details .task-options-wrapper {\n    min-width: 9%;\n    height: 100%;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    gap: 8px;\n    flex-shrink: 0;\n}\n\n.task-details .task-options-wrapper button {\n    padding: 4px;\n\n    border-radius: 8px;\n\n    transition: all 0.2s ease;\n}\n\n.task-details .task-options-wrapper button:hover {\n    background-color: var(--color-neutral-3);\n}\n\n.task-details .task-options-wrapper button.active {\n    background-color: var(--color-neutral-4);\n}\n\n/* Selectors for empty projects/tasks start here. */\n\n.projects .empty {\n    height: 60px;\n\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border-radius: 20px;\n\n    grid-row: 2 / 3;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n/******************************************************************************/\n/* Selectors for the "Home" page start here.\n/******************************************************************************/\n\n.home {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n}\n\n.home h3 {\n    padding: 16px;\n}\n\n/* Selectors for the overview section start here. */\n\n.overview {\n    padding: 16px;\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n}\n\n/* Selectors for the date section start here. */\n\n.date-wrapper {\n    padding: 16px;\n    \n    display: flex;\n    align-items: flex-end;\n    gap: 16px;\n}\n\n.date-wrapper .num-date {\n    width: 75px;\n    height: 75px;\n\n    font-size: 2rem;\n\n    background-color: var(--color-brand-1-b);\n    border-radius: 2px;\n    border-top-left-radius: 50%;\n    border-bottom-right-radius: 50%;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.date-wrapper .full-date {\n    font-size: 1.2rem;\n}\n\n/* Selectors for the tasks section start here. */\n\n.overview-tasks {\n    padding: 16px;\n\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 16px;\n}\n\n.overview-tasks > * {\n    width: 110px;\n    height: 110px;\n\n    text-align: center;\n\n    border-radius: 50%;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.overview-tasks h4 {\n    font-size: 1.2rem;\n}\n\n.overview-tasks p {\n    font-size: 0.8rem;\n}\n\n.overview-tasks .completed {\n    border: 8px solid var(--color-brand-2);\n}\n\n.overview-tasks .remaining {\n    border: 8px solid var(--color-brand-3);\n}\n\n.overview-tasks .overdue {\n    border: 8px solid var(--color-brand-4);\n}\n\n/* Selectors for the overview image start here. */\n\n.overview-img-wrapper {\n    height: 100%;\n\n    margin: 16px 0 0 16px;\n\n    overflow: hidden;\n}\n\n.overview-img-wrapper img {\n    width: 100%;\n    height: 100%;\n    \n    object-fit: cover;\n    object-position: 0% 95%;\n\n    border-radius: 8px;\n}\n\n/* Selectors for the notes section start here. */\n\n.notes {\n    padding: 16px;\n    \n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.notes textarea {\n    height: 100%;\n\n    resize: none;\n\n    margin: 0 16px;\n    padding: 16px;\n\n    background-color: var(--color-neutral-1);\n    border: none;\n    border-radius: 8px;\n}\n\n.notes textarea:focus {\n    outline: 2px solid var(--color-text-1);\n}\n\n/******************************************************************************/\n/* Selectors for the "Upcoming" page start here.\n/******************************************************************************/\n\n/* Selectors for the grouped projects start here. */\n\n.upcoming.page .projects {\n    grid-row: 3 / 4;\n}\n\n/******************************************************************************/\n/* Selectors for the footer start here.\n/******************************************************************************/\n\nfooter {\n    padding: 16px;\n\n    background-color: var(--color-brand-1);\n\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n    \n    display: flex;\n    justify-content: center;\n}\n\nfooter a {\n    color: var(--color-text-1-inverted);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n}\n\nfooter img[src*="github"] {\n    width: 1rem;\n}\n\n/******************************************************************************/\n/* Animation keyframes start here.\n/******************************************************************************/\n\n@keyframes slide-down {\n    from {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n}\n@keyframes slide-up {\n    from {\n        opacity: 1;\n        transform: translateY( 0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n}'],sourceRoot:""}]);const i=s},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},667:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),s=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(s).concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},s=[],i=0;i<n.length;i++){var c=n[i],l=r.base?c[0]+r.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var u=e(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:A,updater:m,references:1})}s.push(A)}return s}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=e(a[s]);t[i].references--}for(var c=r(n,o),l=0;l<a.length;l++){var d=e(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},937:(n,t,e)=>{n.exports=e.p+"fc2b5060f7accec5cf74.ttf"},510:(n,t,e)=>{n.exports=e.p+"df87f53caf449a3b7572.ttf"}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const n=(n,t)=>{for(const e of t)n.appendChild(e)},t=n=>{const t=n.split(" ");for(let n=0;n<t.length;n++)t[n]=t[n].charAt(0).toUpperCase()+t[n].slice(1);return t.join(" ")},r=(n,t)=>{for(const[e,r]of Object.entries(t)){const t=e;n.setAttribute(t,r)}},o=n=>{const t=Array.from(n);for(let n=0;n<t.length-1&&t[n+1];n++)" "===t[n]&&(t[n+1]=t[n+1].toUpperCase());return t.filter((n=>" "!==n)).join("")},a=n=>n.replaceAll(" ","-"),s=n=>n.replaceAll("-"," "),i=n=>{const t=document.createElement("article");return r(t,n),t},c=n=>{const t=document.createElement("button");return r(t,n),t},l=n=>{const t=document.createElement("div");return r(t,n),t},d=(n,t)=>{const e=document.createElement(`h${n}`);return e.textContent=t,e},A=n=>{const t=document.createElement("img");return r(t,n),t},u=n=>{const t=document.createElement("p");return t.textContent=n,t};function p(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function m(n){return p(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function g(n){p(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function f(n){if(p(1,arguments),!m(n)&&"number"!=typeof n)return!1;var t=g(n);return!isNaN(Number(t))}function C(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function b(n,t){p(2,arguments);var e=g(n).getTime(),r=C(t);return new Date(e+r)}function h(n,t){p(2,arguments);var e=C(t);return b(n,-e)}var x=864e5;function y(n){p(1,arguments);var t=1,e=g(n),r=e.getUTCDay(),o=(r<t?7:0)+r-t;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function v(n){p(1,arguments);var t=g(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var o=y(r),a=new Date(0);a.setUTCFullYear(e,0,4),a.setUTCHours(0,0,0,0);var s=y(a);return t.getTime()>=o.getTime()?e+1:t.getTime()>=s.getTime()?e:e-1}function k(n){p(1,arguments);var t=v(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var r=y(e);return r}var B=6048e5,I={};function w(){return I}function E(n,t){var e,r,o,a,s,i,c,l;p(1,arguments);var d=w(),A=C(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(s=t.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==e?e:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=g(n),m=u.getUTCDay(),f=(m<A?7:0)+m-A;return u.setUTCDate(u.getUTCDate()-f),u.setUTCHours(0,0,0,0),u}function j(n,t){var e,r,o,a,s,i,c,l;p(1,arguments);var d=g(n),A=d.getUTCFullYear(),u=w(),m=C(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(s=t.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(c=u.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(A+1,0,m),f.setUTCHours(0,0,0,0);var b=E(f,t),h=new Date(0);h.setUTCFullYear(A,0,m),h.setUTCHours(0,0,0,0);var x=E(h,t);return d.getTime()>=b.getTime()?A+1:d.getTime()>=x.getTime()?A:A-1}function S(n,t){var e,r,o,a,s,i,c,l;p(1,arguments);var d=w(),A=C(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(s=t.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1),u=j(n,t),m=new Date(0);m.setUTCFullYear(u,0,A),m.setUTCHours(0,0,0,0);var g=E(m,t);return g}var D=6048e5;function q(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const L=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return q("yy"===t?r%100:r,t.length)},T=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):q(e+1,2)},Y=function(n,t){return q(n.getUTCDate(),t.length)},M=function(n,t){return q(n.getUTCHours()%12||12,t.length)},P=function(n,t){return q(n.getUTCHours(),t.length)},W=function(n,t){return q(n.getUTCMinutes(),t.length)},N=function(n,t){return q(n.getUTCSeconds(),t.length)},O=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return q(Math.floor(r*Math.pow(10,e-3)),t.length)};var U={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),o=r>0?r:1-r;return e.ordinalNumber(o,{unit:"year"})}return L(n,t)},Y:function(n,t,e,r){var o=j(n,r),a=o>0?o:1-o;return"YY"===t?q(a%100,2):"Yo"===t?e.ordinalNumber(a,{unit:"year"}):q(a,t.length)},R:function(n,t){return q(v(n),t.length)},u:function(n,t){return q(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return q(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return q(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return T(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return q(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var o=function(n,t){p(1,arguments);var e=g(n),r=E(e,t).getTime()-S(e,t).getTime();return Math.round(r/D)+1}(n,r);return"wo"===t?e.ordinalNumber(o,{unit:"week"}):q(o,t.length)},I:function(n,t,e){var r=function(n){p(1,arguments);var t=g(n),e=y(t).getTime()-k(t).getTime();return Math.round(e/B)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):q(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):Y(n,t)},D:function(n,t,e){var r=function(n){p(1,arguments);var t=g(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),o=e-r;return Math.floor(o/x)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):q(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return q(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return q(a,t.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return q(o,t.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return M(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):P(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):q(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):q(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):W(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):N(n,t)},S:function(n,t){return O(n,t)},X:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return Z(o);case"XXXX":case"XX":return z(o);default:return z(o,":")}},x:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return Z(o);case"xxxx":case"xx":return z(o);default:return z(o,":")}},O:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+$(o,":");default:return"GMT"+z(o,":")}},z:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+$(o,":");default:return"GMT"+z(o,":")}},t:function(n,t,e,r){var o=r._originalDate||n;return q(Math.floor(o.getTime()/1e3),t.length)},T:function(n,t,e,r){return q((r._originalDate||n).getTime(),t.length)}};function $(n,t){var e=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return e+String(o);var s=t||"";return e+String(o)+s+q(a,2)}function Z(n,t){return n%60==0?(n>0?"-":"+")+q(Math.abs(n)/60,2):z(n,t)}function z(n,t){var e=t||"",r=n>0?"-":"+",o=Math.abs(n);return r+q(Math.floor(o/60),2)+e+q(o%60,2)}const Q=U;var H=function(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},X=function(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const F={p:X,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return H(n,t);switch(o){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",H(o,t)).replace("{{time}}",X(a,t))}};function R(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}var G=["D","DD"],J=["YY","YYYY"];function _(n){return-1!==G.indexOf(n)}function V(n){return-1!==J.indexOf(n)}function K(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var nn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function tn(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,r=n.formats[e]||n.formats[n.defaultWidth];return r}}const en={date:tn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:tn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:tn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var rn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function on(n){return function(t,e){var r;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=e&&e.width?String(e.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var s=n.defaultWidth,i=null!=e&&e.width?String(e.width):n.defaultWidth;r=n.values[i]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const an={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:on({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:on({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:on({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:on({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:on({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function sn(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=t.match(o);if(!a)return null;var s,i=a[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(c)?ln(c,(function(n){return n.test(i)})):cn(c,(function(n){return n.test(i)}));s=n.valueCallback?n.valueCallback(l):l,s=e.valueCallback?e.valueCallback(s):s;var d=t.slice(i.length);return{value:s,rest:d}}}function cn(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function ln(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}var dn,An={ordinalNumber:(dn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(dn.matchPattern);if(!e)return null;var r=e[0],o=n.match(dn.parsePattern);if(!o)return null;var a=dn.valueCallback?dn.valueCallback(o[0]):o[0];a=t.valueCallback?t.valueCallback(a):a;var s=n.slice(r.length);return{value:a,rest:s}}),era:sn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:sn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:sn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:sn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:sn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const un={code:"en-US",formatDistance:function(n,t,e){var r,o=nn[n];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:en,formatRelative:function(n,t,e,r){return rn[n]},localize:an,match:An,options:{weekStartsOn:0,firstWeekContainsDate:1}};var pn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,mn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gn=/^'([^]*?)'?$/,fn=/''/g,Cn=/[a-zA-Z]/;function bn(n,t,e){var r,o,a,s,i,c,l,d,A,u,m,b,x,y,v,k,B,I;p(2,arguments);var E=String(t),j=w(),S=null!==(r=null!==(o=null==e?void 0:e.locale)&&void 0!==o?o:j.locale)&&void 0!==r?r:un,D=C(null!==(a=null!==(s=null!==(i=null!==(c=null==e?void 0:e.firstWeekContainsDate)&&void 0!==c?c:null==e||null===(l=e.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==i?i:j.firstWeekContainsDate)&&void 0!==s?s:null===(A=j.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var q=C(null!==(m=null!==(b=null!==(x=null!==(y=null==e?void 0:e.weekStartsOn)&&void 0!==y?y:null==e||null===(v=e.locale)||void 0===v||null===(k=v.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==x?x:j.weekStartsOn)&&void 0!==b?b:null===(B=j.locale)||void 0===B||null===(I=B.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==m?m:0);if(!(q>=0&&q<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var L=g(n);if(!f(L))throw new RangeError("Invalid time value");var T=R(L),Y=h(L,T),M={firstWeekContainsDate:D,weekStartsOn:q,locale:S,_originalDate:L},P=E.match(mn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,F[t])(n,S.formatLong):n})).join("").match(pn).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return hn(r);var a=Q[o];if(a)return null!=e&&e.useAdditionalWeekYearTokens||!V(r)||K(r,t,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!_(r)||K(r,t,String(n)),a(Y,r,S.localize,M);if(o.match(Cn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return P}function hn(n){var t=n.match(gn);return t?t[1].replace(fn,"'"):n}function xn(n,t){p(2,arguments);var e=g(n),r=C(t);return isNaN(r)?new Date(NaN):r?(e.setDate(e.getDate()+r),e):e}function yn(n,t){p(2,arguments);var e=g(n),r=C(t);if(isNaN(r))return new Date(NaN);if(!r)return e;var o=e.getDate(),a=new Date(e.getTime());a.setMonth(e.getMonth()+r+1,0);var s=a.getDate();return o>=s?a:(e.setFullYear(a.getFullYear(),a.getMonth(),o),e)}function vn(n,t){if(p(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var e=t.years?C(t.years):0,r=t.months?C(t.months):0,o=t.weeks?C(t.weeks):0,a=t.days?C(t.days):0,s=t.hours?C(t.hours):0,i=t.minutes?C(t.minutes):0,c=t.seconds?C(t.seconds):0,l=g(n),d=r||e?yn(l,r+12*e):l,A=a||o?xn(d,a+7*o):d,u=i+60*s,m=c+60*u,f=1e3*m,b=new Date(A.getTime()+f);return b}function kn(n){p(1,arguments);var t=g(n),e=t.getDay();return e}function Bn(n,t){p(2,arguments);var e=t-kn(n);return e<=0&&(e+=7),xn(n,e)}function In(n){return p(1,arguments),Bn(n,0)}function wn(n){return p(1,arguments),Bn(n,1)}function En(n){return p(1,arguments),Bn(n,2)}function jn(n){return p(1,arguments),Bn(n,3)}function Sn(n){return p(1,arguments),Bn(n,4)}function Dn(n){return p(1,arguments),Bn(n,5)}function qn(n){return p(1,arguments),Bn(n,6)}function Ln(n,t){p(2,arguments);var e=C(t);return xn(n,-e)}function Tn(n,t){p(2,arguments);var e=C(t);return yn(n,-e)}function Yn(n,t){p(2,arguments);var e=kn(n)-t;return e<=0&&(e+=7),Ln(n,e)}function Mn(n){return p(1,arguments),Yn(n,0)}function Pn(n){return p(1,arguments),Yn(n,1)}function Wn(n){return p(1,arguments),Yn(n,2)}function Nn(n){return p(1,arguments),Yn(n,3)}function On(n){return p(1,arguments),Yn(n,4)}function Un(n){return p(1,arguments),Yn(n,5)}function $n(n){return p(1,arguments),Yn(n,6)}function Zn(n,t){var e,r,o,a,s,i,c,l;p(1,arguments);var d=w(),A=C(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(s=t.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==e?e:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=g(n),m=u.getDay(),f=(m<A?7:0)+m-A;return u.setDate(u.getDate()-f),u.setHours(0,0,0,0),u}function zn(n,t,e){p(2,arguments);var r=Zn(n,e),o=Zn(t,e);return r.getTime()===o.getTime()}function Qn(n,t){p(2,arguments);var e=g(n),r=g(t);return e.getFullYear()===r.getFullYear()&&e.getMonth()===r.getMonth()}const Hn=new Date,Xn=()=>bn(Hn,"LLL d, yyyy"),Fn=n=>bn(vn(Hn,n),"LLL d, yyyy"),Rn=(n,t)=>{const e=vn(Hn,{weeks:t}),r={sunday:bn(In(e),"LLL d, yyyy"),monday:bn(wn(e),"LLL d, yyyy"),tuesday:bn(En(e),"LLL d, yyyy"),wednesday:bn(jn(e),"LLL d, yyyy"),thursday:bn(Sn(e),"LLL d, yyyy"),friday:bn(Dn(e),"LLL d, yyyy"),saturday:bn(qn(e),"LLL d, yyyy")};for(const[t,e]of Object.entries(r))if(t===n)return e},Gn=(n,t)=>{const e=function(n,t){if(p(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var e=t.years?C(t.years):0,r=t.months?C(t.months):0,o=t.weeks?C(t.weeks):0,a=t.days?C(t.days):0,s=t.hours?C(t.hours):0,i=t.minutes?C(t.minutes):0,c=t.seconds?C(t.seconds):0,l=Ln(Tn(n,r+12*e),a+7*o),d=1e3*(c+60*(i+60*s));return new Date(l.getTime()-d)}(Hn,{weeks:t}),r={sunday:bn(Mn(e),"LLL d, yyyy"),monday:bn(Pn(e),"LLL d, yyyy"),tuesday:bn(Wn(e),"LLL d, yyyy"),wednesday:bn(Nn(e),"LLL d, yyyy"),thursday:bn(On(e),"LLL d, yyyy"),friday:bn(Un(e),"LLL d, yyyy"),saturday:bn($n(e),"LLL d, yyyy")};for(const[t,e]of Object.entries(r))if(t===n)return e},Jn=n=>["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][n-1],_n=n=>{const t=Array.from(n),e=t.findIndex((n=>","===n));t.splice(e,1),n=t.join("").split(" ");const r=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"].findIndex((t=>t===n[0])),o=n[1],a=n[2];return new Date(a,r,o)},Vn=n=>{const t=n?_n(n):new Date,e=t.getMonth()+1<10?`0${t.getMonth()+1}`:t.getMonth()+1,r=t.getDate()<10?`0${t.getDate()}`:t.getDate();return`${t.getFullYear()}-${e}-${r}`},Kn=n=>{const t=n.split("-"),e="0"===t[1].charAt(0)?t[1].slice(1):t[1],r="0"===t[2].charAt(0)?t[2].slice(1):t[2],o=t[0];return`${Jn(e)} ${r}, ${o}`},nt=[],tt=n=>nt.push(n),et=n=>{for(const t of nt)if(t.getName().toLowerCase()===n)return t},rt=n=>{let t=0;for(const e of nt){const r=e.getTasks();if(0===r.length)return t;if(n||(t+=r.length),r[0].getProject()===n)return t+r.length}return t},ot=n=>{let t=0;for(const e of nt){const r=e.getTasks();if(0===r.length)return t;if(n||(t+=r.filter((n=>n.getChecked())).length),r[0].getProject()===n)return t+r.filter((n=>n.getChecked())).length}return t},at={completed:ot,overdue:n=>{let t=0;for(const e of nt){const r=e.getTasks();if(0===r.length)return t;if(n||(t+=r.filter((n=>n.getOverdue()&&!n.getChecked())).length),r[0].getProject()===n)return t+r.filter((n=>n.getOverdue()&&!n.getChecked())).length}return t},remaining:n=>n?rt(n)-ot(n):rt()-ot()},st=(n,t)=>{n&&(n=s(n));for(const e of Object.keys(at))if(e===t)return at[e](n)},it=n=>"low"===n?1:"medium"===n?2:"high"===n?3:void 0,ct={today:n=>{if(n)return n.filter((n=>n.getDueDate()===Xn()))},upcoming:n=>{if(n)return n.filter((n=>!1===n.getOverdue()))},all:n=>{if(n)return n},thisWeek:n=>{if(n)return n.filter((n=>{return!1===n.getOverdue()&&(t=n.getDueDate(),function(n,t){return p(1,arguments),zn(n,Date.now(),t)}(t=_n(t)));var t}))},thisMonth:n=>{if(n)return n.filter((n=>{return!1===n.getOverdue()&&(t=n.getDueDate(),function(n){return p(1,arguments),Qn(Date.now(),n)}(t=_n(t)));var t}))},priorityAsc:n=>{if(n){const t=(n,t)=>{const e=_n(n.getDueDate()),r=_n(t.getDueDate()),o=it(n.getPriority()),a=it(t.getPriority());return o===a?e<r?-1:1:o-a};return n.sort(((n,e)=>t(n,e))),n}},priorityDesc:n=>{if(n){const t=(n,t)=>{const e=_n(n.getDueDate()),r=_n(t.getDueDate()),o=it(n.getPriority()),a=it(t.getPriority());return o===a?e<r?-1:1:a-o};return n.sort(((n,e)=>t(n,e))),n}},dateAsc:n=>{if(n){const t=(n,t)=>{const e=_n(n.getDueDate()),r=_n(t.getDueDate()),o=it(n.getPriority()),a=it(t.getPriority());return n.getDueDate()===t.getDueDate()?o>a?-1:1:e-r};return n.sort(((n,e)=>t(n,e))),n}},dateDesc:n=>{if(n){const t=(n,t)=>{const e=_n(n.getDueDate()),r=_n(t.getDueDate()),o=it(n.getPriority()),a=it(t.getPriority());return n.getDueDate()===t.getDueDate()?o>a?-1:1:r-e};return n.sort(((n,e)=>t(n,e))),n}}},lt=n=>{const t=[];for(const e of nt){const r=e.getTasks();let o;for(const t of n)o=ct[t](r);t.push(o)}return t},dt=n=>{const t=n.dataset.pageName;if("empty"===t)return;const e=document.querySelectorAll("body > main");for(const n of e){const e=n.dataset.pageName;n.style.display=e===t?"grid":"none"}},At=n=>{const t=document.querySelector("body"),e=document.querySelector("footer");t.insertBefore(n,e)},ut=(n,t)=>{const e=u(n);return r(e,{class:t?"empty nested":"empty"}),e},pt=(t,e)=>{const o=a(t.toLowerCase()),s=document.createElement("main");return r(s,{class:`${o} page`}),s.dataset.pageName=o,s.style.display="none",n(s,e),s},mt=()=>{let n,t=[];return{getName:()=>n,getTasks:()=>t,setName:t=>n=t,addTask:n=>t.push(n)}},gt=e.p+"f580f1dab98539152aaf.svg",ft=e.p+"96e8b3cf8315d13551ef.svg",Ct=e.p+"18291fddc12bbbd43e48.svg",bt=e.p+"3581a6ffa04f4a694a25.svg",ht=e.p+"c60d10f9969e17a92c30.svg",xt=e.p+"8131ec68ddf3c332ac89.svg",yt=e.p+"826e390e64ac7471c3b8.svg",vt=e.p+"bbccdea7353be054b7cd.svg",kt=e.p+"82ebe5cd270c9acdebd1.svg",Bt=(e.p,e.p+"3006533cacbe3f0a9c70.jpg"),It=e.p+"cafa4f878e6652771a4e.svg",wt=e.p+"123e48f9e5634f79beb7.svg",Et=e.p+"11888627b5b2c8866427.svg",jt=e.p+"cf25268c36eaf3663845.svg",St=e.p+"605789c7fc6cbee9ef91.svg",Dt=e.p+"622cff1ac70b0f1d1490.svg",qt=e.p+"4803b6b61d18ae6a0b20.svg",Lt=e.p+"5fc28dff1fb7023abdf0.svg",Tt=()=>{const n=A({src:ft,alt:"Checked box"});return n.dataset.isChecked="true",n},Yt=()=>A({src:Ct,alt:"Click to display content",class:"collapsible icon"}),Mt=()=>A({src:ht,alt:"High priority"}),Pt=()=>A({src:yt,alt:"Bullet list"}),Wt=()=>A({src:vt,alt:"Low priority"}),Nt=()=>A({src:kt,alt:"Medium priority"}),Ot=()=>A({src:It,alt:"Pencil icon"}),Ut=n=>{const t={alt:"Plus icon"};return t.src=n?Et:wt,A(t)},$t=()=>A({src:Dt,alt:"Trash can icon"}),Zt=()=>{const n=A({src:qt,alt:"Unchecked box"});return n.dataset.isChecked="false",n},zt=t=>{const e=document.createElement("li"),o=t.getChecked()?"task checked":"task";r(e,{class:`collapsible ${o}`});const a=[(()=>{const e=t.getChecked(),r=t.getTitle(),o=l({class:"left"}),a=[(()=>{const t=c({type:"button"}),r=e?Tt():Zt();return n(t,[r]),t})(),e?(()=>{const t=document.createElement("s");t.textContent=r;const e=[t],o=u();return n(o,e),o})():u(r)];return n(o,a),o})(),(()=>{const e=t.getPriority(),o=t.getDueDate(),a=t.getOverdue(),s=l({class:"right"}),i=[u(o),"low"===e?Wt():"medium"===e?Nt():"high"===e?Mt():void 0,(()=>{const t=c({type:"button",class:"expand-task"}),e=[Yt()];return n(t,e),t})()];return a&&i.unshift((()=>{const n=u("Overdue");return r(n,{class:"overdue"}),n})()),n(s,i),s})()];return n(e,a),e},Qt=()=>{const n=document.createElement("menu");return r(n,{class:"tasks"}),n},Ht=(n,t)=>{if(!t){const n=ut("This project does not have any tasks.",!0);return void document.querySelector("footer").previousElementSibling.querySelector(".tasks").appendChild(n)}n=a(n).toLowerCase();const e=a(t[0].getProject()),r=document.querySelector(`.${n}.page [data-project-name="${e}"] .tasks`);for(const n of t){const t=zt(n);r.appendChild(t)}},Xt=(n,t)=>{const e=a(t[0].getProject()),r=document.querySelector(`.${n}.page [data-project-name="${e}"] .tasks`),o=Array.from(r.querySelectorAll(".task"));r.querySelector(".empty")&&o.push(r.querySelector(".empty"));for(const n of o)n.nextElementSibling&&n.nextElementSibling.classList.contains("task-details")&&n.nextElementSibling.remove(),n.remove();for(const n of t){const t=zt(n);r.appendChild(t)}},Ft=()=>{const t=l({class:"options"}),e=[(()=>{const t=()=>{const n=u("Priority: High to low");return r(n,{class:"input"}),n},e=l({class:"dropdown-wrapper"}),o=[(()=>{const e=c({type:"button",class:"dropdown collapsible"}),r=[t(),Yt()];return n(e,r),e})(),(()=>{const t=document.createElement("menu");r(t,{class:"dropdown-menu"});const e=(n=>{const t=[];for(const n of["Priority: High to low","Priority: Low to high","Date: Newest to oldest","Date: Oldest to newest"]){const e=c({type:"button",class:"sort-by-filter"}),r=u(n);e.appendChild(r);const o=document.createElement("li");o.appendChild(e),t.push(o)}return t[0].firstElementChild.classList.add("selected"),t})();return n(t,e),t.style.visibility="hidden",t.style.opacity="0",t})()];return n(e,o),e})(),(()=>{const t=c({type:"button",class:"add-task-btn"}),e=[Ut(!1)];return n(t,e),t})(),(()=>{const t=c({type:"button",class:"edit-project-btn"}),e=[Ot()];return n(t,e),t})(),(()=>{const t=c({type:"button",class:"delete-project-btn"}),e=[$t()];return n(t,e),t})()];return n(t,e),t},Rt=e=>{const r=e?e[0].getProject():document.querySelector("footer").previousElementSibling.dataset.pageName,o=i({class:"project"}),c=[d("3",t(s(r))),Ft(),Qt()];return o.dataset.projectName=a(r),n(o,c),o},Gt=()=>l({class:"projects"}),Jt=(n,t)=>{n=a(n),document.querySelector(`.${n} .projects`).appendChild(t)},_t=n=>{const t=[],e=n.closest("button").firstElementChild.textContent;"Priority: High to low"===e&&t.push("priorityDesc"),"Priority: Low to high"===e&&t.push("priorityAsc"),"Date: Newest to oldest"===e&&t.push("dateDesc"),"Date: Oldest to newest"===e&&t.push("dateAsc");const r=n.closest("main").dataset.pageName;if("today"===r&&t.push("today"),"upcoming"===r){const e=n.closest("main").querySelector(".filters .selected").firstElementChild.textContent.toLowerCase();"all"===e?t.push("upcoming"):t.push(o(e))}return t},Vt=n=>{const e=[d("2","Projects"),Gt()],r=t(n),o=pt(r,e);return o.className+=" projects",o},Kt=t=>{t||(t="empty");const e=()=>{const e=l({class:"subsection"}),r=[Pt()];return"empty"===t?r.push(u("Nothing has been added")):r.push(u(t)),n(e,r),e},r=document.createElement("li"),o=[(()=>{const r=c({type:"button"});r.dataset.pageName=a(t.toLowerCase());const o=[e()];return n(r,o),r})()];return n(r,o),r},ne=()=>{const e=e=>{const o=document.createElement("li"),s=[(()=>{const r={type:"button"},o=[e.icon,u(t(e.name))];e.collapsible&&(r.class=`${e.name} collapsible`,o.push(Yt()));const s=c(r);return s.dataset.pageName=a(e.name),n(s,o),s})()];return e.collapsible&&s.push((()=>{const t=document.createElement("menu");r(t,{class:"subsections"});const e=[Kt()];return n(t,e),t})()),n(o,s),o},o=document.createElement("nav");r(o,{class:"sidebar"});const s=[(t=>{const o=document.createElement("menu");r(o,{class:"sidebar-sections"});const a=[];for(const n of t)a.push(e(n));return n(o,a),o})([{name:"home",icon:A({src:xt,alt:"Home icon"})},{name:"today",icon:A({src:St,alt:"Single day calendar icon"})},{name:"upcoming",icon:A({src:Lt,alt:"Multiple days calendar icon"})},{name:"projects",icon:A({src:jt,alt:"Folder icon"}),collapsible:!0}]),(()=>{const t=c({type:"button",class:"add-project-btn"}),e=[Ut(!0),u("Add project")];return n(t,e),t})()];return n(o,s),o},te=(n,t)=>{const e=document.querySelector(`.${t} + .subsections`),r=e.querySelector("li");"empty"===r.firstElementChild.dataset.pageName&&r.remove();const o=Kt(n);e.appendChild(o)},ee=t=>{const e=(t,e)=>{const o=u();r(o,{class:t});const a=document.createElement("strong");return a.textContent=e,n(o,[a]),o},o=document.createElement("aside");r(o,{class:"alerts"});const a=st(t,"overdue"),s=st(t,"remaining"),i=[];return a>0&&i.push(e("overdue",a)),s>0&&i.push(e("remaining",s)),n(o,i),o},re=n=>""===n.value,oe=n=>{const t=a(n.value.toLowerCase().trim()),e=document.querySelectorAll(".projects + .subsections button");for(const n of e)if(n.dataset.pageName===t)return!0;return!1},ae=n=>!re(n)&&!oe(n),se=n=>{const t=n.closest(".input-wrapper");if(t.childElementCount<4){const e=()=>re(n)?u("Please enter a project name."):oe(n)?u("This project already exists."):void 0;3===t.childElementCount&&t.lastElementChild.remove(),n.closest("form").style.gap="8px";const r=e();r.style.fontSize="0.7rem",r.style.color="var(--color-brand-4)",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",r)}},ie=n=>{const t=n.querySelectorAll("input");for(const n of t)n.nextElementSibling&&n.nextElementSibling.remove(),n.value=null,n.style.borderColor="var(--color-text-1)",n.closest("form").style.gap="16px"},ce=n=>{const e=n.querySelector("input").value.toLowerCase().trim(),r=mt();r.setName(e),tt(r);const o=r.getName();te(t(o),"projects");const a=Vt(e);At(a);const s=Rt();Jt(o,s),Ht(o),dt(a),ie(n)},le=n=>{const t=n.querySelectorAll("input");for(const n of t){const t=n.style.borderColor;"transparent"===t&&(n.style.borderColor="var(--color-text-1)"),"var(--color-text-1)"===t&&(n.style.borderColor="transparent")}},de={click:n=>{var t;n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")&&(t=n.target.closest("dialog"),ie(t),t.close()),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const t=n.target.closest("dialog"),e=t.querySelectorAll("input");for(const r of e)ae(r)?ce(t):(n.preventDefault(),se(r))})(n)},focusin:n=>{if(n.target.closest("form")){const t=n.target.closest("form");le(t)}},focusout:n=>{if(n.target.closest("form")){const t=n.target.closest("form");le(t)}}},Ae=n=>{const t=n.type;for(const e of Object.keys(de))e===t&&de[e](n)},ue=()=>{const t=i({class:"overview"}),e=[d("3","Overview"),(()=>{const t=l({class:"date-wrapper"}),e=[(()=>{const n=u(bn(Hn,"d"));return r(n,{class:"num-date"}),n})(),(()=>{const t=l({class:"full-date"}),e=bn(Hn,"EEE"),r=bn(Hn,"LLL"),o=bn(Hn,"yyyy"),a=[u(`${e},`),u(`${r} ${o}`)];return n(t,a),t})()];return n(t,e),t})(),(()=>{const t=l({class:"overview-tasks"}),e=(()=>{const t=[],e=["completed","remaining","overdue"];for(const r of e){const e=i({class:r}),o=[d("4","0"),u("Tasks"),u(r)];n(e,o),t.push(e)}return t})();return n(t,e),t})(),(()=>{const t=l({class:"overview-img-wrapper"}),e=[A({src:Bt,alt:"Aesthetic image"})];return n(t,e),t})()];return n(t,e),t},pe=()=>{const t=i({class:"notes"}),e=[d("3","Notes"),(()=>{const n=document.createElement("textarea");return r(n,{name:"user-notes",id:"user-notes",cols:"30",rows:"10"}),n})()];return n(t,e),t},me=()=>{const n=[d("2","Home"),ue(),pe()],t=pt("home",n);return t.style.display="grid",t},ge=()=>{const n=st(null,"completed");document.querySelector(".overview-tasks .completed h4").textContent=n;const t=st(null,"overdue");document.querySelector(".overview-tasks .overdue h4").textContent=t;const e=st(null,"remaining");document.querySelector(".overview-tasks .remaining h4").textContent=e},fe=()=>{let n,t,e,r,o,a,s;return{getTitle:()=>n,getDescription:()=>t,getDueDate:()=>e,getPriority:()=>r,getOverdue:()=>o,getChecked:()=>a,getProject:()=>s,setTitle:t=>n=t,setDescription:n=>t=n,setDueDate:n=>e=n,setPriority:n=>r=n,setOverdue:n=>o=n,setChecked:n=>a=n,setProject:n=>s=n}},Ce=n=>n.classList.toggle("active"),be=n=>{const t=n.querySelectorAll(".input");for(const n of t)n.value=null,n.style.borderColor="transparent",n.nextElementSibling&&n.nextElementSibling.remove();n.querySelector("#task-description").value=null},he=n=>{if("today"===n)return"today";if("upcoming"===n){const n=o(document.querySelector(".page.upcoming .filters .selected p").textContent.toLowerCase());return"all"===n?"upcoming":n}return"projects"===n?"all":void 0},xe=(n,t)=>{const e=a(n.getProject());return!document.querySelector(`.page.${t} .project[data-project-name="${e}"]`)},ye=n=>""===n.value,ve=n=>{if("task-title"===n.id){const t=n.closest("form").querySelector(".form-title").textContent.slice(12).toLowerCase(),e=et(t).getTasks();for(const t of e)if(t.getTitle().toLowerCase()===n.value.toLowerCase())return!0}return!1},ke=(n,t)=>""===n.value||ve(n)?((n=>{const t=n.closest("div");3===t.childElementCount&&t.lastElementChild.remove();const e=(n=>ye(n)&&"task-title"===n.id?u("Please enter a task name."):ye(n)&&"task-due-date"===n.id?u("Please select a date."):ve(n)?u("This task already exists in this project."):void 0)(n);e.style.fontSize="0.7rem",e.style.color="var(--color-brand-4)",e.style.marginTop="3px",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",e)})(n),t.preventDefault(),0):((n=>{n.nextElementSibling&&(n.style.border="1.5px solid transparent",n.nextElementSibling.remove())})(n),1),Be={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("add-task-btn")&&(Ce(n.target.closest("button")),(n=>{const e=t(s(n.dataset.projectName)),o=u(`Add task to ${e}`);r(o,{class:"form-title"});const a=document.querySelector(".add-task.modal form");a.firstElementChild.classList.contains("form-title")&&a.firstElementChild.remove(),a.insertBefore(o,a.firstElementChild)})(n.target.closest("article")),document.querySelector(".add-task.modal").showModal()),n.target.closest("button")&&n.target.closest("button").classList.contains("task-priority-btn")&&(n=>{n.lastElementChild.remove();const t=n.firstElementChild.textContent;if("Low"===t){const t=Nt();n.appendChild(t),n.firstElementChild.textContent="Medium"}if("Medium"===t){const t=Mt();n.appendChild(t),n.firstElementChild.textContent="High"}if("High"===t){const t=Wt();n.appendChild(t),n.firstElementChild.textContent="Low"}})(n.target.closest("button")),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")){(n=>{const t=n.target.closest("dialog"),e=t.querySelectorAll(".input");let r=0;for(const t of e)r+=ke(t,n);r===e.length&&(n=>{const t=fe(),e=n.querySelector("#task-title").value;t.setTitle(e);const r=n.querySelector("#task-description").value;t.setDescription(r);const o=n.querySelector("#task-due-date").value.split("-"),s=o[0],i="0"===o[1].charAt(0)?o[1].slice(1):o[1],c="0"===o[2].charAt(0)?o[2].slice(1):o[2],l=`${Jn(i)} ${c}, ${s}`;t.setDueDate(l);const d=n.querySelector(".task-priority-btn p").textContent.toLowerCase();t.setPriority(d),t.setOverdue(!1),t.setChecked(!1);const A=n.querySelector(".form-title").textContent.toLowerCase().slice(12);t.setProject(A),et(A).addTask(t),(n=>{const t=n.getProject(),e=["today","upcoming","projects"];for(const r of e){document.querySelector(`.page.${r} .empty`)&&document.querySelector(`.page.${r} .empty`).remove();const e=[];if(e.push(he(r)),document.querySelector(`.page.${r} [data-project-name="${a(t)}"]`)){const n=document.querySelector(`.page.${r} [data-project-name="${a(t)}"] .dropdown p`).textContent;"Priority: High to low"===n&&e.unshift("priorityDesc"),"Priority: Low to high"===n&&e.unshift("priorityAsc"),"Date: Newest to oldest"===n&&e.unshift("dateDesc"),"Date: Oldest to newest"===n&&e.unshift("dateAsc")}const o=lt(e);for(const e of o)if(0!==e.length){if(xe(n,r)&&e[0].getProject()===n.getProject()){const n=Rt(e);Jt(r,n)}if(e[0].getProject()===t){Xt(r,e);break}}}})(t),(n=>{const t=document.querySelector(`[data-page-name="${a(n)}"] .alerts`),e=ee(n);t?(t.after(e),t.remove()):document.querySelector(`.sidebar [data-page-name="${a(n)}"]`).appendChild(e)})(A),ge(),be(n)})(t)})(n);const t=document.querySelector(".active");Ce(t)}if(n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){e=n.target.closest("dialog"),be(e),e.close();const t=document.querySelector(".active");Ce(t)}var e}},Ie=n=>{const t=n.type;for(const e of Object.keys(Be))e===t&&Be[e](n)},we=n=>n.classList.toggle("active"),Ee={click:t=>{if(t.target.closest("button")&&t.target.closest("button").classList.contains("delete-project-btn")&&(document.querySelector(".delete-project.modal").showModal(),we(t.target.closest("button"))),t.target.closest("button")&&t.target.closest("button").classList.contains("confirm-btn")){const t=document.querySelector(".active").closest("article").dataset.projectName,e=document.querySelector(".active").closest("main").dataset.pageName;(t=>{const e=document.querySelector(".subsections");e.querySelector(`button[data-page-name="${t}"]`).closest("li").remove(),0===e.childElementCount&&(()=>{const t=Pt(),e=u("There are no projects.");r(e,{class:"empty"});const o=[t,e],a={class:"subsection"},s=l(a);r(s,a),s.dataset.pageName="empty",n(s,o);const i=document.createElement("li");i.appendChild(s),document.querySelector(".subsections").appendChild(i)})()})(t),(n=>{(n=>{const t=nt.findIndex((t=>t.getName()===n));nt.splice(t,1)})(s(n))})(t),(n=>{const t=document.querySelectorAll(`.page .project[data-project-name="${n}"]`);for(const n of t)n.remove();const e=document.querySelectorAll(".projects");for(const n of e)if(0===n.childElementCount){const t=ut("There are no upcoming tasks.",!1);n.appendChild(t)}})(t),((n,t)=>{document.querySelector(`.page[data-page-name="${n}"]`).remove(),"today"!==t&&"upcoming"!==t&&((document.querySelector(".projects.page")?document.querySelector(".projects.page"):document.querySelector(".home.page")).style.display="grid")})(t,e),ge()}if(t.target.closest("button")&&t.target.closest("button").classList.contains("cancel-btn")){document.querySelector(".delete-project.modal").close();const n=document.querySelector(".active");we(n)}}},je=n=>{const t=n.type;for(const e of Object.keys(Ee))e===t&&Ee[e](n)},Se=n=>n.classList.toggle("active"),De=n=>{if("today"===n)return"today";if("upcoming"===n){const n=o(document.querySelector(".page.upcoming .filters .selected p").textContent.toLowerCase());return"all"===n?"upcoming":n}return"projects"===n?"all":void 0},qe={click:n=>{const t=document.querySelector(".delete-task.modal");if(n.target.closest("button")&&n.target.closest("button").classList.contains("task-delete-btn")&&((n=>{n.showModal()})(t),Se(n.target.closest("button"))),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")){const n=document.querySelector(".active").closest("li").previousElementSibling,t=document.querySelector(".active").closest("article").dataset.projectName;(n=>{const t=n.closest("article").dataset.projectName,e=n.classList.contains("checked")?n.querySelector(".left p s").textContent:n.querySelector(".left p").textContent,r=["today","upcoming","projects"];for(const o of r){const r=document.querySelector(`.page.${o} [data-project-name="${t}"] .tasks`);if(!r)continue;const a=[];if(a.push(De(o)),document.querySelector(`.page.${o} [data-project-name="${t}"]`)){const n=document.querySelector(`.page.${o} [data-project-name="${t}"] .dropdown p`).textContent;"Priority: High to low"===n&&a.unshift("priorityDesc"),"Priority: Low to high"===n&&a.unshift("priorityAsc"),"Date: Newest to oldest"===n&&a.unshift("dateDesc"),"Date: Oldest to newest"===n&&a.unshift("dateAsc")}const i=lt(a);for(const a of i)if(0!==a.length&&a[0].getProject()===s(t)){for(const r of a){const a=document.querySelectorAll(`.page.${o} [data-project-name="${t}"] .task`);for(const t of a)(t.classList.contains("checked")?t.querySelector(".left p s").textContent:t.querySelector(".left p").textContent)===e&&(n=t);if(r.getTitle()===e){n.classList.contains("expanded")&&n.nextElementSibling.remove(),n.remove();break}}if(r){if("projects"===o&&0===r.childElementCount){const n=ut("There are no tasks.",!0);r.appendChild(n)}"projects"!==o&&0===r.childElementCount&&r.closest("article").remove()}}}(n=>{const t=et(n.projectName).getTasks(),e=t.findIndex((t=>t.getTitle()===n.title));t.splice(e,1)})({projectName:s(t),title:e})})(n),(n=>{const t=document.querySelector(`[data-page-name="${a(n)}"] .alerts`),e=ee(n);t?(t.after(e),t.remove()):document.querySelector(`.sidebar [data-page-name="${a(n)}"]`).appendChild(e)})(t),ge()}if(n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){(n=>{n.close()})(t);const n=document.querySelector(".active");Se(n)}}},Le=n=>{const t=n.type;for(const e of Object.keys(qe))e===t&&qe[e](n)},Te=n=>n.classList.toggle("active"),Ye=n=>""===n.value,Me=n=>n.value.toLowerCase()===document.querySelector(".active").closest("article").querySelector("h3").textContent.toLowerCase(),Pe=n=>!Ye(n)&&!Me(n),We=n=>{const t=n.closest(".input-wrapper");if(t.childElementCount<4){const e=()=>Ye(n)?u("Please enter a project name."):Me(n)?u("Please enter a new project name."):void 0;3===t.childElementCount&&t.lastElementChild.remove(),n.closest("form").style.gap="8px";const r=e();r.style.fontSize="0.7rem",r.style.color="var(--color-brand-4)",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",r)}},Ne=n=>{const t=n.querySelector("input");t.style.borderColor="transparent",t.closest("form").style.gap="16px",t.nextElementSibling&&t.nextElementSibling.remove()},Oe=n=>{const e=document.querySelector(".active").closest("article").querySelector("h3").textContent.toLowerCase(),r=n.querySelector("#new-project-name").value.toLowerCase();(n=>{const t=document.querySelector(".active").closest("article").querySelector("h3").textContent,e=document.querySelectorAll(".subsection p");for(const r of e)if(r.textContent===t){r.textContent=n,r.closest("button").dataset.pageName=a(n.toLowerCase());break}})(t(r));const o=et(e);o.setName(s(r)),document.querySelector(`.page[data-page-name="${a(e)}"]`).dataset.pageName=a(r);const i=o.getTasks();for(const n of i)n.setProject(s(r));const c=document.querySelectorAll(".project");for(const n of c){const o=n.querySelector("h3");o.textContent===t(e)&&(o.textContent=t(r),n.dataset.projectName=a(r))}Ne(n),Te(document.querySelector(".active"))},Ue=n=>{const t=n.querySelectorAll("input");for(const n of t){const t=n.style.borderColor;"transparent"===t&&(n.style.borderColor="var(--color-text-1)"),"var(--color-text-1)"===t&&(n.style.borderColor="transparent")}},$e={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("edit-project-btn")){const t=document.querySelector(".edit-project.modal");((n,t)=>{const e=n.querySelector("#new-project-name"),r=t.target.closest("article").querySelector("h3").textContent;e.value=r})(t,n),(n=>{n.showModal()})(t),Te(n.target.closest("button"))}if(n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const t=n.target.closest("dialog"),e=t.querySelectorAll("input");for(const r of e)Pe(r)?Oe(t):(n.preventDefault(),We(r))})(n),n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){const n=document.querySelector(".edit-project.modal");(n=>{n.close()})(n),Ne(n);const t=document.querySelector(".active");Te(t)}},focusin:n=>{if(n.target.closest("form")){const t=n.target.closest("form");Ue(t)}},focusout:n=>{if(n.target.closest("form")){const t=n.target.closest("form");Ue(t)}}},Ze=n=>{const t=n.type;for(const e of Object.keys($e))e===t&&$e[e](n)},ze=n=>n.classList.toggle("active"),Qe=()=>{const n=document.querySelector(".active").closest("li").previousElementSibling;return s(n.closest("article").dataset.projectName)},He=(n,t)=>""===n.value?((n=>{const t=n.closest("div");3===t.childElementCount&&t.lastElementChild.remove();const e=(()=>{const t=()=>""===n.value;return t()&&"task-title"===n.id?u("Please enter a task name."):t()&&"task-due-date"===n.id?u("Please select a date."):void 0})();e.style.fontSize="0.7rem",e.style.color="var(--color-brand-4)",e.style.marginTop="3px",n.style.borderColor="var(--color-brand-4)",n.insertAdjacentElement("afterend",e)})(n),t.preventDefault(),0):((n=>{n.nextElementSibling&&(n.style.border="1.5px solid transparent",n.nextElementSibling.remove())})(n),1),Xe=n=>{if("today"===n)return"today";if("upcoming"===n){const n=o(document.querySelector(".page.upcoming .filters .selected p").textContent.toLowerCase());return"all"===n?"upcoming":n}return"projects"===n?"all":void 0},Fe={click:n=>{const t=document.querySelector(".edit-task.modal");if(n.target.closest("button")&&n.target.closest("button").classList.contains("task-edit-btn")){(n=>{const t=document.querySelector(".edit-task.modal");var e;t.querySelector("#task-title").value=n.title,t.querySelector("#task-description").textContent=n.description,(n=>{const t=document.querySelector(".edit-task.modal .task-priority-btn");if(t.lastElementChild.remove(),"Low"===n){const n=Wt();t.appendChild(n),t.firstElementChild.textContent="Low"}if("Medium"===n){const n=Nt();t.appendChild(n),t.firstElementChild.textContent="Medium"}if("High"===n){const n=Mt();t.appendChild(n),t.firstElementChild.textContent="High"}})(n.priority),e=n.dueDate,document.querySelector(".edit-task.modal #task-due-date").value=Vn(e)})((n=>{const t=n.closest("li").previousElementSibling;return{title:t.classList.contains("checked")?t.querySelector(".left p s").textContent:t.querySelector(".left p").textContent,description:t.nextElementSibling.querySelector(".task-description").textContent,priority:t.querySelector(".right img").getAttribute("alt").split(" ")[0],dueDate:t.querySelector(".right p").textContent}})(n.target.closest("button"))),(n=>{n.showModal()})(t),ze(n.target.closest("button"))}if(n.target.closest("button")&&n.target.closest("button").classList.contains("task-priority-btn")&&(n=>{n.lastElementChild.remove();const t=n.firstElementChild.textContent;if("Low"===t){const t=Nt();n.appendChild(t),n.firstElementChild.textContent="Medium"}if("Medium"===t){const t=Mt();n.appendChild(t),n.firstElementChild.textContent="High"}if("High"===t){const t=Wt();n.appendChild(t),n.firstElementChild.textContent="Low"}})(n.target.closest("button")),n.target.closest("button")&&n.target.closest("button").classList.contains("confirm-btn")&&(n=>{const t=n.target.closest("dialog"),e=t.querySelectorAll(".input");let r=0;for(const t of e)r+=He(t,n);r===e.length&&(n=>{(n=>{const t=document.querySelector(".active").closest("li").previousElementSibling,e=t.classList.contains("checked")?t.querySelector(".left p s").textContent:t.querySelector(".left p").textContent,r=Qe(),o=et(r).getTasks();for(const t of o)if(t.getTitle()===e){t.setTitle(n.title),t.setDescription(n.description),t.setPriority(n.priority);const e=Kn(n.dueDate);t.setDueDate(e);break}})({title:n.querySelector("#task-title").value,description:n.querySelector("#task-description").value,priority:n.querySelector(".task-priority-btn").firstElementChild.textContent.toLowerCase(),dueDate:n.querySelector("#task-due-date").value}),(()=>{const n=Qe(),t=["today","upcoming","projects"];for(const e of t){const t=[];if(t.push(Xe(e)),document.querySelector(`.page.${e} [data-project-name="${a(n)}"]`)){const r=document.querySelector(`.page.${e} [data-project-name="${a(n)}"] .dropdown p`).textContent;"Priority: High to low"===r&&t.unshift("priorityDesc"),"Priority: Low to high"===r&&t.unshift("priorityAsc"),"Date: Newest to oldest"===r&&t.unshift("dateDesc"),"Date: Oldest to newest"===r&&t.unshift("dateAsc")}const r=lt(t);for(const t of r)if(0!==t.length&&t[0].getProject()===n){Xt(e,t);break}}})()})(t)})(n),n.target.closest("button")&&n.target.closest("button").classList.contains("cancel-btn")){(n=>{n.close()})(t);const n=document.querySelector(".active");ze(n)}}},Re=n=>{const t=n.type;for(const e of Object.keys(Fe))e===t&&Fe[e](n)},Ge=n=>{document.querySelector(".filters .selected").classList.remove("selected");(n=>{n.classList.add("selected"),(n=>{const t=_t(n);t.unshift("priorityDesc");const e=lt(t),r=document.querySelectorAll(".upcoming.page .project");for(const n of r)n.remove();for(const n of e){if(0===n.length)continue;const t=Rt(n);Jt("upcoming",t),Ht("upcoming",n)}})(n)})(n.target.closest("button"))},Je={click:n=>{n.target.closest("button")&&!n.target.closest("button").classList.contains("selected")&&Ge(n)}},_e=n=>{n.classList.toggle("expanded");const t=n.nextElementSibling;n.classList.contains("expanded")?(t.style.visibility="visible",t.style.opacity="1"):(t.style.visibility="hidden",t.style.opacity="0")},Ve={click:n=>{if(n.target.closest("button").classList.contains("dropdown")){const t=n.target.closest("button");_e(t)}if(n.target.closest("button").classList.contains("sort-by-filter")){(t=n.target.closest("button")).closest("menu").querySelector(".selected").classList.toggle("selected"),t.classList.toggle("selected"),t.closest("div").querySelector(".dropdown").firstElementChild.textContent=t.firstElementChild.textContent;const e=n.target.closest("div").querySelector(".dropdown");_e(e),(n=>{const t=_t(n),e=lt(t),r=a(n.closest("main").firstElementChild.textContent.toLowerCase()),o=a(n.closest("article").firstElementChild.textContent.toLowerCase()),i=document.querySelector(`.${r}.page [data-project-name="${o}"] .tasks`);i.firstElementChild.classList.contains("empty")||(n=>{for(;n.firstElementChild;)n.removeChild(n.firstElementChild)})(i);for(const n of e){if(0===n.length)return;if(n[0].getProject()===s(o)){Ht(r,n);break}}})(n.target.closest("button"))}var t}},Ke={click:n=>{n.target.closest("button")&&(n.target.closest("button").classList.contains("dropdown")||n.target.closest("button").classList.contains("sort-by-filter"))&&(n=>{const t=n.type;for(const e of Object.keys(Ve))e===t&&Ve[e](n)})(n),n.target.closest("button")&&n.target.closest("button").classList.contains("add-task-btn")&&Ie(n),n.target.closest("button")&&n.target.closest("button").classList.contains("edit-project-btn")&&Ze(n),n.target.closest("button")&&n.target.closest("button").classList.contains("delete-project-btn")&&je(n)}},nr={click:n=>{if(n.target.closest("button")&&n.target.closest("button").classList.contains("add-project-btn")&&document.querySelector(".add-project.modal").showModal(),n.target.closest("button")&&n.target.closest("button").dataset.pageName){(n=>{n.classList.contains("collapsible")?(n=>{n.classList.toggle("expanded");const t=n.nextElementSibling;"0px"===window.getComputedStyle(t).getPropertyValue("max-height")?(t.style.maxHeight="100%",t.style.opacity="1",t.style.marginTop="0"):(t.style.maxHeight="0",t.style.opacity="0",t.style.marginTop="-8px")})(n):n.classList.contains("no-projects-created")||dt(n)})(n.target.closest("button"))}}},tr=n=>{(n=>{const t="true"===n.dataset.isChecked?Zt():Tt();n.parentElement.replaceChild(t,n)})(n.querySelector(".left img")),(n=>{if(n.childElementCount>0){const t=n.firstElementChild.textContent;n.firstElementChild.remove(),n.textContent=t}else{const t=document.createElement("s");t.textContent=n.textContent,n.textContent="",n.appendChild(t)}})(n.querySelector(".left p")),(n=>{n.classList.toggle("checked")})(n)},er={click:t=>{if("IMG"===t.target.nodeName&&t.target.closest("div").classList.contains("left")){const n=t.target,e="true"===n.dataset.isChecked,r=n.parentElement.nextElementSibling,o=e?r.firstElementChild.textContent:r.textContent,s=a(n.closest(".project").firstElementChild.textContent.toLowerCase()),i={isChecked:e,title:o,project:s};(n=>{for(const t of nt){const e=t.getTasks();if(!e)return;for(const t of e)t.getTitle()===n&&(t.getChecked()?t.setChecked(!1):t.setChecked(!0))}})(o),(n=>{const t=document.querySelector(`[data-page-name="${a(n)}"] .alerts`),e=ee(n);t.after(e),t.remove(),ge()})(s),(n=>{const t=document.querySelectorAll(`[data-project-name="${n.project}"]`);for(const e of t){const t=n.isChecked?e.querySelectorAll(".task.checked"):e.querySelectorAll(".task");for(const e of t)(e.querySelector(".left p s")&&e.querySelector(".left p s").textContent===n.title||e.querySelector(".left p")&&e.querySelector(".left p ").textContent===n.title)&&tr(e)}})(i)}t.target.closest("button")&&t.target.closest("button").classList.contains("expand-task")&&(t=>{const e=t.closest("li");if(e.classList.toggle("expanded"),e.nextElementSibling&&e.nextElementSibling.classList.contains("task-details"))e.nextElementSibling.addEventListener("animationend",(()=>e.nextElementSibling.remove()));else{const t=(t=>{const e=document.createElement("li");r(e,{class:"task-details"});const o=[(()=>{const e=l({class:"description-wrapper"}),o=[u("Description"),(()=>{const n=(()=>{const n=s(t.closest("article").dataset.projectName),e=t.querySelector(".left p").textContent,r=et(n).getTasks();for(const n of r)if(n.getTitle()===e)return n.getDescription()})(),e=u(n);return r(e,{class:"task-description"}),e})()];return n(e,o),e})(),(()=>{const t={class:"task-options-wrapper"},e=l(t);r(e,t);const o=[(()=>{const n=c({class:"task-edit-btn"});return n.appendChild(Ot()),n})(),(()=>{const n=c({class:"task-delete-btn"});return n.appendChild($t()),n})()];return n(e,o),e})()];return n(e,o),e})(e);e.insertAdjacentElement("afterend",t)}e.nextElementSibling.classList.toggle("expanded")})(t.target.closest("button"))}},rr={click:n=>{n.target.closest("button")&&n.target.closest("button").classList.contains("task-delete-btn")&&Le(n),n.target.closest("button")&&n.target.closest("button").classList.contains("task-edit-btn")&&Re(n)}},or=()=>{const t=document.createElement("dialog");r(t,{class:"add-project modal"});const e=[(()=>{const t=document.createElement("form");r(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"input-wrapper"},e=l(t);r(e,t);const o=[(()=>{const n=document.createElement("label");return r(n,{for:"project-name"}),n.textContent="Project name:",n})(),(()=>{const n=document.createElement("input");return r(n,{type:"text",name:"project-name",id:"project-name",maxlength:"20"}),n})()];return n(e,o),e})(),(()=>{const t={class:"buttons"},e=l(t);r(e,t);const o=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,o),e})()];return n(t,e),t})()];return n(t,e),t},ar=()=>{const t=document.createElement("dialog");r(t,{class:"add-task modal"}),t.dataset.for="add-task-btn";const e=[(()=>{const t=document.createElement("form");r(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"task-title-wrapper"},e=l(t);r(e,t);const o=[(()=>{const n=document.createElement("label");return r(n,{for:"task-title"}),n.textContent="Title",n})(),(()=>{const n=document.createElement("input");return r(n,{class:"input",type:"text",name:"task-title",id:"task-title",minlength:"1",maxlength:"30"}),n})()];return n(e,o),e})(),(()=>{const t=l({class:"task-description-wrapper"}),e=[(()=>{const n=document.createElement("label");return r(n,{for:"task-description"}),n.textContent="Description",n})(),(()=>{const n=document.createElement("textarea");return r(n,{name:"task-description",id:"task-description",cols:"10",rows:"5"}),n})()];return n(t,e),t})(),(()=>{const t={class:"task-grouped-options-wrapper"},e=l(t);r(e,t);const o=[(()=>{const t=l({class:"task-priority-wrapper"}),e=[u("Priority"),(()=>{const t=c({type:"button",class:"task-priority-btn"}),e=[u("High"),Mt()];return n(t,e),t})()];return n(t,e),t})(),(()=>{const t=l({class:"task-due-date-wrapper"}),e=[(()=>{const n=document.createElement("label");return r(n,{for:"task-due-date"}),n.textContent="Due date",n})(),(()=>{const n=document.createElement("input"),t={class:"input",type:"date",name:"task-due-date",id:"task-due-date",min:Vn()};return r(n,t),n})()];return n(t,e),t})()];return n(e,o),e})(),(()=>{const t={class:"buttons"},e=l(t);r(e,t);const o=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,o),e})()];return n(t,e),t})()];return n(t,e),t},sr=[[{title:"Drop off package",description:"Store opens at 10 AM",dueDate:Xn(),priority:"high",overdue:!1,checked:!0,project:"errands"},{title:"Buy birthday gift",description:"",dueDate:Xn(),priority:"high",overdue:!1,checked:!0,project:"errands"},{title:"Send out postcard",description:"",dueDate:Gn("sunday",0),priority:"medium",overdue:!0,overdue:!0,checked:!1,project:"errands"},{title:"Get groceries",description:"",dueDate:Xn(),priority:"medium",overdue:!1,checked:!0,project:"errands"},{title:"Meal prep",description:"",dueDate:Xn(),priority:"low",overdue:!1,checked:!1,project:"errands"},{title:"Water plants",description:"",dueDate:Xn(),priority:"low",overdue:!1,checked:!1,project:"errands"},{title:"Go to gym",description:"\n            Upper body day:\n            bicep curls, overhead tricep extensions, upright row,\n            rear delt fly/pull, overhead shoulder presses, chest presses\n        ",dueDate:Xn(),priority:"low",overdue:!1,checked:!0,project:"errands"}],[{title:"Book Airbnb",description:"Check cancellation policy before booking",dueDate:Xn(),priority:"high",overdue:!1,checked:!0,project:"road trip"},{title:"Schedule doggy daycare",description:"",dueDate:Fn({days:4}),priority:"high",overdue:!1,checked:!0,project:"road trip"},{title:"Get car checked",description:"",dueDate:Rn("saturday",1),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Finish packing",description:"",dueDate:Rn("thursday",3),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Turn off all electronics and lock all doors",description:"",dueDate:Rn("friday",3),priority:"high",overdue:!1,checked:!1,project:"road trip"},{title:"Make dinner reservations for the day we arrive",description:"",dueDate:Xn(),priority:"medium",overdue:!1,checked:!1,project:"road trip"},{title:"Buy parking pass for national parks/viewpoints",description:"",dueDate:Fn({days:4}),description:"Save copies of tickets",priority:"medium",overdue:!1,checked:!0,project:"road trip"},{title:"Buy travel items",description:"",dueDate:Fn({days:6}),priority:"low",overdue:!1,checked:!0,project:"road trip"}],[{title:"Confirm vacation time",description:"",dueDate:Rn("tuesday",0),priority:"high",overdue:!1,checked:!0,project:"work"},{title:"Introduce new team members",description:"",dueDate:Rn("monday",2),priority:"high",overdue:!1,checked:!1,project:"work"},{title:"Gather end-of-week analysis",description:"",dueDate:Rn("friday",2),priority:"high",overdue:!1,checked:!1,project:"work"},{title:"Video call Joe",description:"Go over team dynamic and discuss possible changes",dueDate:Gn("wednesday",0),priority:"medium",overdue:!0,checked:!1,project:"work"}]],ir=()=>{const t=document.createElement("dialog");r(t,{class:"delete-task modal"});const e=[(()=>{const t=document.createElement("form");r(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"message"},e=l(t);r(e,t);const o=[(()=>{const n=u(),t=document.createElement("strong");return t.textContent="Delete this task?",n.appendChild(t),n})(),u("You will not be able to recover it.")];return n(e,o),e})(),(()=>{const t={class:"buttons"},e=l(t);r(e,t);const o=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,o),e})()];return n(t,e),t})()];return n(t,e),t},cr=()=>{const t=document.createElement("dialog");r(t,{class:"delete-project modal"});const e=[(()=>{const t=document.createElement("form");r(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"message"},e=l(t);r(e,t);const o=[(()=>{const n=u(),t=document.createElement("strong");return t.textContent="Delete this project?",n.appendChild(t),n})(),u("You will not be able to recover it.")];return n(e,o),e})(),(()=>{const t={class:"buttons"},e=l(t);r(e,t);const o=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,o),e})()];return n(t,e),t})()];return n(t,e),t},lr=()=>{const t=document.createElement("dialog");r(t,{class:"edit-project modal"});const e=[(()=>{const t=document.createElement("form");r(t,{action:"",method:"dialog"});const e=[(()=>{const t={class:"input-wrapper"},e=l(t);r(e,t);const o=[(()=>{const n=document.createElement("label");return r(n,{for:"new-project-name"}),n.textContent="Project name:",n})(),(()=>{const n=document.createElement("input");return r(n,{type:"text",name:"new-project-name",id:"new-project-name",maxlength:"20"}),n})()];return n(e,o),e})(),(()=>{const t={class:"buttons"},e=l(t);r(e,t);const o=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,o),e})()];return n(t,e),t})()];return n(t,e),t},dr=()=>{const t=document.createElement("dialog");r(t,{class:"edit-task modal"}),t.dataset.for="edit-task-btn";const e=[(()=>{const t=document.createElement("form");r(t,{action:"",method:"dialog"});const e=[(()=>{const n=u("Edit task");return r(n,{class:"form-title"}),n})(),(()=>{const t={class:"task-title-wrapper"},e=l(t);r(e,t);const o=[(()=>{const n=document.createElement("label");return r(n,{for:"task-title"}),n.textContent="Title",n})(),(()=>{const n=document.createElement("input");return r(n,{class:"input",type:"text",name:"task-title",id:"task-title",minlength:"1",maxlength:"30"}),n})()];return n(e,o),e})(),(()=>{const t=l({class:"task-description-wrapper"}),e=[(()=>{const n=document.createElement("label");return r(n,{for:"task-description"}),n.textContent="Description",n})(),(()=>{const n=document.createElement("textarea");return r(n,{name:"task-description",id:"task-description",cols:"10",rows:"5"}),n})()];return n(t,e),t})(),(()=>{const t={class:"task-grouped-options-wrapper"},e=l(t);r(e,t);const o=[(()=>{const t=l({class:"task-priority-wrapper"}),e=[u("Priority"),(()=>{const t=c({type:"button",class:"task-priority-btn"}),e=[u("High"),Mt()];return n(t,e),t})()];return n(t,e),t})(),(()=>{const t=l({class:"task-due-date-wrapper"}),e=[(()=>{const n=document.createElement("label");return r(n,{for:"task-due-date"}),n.textContent="Due date",n})(),(()=>{const n=new Date,t=n.getMonth()+1<10?`0${n.getMonth()+1}`:n.getMonth()+1,e=n.getDate()<10?`0${n.getDate()}`:n.getDate(),o=n.getFullYear(),a=document.createElement("input");return r(a,{class:"input",type:"date",name:"task-due-date",id:"task-due-date",min:`${o}-${t}-${e}`}),a})()];return n(t,e),t})()];return n(e,o),e})(),(()=>{const t={class:"buttons"},e=l(t);r(e,t);const o=[(()=>{const n=c({type:"submit",class:"confirm-btn"}),t=u("Confirm");return n.appendChild(t),n})(),(()=>{const n=c({type:"button",class:"cancel-btn"}),t=u("Cancel");return n.appendChild(t),n})()];return n(e,o),e})()];return n(t,e),t})()];return n(t,e),t},Ar=()=>{const t=document.createElement("a");r(t,{href:""});const e=[A({src:bt,alt:"Github icon"}),u("Hannah Kim")];return n(t,e),t},ur=()=>{const t=document.createElement("footer"),e=[Ar()];return n(t,e),t},pr=()=>{const t=[A({src:gt,alt:"Bulleted list icon",class:"logo"}),d("1","To-Do Manager")],e=document.createElement("header");return n(e,t),e},mr=()=>{const n=[d("2","Today"),Gt()];return pt("today",n)},gr=()=>{const e=e=>{const r={type:"button"};r.class="all"===e?`${a(e)} selected`:a(e);const o=c(r),s=[u(t(e))];return n(o,s),o},r=l({class:"filters"}),o=[e("all"),e("this week"),e("this month")];return n(r,o),r},fr=()=>{const n=[d("2","Upcoming"),gr(),Gt()];return pt("upcoming",n)};var Cr=e(379),br=e.n(Cr),hr=e(795),xr=e.n(hr),yr=e(569),vr=e.n(yr),kr=e(565),Br=e.n(kr),Ir=e(216),wr=e.n(Ir),Er=e(589),jr=e.n(Er),Sr=e(402),Dr={};Dr.styleTagTransform=jr(),Dr.setAttributes=Br(),Dr.insert=vr().bind(null,"head"),Dr.domAPI=xr(),Dr.insertStyleElement=wr(),br()(Sr.Z,Dr),Sr.Z&&Sr.Z.locals&&Sr.Z.locals;var qr=e(538),Lr={};Lr.styleTagTransform=jr(),Lr.setAttributes=Br(),Lr.insert=vr().bind(null,"head"),Lr.domAPI=xr(),Lr.insertStyleElement=wr(),br()(qr.Z,Lr),qr.Z&&qr.Z.locals&&qr.Z.locals,(()=>{const e=document.querySelector("body"),r=[pr(),ne(),me(),mr(),fr(),ur(),or(),ar(),dr(),ir(),lr(),cr()];n(e,r),(()=>{for(const n of sr){const t=mt();t.setName(n[0].project);for(const e of n){const n=fe();n.setTitle(e.title),n.setDescription(e.description),n.setDueDate(e.dueDate),n.setPriority(e.priority),n.setOverdue(e.overdue),n.setChecked(e.checked),n.setProject(e.project),t.addTask(n)}tt(t)}})(),(n=>{for(const n of["today","upcoming"]){const t=lt([n]);for(const e of t){if(0===e.length)continue;const t=Rt(e);Jt(n,t),Ht(n,e)}}})(),(()=>{const n=lt(["all"]);for(const t of n){const n=t[0].getProject(),e=Vt(n);At(e);const r=et(n).getTasks(),o=Rt(r);Jt(n,o),Ht(n,r)}})(),(()=>{for(const n of sr){const e=n[0].project;te(t(e),"projects");const r=a(e),o=document.querySelector(`[data-page-name="${r}"]`),s=ee(a(e));o.appendChild(s)}})(),ge()})(),(()=>{const n=document.querySelector(".add-project.modal");n.addEventListener("click",(n=>Ae(n))),n.addEventListener("focusin",(n=>Ae(n))),n.addEventListener("focusout",(n=>Ae(n))),document.querySelector(".add-task.modal").addEventListener("click",(n=>Ie(n))),document.querySelector(".delete-task.modal").addEventListener("click",(n=>Le(n))),document.querySelector(".edit-task.modal").addEventListener("click",(n=>Re(n)));const t=document.querySelector(".edit-project.modal");t.addEventListener("click",(n=>Ze(n))),t.addEventListener("focusin",(n=>Ze(n))),t.addEventListener("focusout",(n=>Ze(n))),document.querySelector(".delete-project.modal").addEventListener("click",(n=>je(n))),document.querySelector("body").addEventListener("click",(n=>{n.target.closest("nav")&&n.target.closest("nav").classList.contains("sidebar")&&(n=>{const t=n.type;for(const e of Object.keys(nr))e===t&&nr[e](n)})(n),n.target.closest("div")&&n.target.closest("div").classList.contains("filters")&&(n=>{const t=n.type;for(const e of Object.keys(Je))e===t&&Je[e](n)})(n),n.target.closest("li")&&n.target.closest("li").classList.contains("task")&&(n=>{const t=n.type;for(const e of Object.keys(er))e===t&&er[e](n)})(n),n.target.closest("div")&&n.target.closest("div").classList.contains("task-options-wrapper")&&(n=>{const t=n.type;for(const e of Object.keys(rr))e===t&&rr[e](n)})(n),n.target.closest("article")&&n.target.closest("article").classList.contains("project")&&(n=>{const t=n.type;for(const e of Object.keys(Ke))e===t&&Ke[e](n)})(n)}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,